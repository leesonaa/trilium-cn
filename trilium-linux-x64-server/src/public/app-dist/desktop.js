/*! For license information please see desktop.js.LICENSE.txt */
(()=>{var __webpack_modules__={2817:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>Z});var i=n(1412),o=n(394),s=n(8866),a=n(383),r=n(8481),d=n(5489),l=n(7336),c=n(4378),h=n(9046);class p extends s.Z{editReadOnlyNoteCommand(){const t=Z.tabManager.getActiveContext();t.viewScope.readOnlyTemporarilyDisabled=!0,Z.triggerEvent("readOnlyTemporarilyDisabled",{noteContext:t})}async showSQLConsoleCommand(){const t=await a.Z.createSqlConsole(),e=await Z.tabManager.openTabWithNoteWithHoisting(t.noteId,{activate:!0});Z.triggerEvent("focusOnDetail",{ntxId:e.ntxId})}async searchNotesCommand({searchString:t,ancestorNoteId:e}){const n=await a.Z.createSearchNote({searchString:t,ancestorNoteId:e});await i.default.loadSearchNote(n.noteId);const o=await Z.tabManager.openTabWithNoteWithHoisting(n.noteId,{activate:!0});Z.triggerCommand("focusOnSearchDefinition",{ntxId:o.ntxId})}async searchInSubtreeCommand({notePath:t}){const e=r.Z.getNoteIdFromUrl(t);this.searchNotesCommand({ancestorNoteId:e})}openNoteExternallyCommand(){const t=Z.tabManager.getActiveContextNoteId(),e=Z.tabManager.getActiveContextNoteMime();t&&d.Z.openNoteExternally(t,e)}openNoteCustomCommand(){const t=Z.tabManager.getActiveContextNoteId(),e=Z.tabManager.getActiveContextNoteMime();t&&d.Z.openNoteCustom(t,e)}enterProtectedSessionCommand(){l.Z.enterProtectedSession()}leaveProtectedSessionCommand(){l.Z.leaveProtectedSession()}hideLeftPaneCommand(){c.Z.save("leftPaneVisible","false")}showLeftPaneCommand(){c.Z.save("leftPaneVisible","true")}toggleLeftPaneCommand(){c.Z.toggle("leftPaneVisible")}async showBackendLogCommand(){await Z.tabManager.openTabWithNoteWithHoisting("_backendLog",{activate:!0})}async showLaunchBarSubtreeCommand(){await this.showAndHoistSubtree("_lbRoot")}async showShareSubtreeCommand(){await this.showAndHoistSubtree("_share")}async showHiddenSubtreeCommand(){await this.showAndHoistSubtree("_hidden")}async showOptionsCommand({section:t}){await Z.tabManager.openContextWithNote(t||"_options",{activate:!0,hoistedNoteId:"_options"})}async showSQLConsoleHistoryCommand(){await this.showAndHoistSubtree("_sqlConsole")}async showSearchHistoryCommand(){await this.showAndHoistSubtree("_search")}async showAndHoistSubtree(t){await Z.tabManager.openContextWithNote(t,{activate:!0,hoistedNoteId:t})}async showNoteSourceCommand(){const t=Z.tabManager.getActiveContextNotePath();t&&await Z.tabManager.openTabWithNoteWithHoisting(t,{activate:!0,viewScope:{viewMode:"source"}})}async showAttachmentsCommand(){const t=Z.tabManager.getActiveContextNotePath();t&&await Z.tabManager.openTabWithNoteWithHoisting(t,{activate:!0,viewScope:{viewMode:"attachments"}})}async showAttachmentDetailCommand(){const t=Z.tabManager.getActiveContextNotePath();t&&await Z.tabManager.openTabWithNoteWithHoisting(t,{activate:!0,viewScope:{viewMode:"attachments"}})}toggleTrayCommand(){if(!h.default.isElectron())return;const{BrowserWindow:t}=h.default.dynamicRequire("@electron/remote"),e=t.getAllWindows(),n=e.every((t=>t.isVisible()))?"hide":"show";for(const t of e)t[n]()}firstTabCommand(){this.#t(1)}secondTabCommand(){this.#t(2)}thirdTabCommand(){this.#t(3)}fourthTabCommand(){this.#t(4)}fifthTabCommand(){this.#t(5)}sixthTabCommand(){this.#t(6)}seventhTabCommand(){this.#t(7)}eigthTabCommand(){this.#t(8)}ninthTabCommand(){this.#t(9)}lastTabCommand(){this.#t(Number.POSITIVE_INFINITY)}#t(t){const e=Z.tabManager.getMainNoteContexts(),n=e[t===Number.POSITIVE_INFINITY?e.length-1:t-1];n&&Z.tabManager.activateNoteContext(n.ntxId)}}var u=n(2040),g=n(1736),m=n(6885),b=n(4264),f=n(7844);class w extends s.Z{constructor(){super(),jQuery.hotkeys&&(jQuery.hotkeys.options.filterInputAcceptingElements=!1,jQuery.hotkeys.options.filterContentEditable=!1,jQuery.hotkeys.options.filterTextInputs=!1)}openDevToolsCommand(){h.default.isElectron()&&h.default.dynamicRequire("@electron/remote").getCurrentWindow().toggleDevTools()}async createNoteIntoInboxCommand(){const t=await a.Z.getInboxNote(),{note:e}=await g.Z.post(`notes/${t.noteId}/children?target=into`,{content:"",type:"text",isProtected:t.isProtected&&u.Z.isProtectedSessionAvailable()});await b.Z.waitForMaxKnownEntityChangeId(),await Z.tabManager.openTabWithNoteWithHoisting(e.noteId,{activate:!0}),Z.triggerEvent("focusAndSelectTitle",{isNewNote:!0})}async toggleNoteHoistingCommand({noteId:t=Z.tabManager.getActiveContextNoteId()}){const e=await i.default.getNote(t),n=Z.tabManager.getActiveContext();e.noteId===n.hoistedNoteId?await n.unhoist():"search"!==e.type&&await n.setHoistedNoteId(t)}async hoistNoteCommand({noteId:t}){const e=Z.tabManager.getActiveContext();e.hoistedNoteId!==t&&await e.setHoistedNoteId(t)}async unhoistCommand(){const t=Z.tabManager.getActiveContext();t&&t.unhoist()}copyWithoutFormattingCommand(){h.default.copySelectionToClipboard()}toggleFullscreenCommand(){if(h.default.isElectron()){const t=h.default.dynamicRequire("@electron/remote").getCurrentWindow();t.isFullScreenable()&&t.setFullScreen(!t.isFullScreen())}}reloadFrontendAppCommand(){h.default.reloadFrontendApp()}logoutCommand(){const t=$('<form action="logout" method="POST">').append($(`<input type='_hidden' name="_csrf" value="${glob.csrfToken}"/>`));$("body").append(t),t.trigger("submit")}backInNoteHistoryCommand(){if(h.default.isElectron()){const t=h.default.dynamicRequire("@electron/remote").getCurrentWebContents(),e=parseInt(t.getActiveIndex());t.goToIndex(e-1)}else window.history.back()}forwardInNoteHistoryCommand(){if(h.default.isElectron()){const t=h.default.dynamicRequire("@electron/remote").getCurrentWebContents(),e=parseInt(t.getActiveIndex());t.goToIndex(e+1)}else window.history.forward()}async switchToDesktopVersionCommand(){h.default.setCookie("trilium-device","desktop"),h.default.reloadFrontendApp("正在切换到桌面版")}async switchToMobileVersionCommand(){h.default.setCookie("trilium-device","mobile"),h.default.reloadFrontendApp("正在切换到移动版")}async openInWindowCommand({notePath:t,hoistedNoteId:e,viewScope:n}){const i=f.Z.calculateHash({notePath:t,hoistedNoteId:e,viewScope:n});if(h.default.isElectron()){const{ipcRenderer:t}=h.default.dynamicRequire("electron");t.send("create-extra-window",{extraWindowHash:i})}else{const t=`${window.location.protocol}//${window.location.host}${window.location.pathname}?extraWindow=1${i}`;window.open(t,"","width=1000,height=800")}}async openNewWindowCommand(){this.openInWindowCommand({notePath:"",hoistedNoteId:"root"})}async runActiveNoteCommand(){const{ntxId:t,note:e}=Z.tabManager.getActiveContext();if(e&&"code"===e.type){if(e.mime.endsWith("env=frontend"))await o.default.getAndExecuteBundle(e.noteId);else if(e.mime.endsWith("env=backend"))await g.Z.post(`script/run/${e.noteId}`);else if("text/x-sqlite;schema=trilium"===e.mime){const n=await g.Z.post(`sql/execute/${e.noteId}`);n.success||m.default.showError(`Error occurred while executing SQL query: ${n.error}`),await Z.triggerEvent("sqlQueryResults",{ntxId:t,results:n.results})}m.default.showMessage("笔记已执行")}}hideAllPopups(){h.default.isDesktop()&&$(".aa-input").autocomplete("close")}noteSwitchedEvent(){this.hideAllPopups()}activeContextChangedEvent(){this.hideAllPopups()}async forceSaveRevisionCommand(){const t=Z.tabManager.getActiveContextNoteId();await g.Z.post(`notes/${t}/revision`),m.default.showMessage("笔记历史已创建")}}var v=n(9925),x=n(1902),y=n(3968);class I extends s.Z{constructor(t=null,e="root",n=null){super(),this.ntxId=t||this.constructor.generateNtxId(),this.hoistedNoteId=e,this.mainNtxId=n,this.resetViewScope()}static generateNtxId(){return h.default.randomString(6)}setEmpty(){this.notePath=null,this.noteId=null,this.parentNoteId=null,this.triggerEvent("noteSwitched",{noteContext:this,notePath:this.notePath}),this.resetViewScope()}isEmpty(){return!this.noteId}async setNote(t,e={}){e.triggerSwitchEvent=void 0===e.triggerSwitchEvent||e.triggerSwitchEvent,e.viewScope=e.viewScope||{},e.viewScope.viewMode=e.viewScope.viewMode||"default";const n=await this.getResolvedNotePath(t);n&&(this.notePath===n&&h.default.areObjectsEqual(this.viewScope,e.viewScope)||(await this.triggerEvent("beforeNoteSwitch",{noteContext:this}),h.default.closeActiveDialog(),this.notePath=n,this.viewScope=e.viewScope,({noteId:this.noteId,parentNoteId:this.parentNoteId}=r.Z.getNoteIdAndParentIdFromUrl(n)),this.saveToRecentNotes(n),u.Z.touchProtectedSessionIfNecessary(this.note),e.triggerSwitchEvent&&await this.triggerEvent("noteSwitched",{noteContext:this,notePath:this.notePath}),await this.setHoistedNoteIfNeeded(),h.default.isMobile()&&this.triggerCommand("setActiveScreen",{screen:"detail"})))}async setHoistedNoteIfNeeded(){if("root"===this.hoistedNoteId&&this.notePath.startsWith("root/_hidden")&&!this.note.isLabelTruthy("keepCurrentHoisting")){let t="_hidden";this.note.isLaunchBarConfig()?t="_lbRoot":this.note.isOptions()&&(t="_options"),await this.setHoistedNoteId(t)}}getSubContexts(){return Z.tabManager.noteContexts.filter((t=>t.ntxId===this.ntxId||t.mainNtxId===this.ntxId))}isMainContext(){return!this.mainNtxId}getMainContext(){if(!this.mainNtxId)return this;try{return Z.tabManager.getNoteContextById(this.mainNtxId)}catch(t){return this.mainNtxId=null,this}}saveToRecentNotes(t){setTimeout((async()=>{t&&t===this.notePath&&await g.Z.post("recent-notes",{noteId:this.note.noteId,notePath:this.notePath})}),5e3)}async getResolvedNotePath(t){const e=await r.Z.resolveNotePath(t,this.hoistedNoteId);if(e){if(!1!==await y.Z.checkNoteAccess(e,this))return e}else logError(`Cannot resolve note path ${t}`)}get note(){return this.noteId&&this.noteId in i.default.notes?i.default.notes[this.noteId]:null}get notePathArray(){return this.notePath?this.notePath.split("/"):[]}isActive(){return Z.tabManager.activeNtxId===this.ntxId}getPojoState(){return"root"===this.hoistedNoteId||this.notePath||0!==this.getSubContexts().length?{ntxId:this.ntxId,mainNtxId:this.mainNtxId,notePath:this.notePath,hoistedNoteId:this.hoistedNoteId,active:this.isActive(),viewScope:this.viewScope}:null}async unhoist(){await this.setHoistedNoteId("root")}async setHoistedNoteId(t){this.hoistedNoteId!==t&&(this.hoistedNoteId=t,this.notePathArray?.includes(t)||h.default.isMobile()||await this.setNote(t),await this.triggerEvent("hoistedNoteChanged",{noteId:t,ntxId:this.ntxId}))}async isReadOnly(){if(this.viewScope.readOnlyTemporarilyDisabled)return!1;if(!this.note||"text"!==this.note.type&&"code"!==this.note.type)return!1;if(this.note.isLabelTruthy("readOnly"))return!0;if("source"===this.viewScope.viewMode)return!0;const t=await this.note.getBlob(),e="text"===this.note.type?c.Z.getInt("autoReadonlySizeText"):c.Z.getInt("autoReadonlySizeCode");return t.contentLength>e&&!this.note.isLabelTruthy("autoReadOnlyDisabled")}async entitiesReloadedEvent({loadResults:t}){t.isNoteReloaded(this.noteId)&&t.getEntityRow("notes",this.noteId).isDeleted&&(this.noteId=null,this.notePath=null,this.triggerEvent("noteSwitched",{noteContext:this,notePath:this.notePath}))}hasNoteList(){return this.note&&"default"===this.viewScope.viewMode&&this.note.hasChildren()&&["book","text","code"].includes(this.note.type)&&"text/x-sqlite;schema=trilium"!==this.note.mime&&!this.note.isLabelTruthy("hideChildrenOverview")}async getTextEditor(t){return this.timeout(new Promise((e=>Z.triggerCommand("executeWithTextEditor",{callback:t,resolve:e,ntxId:this.ntxId}))))}async getCodeEditor(){return this.timeout(new Promise((t=>Z.triggerCommand("executeWithCodeEditor",{resolve:t,ntxId:this.ntxId}))))}async getContentElement(){return this.timeout(new Promise((t=>Z.triggerCommand("executeWithContentElement",{resolve:t,ntxId:this.ntxId}))))}async getTypeWidget(){return this.timeout(new Promise((t=>Z.triggerCommand("executeWithTypeWidget",{resolve:t,ntxId:this.ntxId}))))}timeout(t){return Promise.race([t,new Promise((t=>setTimeout((()=>t(null)),200)))])}resetViewScope(){this.viewScope={}}async getNavigationTitle(){if(!this.note)return null;const{note:t,viewScope:e}=this;let n="default"===e.viewMode?t.title:`${t.title}: ${e.viewMode}`;if(e.attachmentId){const i=await t.getAttachmentById(e.attachmentId);i&&(n+=`: ${i.title}`)}return n}}const C=I;class N{constructor(){this.current=Promise.resolve()}lock(){let t;const e=new Promise((e=>t=()=>e())),n=this.current.then((()=>t));return this.current=e,n}async runExclusively(t){const e=await this.lock();try{return await t()}finally{e()}}}class k extends s.Z{constructor(){super(),this.children=[],this.mutex=new N,this.activeNtxId=null,this.recentlyClosedTabs=[],this.tabsUpdate=new x.Z((async()=>{if(!Z.isMainWindow)return;const t=this.noteContexts.map((t=>t.getPojoState())).filter((t=>!!t));await g.Z.put("options",{openNoteContexts:JSON.stringify(t)})})),Z.addBeforeUnloadListener(this)}get noteContexts(){return this.children}get mainNoteContexts(){return this.noteContexts.filter((t=>!t.mainNtxId))}async loadTabs(){try{const t=Z.isMainWindow&&c.Z.getJson("openNoteContexts")||[];await i.default.getNotes([...t.flatMap((t=>[r.Z.getNoteIdFromUrl(t.notePath),t.hoistedNoteId]))],!0);const e=t.filter((t=>h.default.isMobile()?!!t.active:r.Z.getNoteIdFromUrl(t.notePath)in i.default.notes&&(t.hoistedNoteId in i.default.notes||(t.hoistedNoteId="root"),!0))),n=f.Z.parseNavigationStateFromUrl(window.location.href);0===e.length?(n.ntxId=n.ntxId||C.generateNtxId(),e.push({notePath:n.notePath||"root",ntxId:n.ntxId,active:!0,hoistedNoteId:n.hoistedNoteId||"root",viewScope:n.viewScope||{}})):e.find((t=>t.active))||(e[0].active=!0),await this.tabsUpdate.allowUpdateWithoutChange((async()=>{for(const t of e)await this.openContextWithNote(t.notePath,{activate:t.active,ntxId:t.ntxId,mainNtxId:t.mainNtxId,hoistedNoteId:t.hoistedNoteId,viewScope:t.viewScope})})),n.notePath?await Z.tabManager.switchToNoteContext(n.ntxId,n.notePath,n.viewScope,n.hoistedNoteId):n.searchString&&await Z.triggerCommand("searchNotes",{searchString:n.searchString})}catch(t){logError(`Loading note contexts '${c.Z.get("openNoteContexts")}' failed: ${t.message} ${t.stack}`),await this.openEmptyTab()}}noteSwitchedEvent({noteContext:t}){t.isActive()&&this.setCurrentNavigationStateToHash(),this.tabsUpdate.scheduleUpdate()}setCurrentNavigationStateToHash(){const t=this.calculateHash();0!==window.history.length&&t===window.location?.hash||window.history.pushState(null,"",t);const e=this.getActiveContext();this.updateDocumentTitle(e),this.triggerEvent("activeNoteChanged")}calculateHash(){const t=this.getActiveContext();return t?f.Z.calculateHash({notePath:t.notePath,ntxId:t.ntxId,hoistedNoteId:t.hoistedNoteId,viewScope:t.viewScope}):""}getNoteContexts(){return this.noteContexts}getMainNoteContexts(){return this.noteContexts.filter((t=>t.isMainContext()))}getNoteContextById(t){const e=this.noteContexts.find((e=>e.ntxId===t));if(!e)throw new Error(`找不到 noteContext id='${t}'`);return e}getActiveContext(){return this.activeNtxId?this.getNoteContextById(this.activeNtxId):null}getActiveMainContext(){return this.activeNtxId?this.getNoteContextById(this.activeNtxId).getMainContext():null}getActiveContextNotePath(){const t=this.getActiveContext();return t?t.notePath:null}getActiveContextNote(){const t=this.getActiveContext();return t?t.note:null}getActiveContextNoteId(){const t=this.getActiveContextNote();return t?t.noteId:null}getActiveContextNoteType(){const t=this.getActiveContextNote();return t?t.type:null}getActiveContextNoteMime(){const t=this.getActiveContextNote();return t?t.mime:null}async switchToNoteContext(t,e,n={},i=null){const o=this.noteContexts.find((e=>e.ntxId===t))||await this.openEmptyTab();await this.activateNoteContext(o.ntxId),i&&await o.setHoistedNoteId(i),e&&await o.setNote(e,{viewScope:n})}async openAndActivateEmptyTab(){const t=await this.openEmptyTab();await this.activateNoteContext(t.ntxId),await t.setEmpty()}async openEmptyTab(t=null,e="root",n=null){const i=new C(t,e,n);let o;return o=h.default.isMobile()?this.getActiveContext():this.children.find((t=>t.ntxId===i.ntxId)),o?(await o.setHoistedNoteId(e),o):(this.child(i),await this.triggerEvent("newNoteContextCreated",{noteContext:i}),i)}async openInNewTab(t,e=null){const n=await this.openEmptyTab(null,e||this.getActiveContext().hoistedNoteId);await n.setNote(t)}async openInSameTab(t,e=null){const n=this.getActiveContext();await n.setHoistedNoteId(e||n.hoistedNoteId),await n.setNote(t)}async openTabWithNoteWithHoisting(t,e={}){const n=this.getActiveContext();let i="root";if(n){const e=await r.Z.resolveNotePath(t,n.hoistedNoteId);(e.includes(n.hoistedNoteId)||e.includes("_hidden"))&&(i=n.hoistedNoteId)}return e.hoistedNoteId=i,this.openContextWithNote(t,e)}async openContextWithNote(t,e={}){const n=!!e.activate,i=e.ntxId||null,o=e.mainNtxId||null,s=e.hoistedNoteId||"root",a=e.viewScope||{viewMode:"default"},r=await this.openEmptyTab(i,s,o);return t&&await r.setNote(t,{triggerSwitchEvent:!n,viewScope:a}),n&&(this.activateNoteContext(r.ntxId,!1),await this.triggerEvent("noteSwitchedAndActivated",{noteContext:r,notePath:r.notePath})),r}async activateOrOpenNote(t){for(const e of this.getNoteContexts())if(e.note&&e.note.noteId===t)return void this.activateNoteContext(e.ntxId);await this.openContextWithNote(t,{activate:!0})}async activateNoteContext(t,e=!0){t!==this.activeNtxId&&(this.activeNtxId=t,e&&await this.triggerEvent("activeContextChanged",{noteContext:this.getNoteContextById(t)}),this.tabsUpdate.scheduleUpdate(),this.setCurrentNavigationStateToHash())}async removeNoteContext(t){return await this.mutex.runExclusively((async()=>{let e;try{e=this.getNoteContextById(t)}catch{return!1}if(e.isMainContext()&&1===this.getNoteContexts().filter((t=>t.isMainContext())).length){if(e.isEmpty())return!1;await this.openEmptyTab()}$(".aa-input").autocomplete("close");const n=e.getSubContexts(),i=n.map((t=>t.ntxId));if(await this.triggerEvent("beforeNoteContextRemove",{ntxIds:i}),e.isMainContext())this.mainNoteContexts.length<=1?await this.openAndActivateEmptyTab():i.includes(this.activeNtxId)&&(this.mainNoteContexts.findIndex((t=>t.ntxId===e.ntxId))===this.mainNoteContexts.length-1?await this.activatePreviousTabCommand():await this.activateNextTabCommand());else{const t=e.getMainContext().getSubContexts(),n=t.findIndex((t=>t.ntxId===e.ntxId)),i=t[n===t.length-1?n-1:n+1];await this.activateNoteContext(i.ntxId)}return this.removeNoteContexts(n),!0}))}removeNoteContexts(t){const e=t.map((t=>t.ntxId)),n=this.noteContexts.findIndex((t=>e.includes(t.ntxId)));this.children=this.children.filter((t=>!e.includes(t.ntxId))),this.addToRecentlyClosedTabs(t,n),this.triggerEvent("noteContextRemoved",{ntxIds:e}),this.tabsUpdate.scheduleUpdate()}addToRecentlyClosedTabs(t,e){1===t.length&&t[0].isEmpty()||this.recentlyClosedTabs.push({contexts:t,position:e})}tabReorderEvent({ntxIdsInOrder:t}){const e={};let n=0;for(const i of t)for(const t of this.getNoteContextById(i).getSubContexts())e[t.ntxId]=n++;this.children.sort(((t,n)=>e[t.ntxId]<e[n.ntxId]?-1:1)),this.tabsUpdate.scheduleUpdate()}noteContextReorderEvent({ntxIdsInOrder:t,oldMainNtxId:e,newMainNtxId:n}){const i=Object.fromEntries(t.map(((t,e)=>[t,e])));this.children.sort(((t,e)=>i[t.ntxId]<i[e.ntxId]?-1:1)),e&&n&&this.children.forEach((t=>{t.ntxId===n?t.mainNtxId=null:t.ntxId!==e&&t.mainNtxId!==e||(t.mainNtxId=n)})),this.tabsUpdate.scheduleUpdate()}async activateNextTabCommand(){const t=this.getActiveMainContext().ntxId,e=this.mainNoteContexts.findIndex((e=>e.ntxId===t)),n=this.mainNoteContexts[e===this.mainNoteContexts.length-1?0:e+1].ntxId;await this.activateNoteContext(n)}async activatePreviousTabCommand(){const t=this.getActiveMainContext().ntxId,e=this.mainNoteContexts.findIndex((e=>e.ntxId===t)),n=this.mainNoteContexts[0===e?this.mainNoteContexts.length-1:e-1].ntxId;await this.activateNoteContext(n)}async closeActiveTabCommand(){await this.removeNoteContext(this.activeNtxId)}beforeUnloadEvent(){return this.tabsUpdate.updateNowIfNecessary(),!0}openNewTabCommand(){this.openAndActivateEmptyTab()}async closeAllTabsCommand(){for(const t of this.mainNoteContexts.map((t=>t.ntxId)))await this.removeNoteContext(t)}async closeOtherTabsCommand({ntxId:t}){for(const e of this.mainNoteContexts.map((t=>t.ntxId)))e!==t&&await this.removeNoteContext(e)}async closeTabCommand({ntxId:t}){await this.removeNoteContext(t)}async moveTabToNewWindowCommand({ntxId:t}){const{notePath:e,hoistedNoteId:n}=this.getNoteContextById(t);await this.removeNoteContext(t)&&this.triggerCommand("openInWindow",{notePath:e,hoistedNoteId:n})}async reopenLastTabCommand(){let t=null;await this.mutex.runExclusively((async()=>{if(0===this.recentlyClosedTabs.length)return;1===this.noteContexts.length&&this.noteContexts[0].isEmpty()&&(t=this.noteContexts[0]);const e=this.recentlyClosedTabs.pop(),n=e.contexts;for(const t of n)this.child(t),await this.triggerEvent("newNoteContextCreated",{noteContext:t});const i=[...this.noteContexts.slice(0,e.position),...this.noteContexts.slice(-n.length),...this.noteContexts.slice(e.position,-n.length)];await this.noteContextReorderEvent({ntxIdsInOrder:i.map((t=>t.ntxId))});let o=n.find((t=>t.isMainContext()));o?await this.triggerEvent("contextsReopened",{mainNtxId:o.ntxId,tabPosition:i.filter((t=>t.isMainContext())).findIndex((t=>t.ntxId===o.ntxId))}):await this.triggerEvent("contextsReopened",{ntxId:i[e.position].ntxId,afterNtxId:i[e.position-1].ntxId});const s=1===n.length?n[0]:n.find((t=>t.isMainContext()));await this.activateNoteContext(s.ntxId),await this.triggerEvent("noteSwitched",{noteContext:s,notePath:s.notePath})})),t&&await this.removeNoteContext(t.ntxId)}hoistedNoteChangedEvent(){this.tabsUpdate.scheduleUpdate()}async updateDocumentTitle(t){const e=[await t.getNavigationTitle(),"Trilium Notes"].filter(Boolean);document.title=e.join(" - ")}async entitiesReloadedEvent({loadResults:t}){const e=this.getActiveContext();e&&t.isNoteReloaded(e.noteId)&&await this.updateDocumentTitle(e)}async frocaReloadedEvent(){const t=this.getActiveContext();t&&await this.updateDocumentTitle(t)}}var T=n(6604);class S extends s.Z{setActiveScreenCommand({screen:t}){t!==this.activeScreen&&(this.activeScreen=t,"tree"===t&&Z.tabManager.getActiveContext().setEmpty(),this.triggerEvent("activeScreenChanged",{activeScreen:t}))}}var E=n(8181);class A extends s.Z{get tree(){return Z.noteTreeWidget}async cloneNotesToCommand(){const t=this.tree.getSelectedOrActiveNodes().map((t=>t.data.noteId));this.triggerCommand("cloneNoteIdsTo",{noteIds:t})}async moveNotesToCommand(){const t=this.tree.getSelectedOrActiveNodes().map((t=>t.data.branchId));this.triggerCommand("moveBranchIdsTo",{branchIds:t})}async createNoteIntoCommand(){const t=Z.tabManager.getActiveContext();t&&await E.Z.createNote(t.notePath,{isProtected:t.note.isProtected,saveSelection:!1})}async createNoteAfterCommand(){const t=this.tree.getActiveNode();if(!t)return;const e=r.Z.getNotePath(t.getParent()),n=r.Z.getParentProtectedStatus(t);"root"!==t.data.noteId&&t.data.noteId!==y.Z.getHoistedNoteId()&&await E.Z.createNote(e,{target:"after",targetBranchId:t.data.branchId,isProtected:n,saveSelection:!1})}}var R=n(1065);class P extends s.Z{constructor(){super(),g.Z.get("keyboard-shortcuts-for-notes").then((t=>{for(const e of t)this.bindNoteShortcutHandler(e)}))}bindNoteShortcutHandler(t){const e=t.attributeId;t.isDeleted?R.Z.removeGlobalShortcut(e):R.Z.bindGlobalShortcut(t.value,(()=>Z.tabManager.getActiveContext().setNote(t.noteId)),e)}async entitiesReloadedEvent({loadResults:t}){for(const e of t.getAttributeRows())if("label"===e.type&&"keyboardShortcut"===e.name){const t=await i.default.getNote(e.noteId);t&&"launcher"!==t.type&&this.bindNoteShortcutHandler(e)}}}class _ extends s.Z{constructor(t){super(),this.isMainWindow=t,this.components=[],this.beforeUnloadListeners=[]}setLayout(t){this.layout=t}async start(){this.initComponents(),await c.Z.initializedPromise,this.renderWidgets(),await i.default.initializedPromise,this.tabManager.loadTabs(),setTimeout((()=>o.default.executeStartupBundles()),2e3)}initComponents(){this.tabManager=new k,this.components=[this.tabManager,new p,new w,new A,new P],h.default.isMobile()&&this.components.push(new S);for(const t of this.components)this.child(t);h.default.isElectron()&&this.child(v.Z)}renderWidgets(){const t=this.layout.getRootWidget(this),e=t.render();T.default.updateDisplayedShortcuts(e),$("body").append(e),e.on("click","[data-trigger-command]",(function(){if($(this).hasClass("disabled"))return;const t=$(this).attr("data-trigger-command");$(this).closest(".component").prop("component").triggerCommand(t,{$el:$(this)})})),this.child(t),this.triggerEvent("initialRenderComplete")}triggerEvent(t,e={}){return this.handleEvent(t,e)}triggerCommand(t,e={}){for(const n of this.components){const i=n[`${t}Command`];if(i)return n.callMethod(i,e)}return console.debug(`Unhandled command ${t}, converting to event.`),this.triggerEvent(t,e)}getComponentByEl(t){return $(t).closest(".component").prop("component")}addBeforeUnloadListener(t){"function"==typeof WeakRef&&this.beforeUnloadListeners.push(new WeakRef(t))}}const M=new _(window.glob.isMainWindow);$(window).on("beforeunload",(()=>{let t=!0;M.beforeUnloadListeners=M.beforeUnloadListeners.filter((t=>!!t.deref()));for(const e of M.beforeUnloadListeners){const n=e.deref();n&&(n.beforeUnloadEvent()||(console.log(`Component ${n.componentId} is not finished saving its state.`),m.default.showMessage("请等待几秒钟以完成保存, 然后可以重试.",1e4),t=!1))}if(!t)return"some string"})),$(window).on("hashchange",(function(){const{notePath:t,ntxId:e,viewScope:n}=f.Z.parseNavigationStateFromUrl(window.location.href);(t||e)&&M.tabManager.switchToNoteContext(e,t,n)}));const Z=M},8866:(t,e,n)=>{"use strict";n.d(e,{Z:()=>o});var i=n(9046);class o{constructor(){this.componentId=`${this.sanitizedClassName}-${i.default.randomString(8)}`,this.children=[],this.initialized=null}get sanitizedClassName(){return this.constructor.name.replace(/[^A-Z0-9]/gi,"_")}setParent(t){return this.parent=t,this}child(...t){for(const e of t)e.setParent(this),this.children.push(e);return this}handleEvent(t,e){try{const n=this.initialized?this.initialized.then((()=>this.callMethod(this[`${t}Event`],e))):this.callMethod(this[`${t}Event`],e),i=this.handleEventInChildren(t,e);return n&&i?Promise.all([n,i]):n||i}catch(e){return console.error(`Handling of event '${t}' failed in ${this.constructor.name} with error ${e.message} ${e.stack}`),null}}triggerEvent(t,e={}){return this.parent.triggerEvent(t,e)}handleEventInChildren(t,e={}){const n=[];for(const i of this.children){const o=i.handleEvent(t,e);o&&n.push(o)}return n.length>0?Promise.all(n):null}triggerCommand(t,e={}){const n=this[`${t}Command`];return n?this.callMethod(n,e):this.parent.triggerCommand(t,e)}callMethod(t,e){if("function"!=typeof t)return;const n=Date.now(),o=t.call(this,e),s=Date.now()-n;return glob.isDev&&s>20&&console.log(`Call to ${t.name} in ${this.componentId} took ${s}ms`),glob.isDev&&o?i.default.timeLimit(o,2e4,`Time limit failed on ${this.constructor.name} with ${t.name}`):o}}},9925:(t,e,n)=>{"use strict";n.d(e,{Z:()=>r});var i=n(4378),o=n(8866),s=n(9046);class a extends o.Z{constructor(){super(),s.default.isElectron()&&(i.Z.initializedPromise.then((()=>{this.setZoomFactor(i.Z.getFloat("zoomFactor"))})),window.addEventListener("wheel",(t=>{t.ctrlKey&&this.setZoomFactorAndSave(this.getCurrentZoom()+.001*t.deltaY)})))}setZoomFactor(t){t=parseFloat(t),s.default.dynamicRequire("electron").webFrame.setZoomFactor(t)}async setZoomFactorAndSave(t){t>=.5&&t<=2?(t=Math.round(10*t)/10,this.setZoomFactor(t),await i.Z.save("zoomFactor",t)):console.log(`Zoom factor ${t} outside of the range, ignored.`)}getCurrentZoom(){return s.default.dynamicRequire("electron").webFrame.getZoomFactor()}zoomOutEvent(){this.setZoomFactorAndSave(this.getCurrentZoom()-.1)}zoomInEvent(){this.setZoomFactorAndSave(this.getCurrentZoom()+.1)}zoomResetEvent(){this.setZoomFactorAndSave(1)}setZoomFactorAndSaveEvent({zoomFactor:t}){this.setZoomFactorAndSave(t)}}const r=new a},9763:(t,e,n)=>{"use strict";n.d(e,{Z:()=>i});const i=class{constructor(t,e){this.froca=t,this.update(e)}update(t){this.attachmentId=t.attachmentId,this.ownerId=t.ownerId,this.role=t.role,this.mime=t.mime,this.title=t.title,this.dateModified=t.dateModified,this.utcDateModified=t.utcDateModified,this.utcDateScheduledForErasureSince=t.utcDateScheduledForErasureSince,this.contentLength=t.contentLength,this.froca.attachments[this.attachmentId]=this}getNote(){return this.froca.notes[this.ownerId]}async getBlob(){return await this.froca.getBlob("attachments",this.attachmentId)}}},9673:(t,e,n)=>{"use strict";n.d(e,{Z:()=>o});var i=n(3847);const o=class{constructor(t,e){this.froca=t,this.update(e)}update(t){this.attributeId=t.attributeId,this.noteId=t.noteId,this.type=t.type,this.name=t.name,this.value=t.value,this.position=t.position,this.isInheritable=!!t.isInheritable}getNote(){return this.froca.notes[this.noteId]}async getTargetNote(){const t=this.targetNoteId;return await this.froca.getNote(t,!0)}get targetNoteId(){if("relation"!==this.type)throw new Error(`Attribute ${this.attributeId} is not a relation`);return this.value}get isAutoLink(){return"relation"===this.type&&["internalLink","imageLink","relationMapLink","includeNoteLink"].includes(this.name)}get toString(){return`FAttribute(attributeId=${this.attributeId}, type=${this.type}, name=${this.name}, value=${this.value})`}isDefinition(){return"label"===this.type&&(this.name.startsWith("label:")||this.name.startsWith("relation:"))}getDefinition(){return i.Z.parse(this.value)}isDefinitionFor(t){return"label"===this.type&&this.name===`${t.type}:${t.name}`}get dto(){const t=Object.assign({},this);return delete t.froca,t}}},8726:(t,e,n)=>{"use strict";n.d(e,{Z:()=>i});const i=class{constructor(t,e){this.froca=t,this.update(e)}update(t){this.branchId=t.branchId,this.noteId=t.noteId,this.parentNoteId=t.parentNoteId,this.notePosition=t.notePosition,this.prefix=t.prefix,this.isExpanded=!!t.isExpanded,this.fromSearchNote=!!t.fromSearchNote}async getNote(){return this.froca.getNote(this.noteId)}getNoteFromCache(){return this.froca.getNoteFromCache(this.noteId)}async getParentNote(){return this.froca.getNote(this.parentNoteId)}isTopLevel(){return"root"===this.parentNoteId}get toString(){return`FBranch(branchId=${this.branchId})`}get pojo(){const t={...this};return delete t.froca,t}}},2021:(t,e,n)=>{"use strict";n.d(e,{Z:()=>u});var i=n(1736),o=n(4585),s=n(4264),a=n(1412),r=n(2040);const d=new Set,l=function(t){if(!t?.trim())return"";const e=t.replace(/[^a-z0-9]/gi,"");if(!e.trim())return"";const n=`color-${e}`;return d.has(n)||($("head").append(`<style>.${n}, span.fancytree-active.${n} { color: ${t} !important; }</style>`),d.add(n)),n},c="label",h="relation",p={file:"bx bx-file",image:"bx bx-image",code:"bx bx-code",render:"bx bx-extension",search:"bx bx-file-find",relationMap:"bx bx-map-alt",book:"bx bx-book",noteMap:"bx bx-map-alt",mermaid:"bx bx-selection",canvas:"bx bx-pen",webView:"bx bx-globe-alt",launcher:"bx bx-link",doc:"bx bxs-file-doc",contentWidget:"bx bxs-widget"},u=class{constructor(t,e){this.froca=t,this.attributes=[],this.targetRelations=[],this.parents=[],this.children=[],this.parentToBranch={},this.childToBranch={},this.attachments=null,this.update(e)}update(t){this.noteId=t.noteId,this.title=t.title,this.isProtected=!!t.isProtected,this.type=t.type,this.mime=t.mime,this.blobId=t.blobId}addParent(t,e,n=!0){"none"!==t&&(this.parents.includes(t)||this.parents.push(t),this.parentToBranch[t]=e,n&&this.sortParents())}addChild(t,e,n=!0){t in this.childToBranch||this.children.push(t),this.childToBranch[t]=e,n&&this.sortChildren()}sortChildren(){const t={};for(const e of Object.values(this.childToBranch))t[e]=this.froca.getBranch(e).notePosition;this.children.sort(((e,n)=>t[this.childToBranch[e]]-t[this.childToBranch[n]]))}isJson(){return"application/json"===this.mime}async getContent(){const t=await this.getBlob();return t?.content}async getJsonContent(){const t=await this.getContent();try{return JSON.parse(t)}catch(t){return console.log(`Cannot parse content of note '${this.noteId}': `,t.message),null}}getParentBranchIds(){return Object.values(this.parentToBranch)}getBranchIds(){return this.getParentBranchIds()}getParentBranches(){const t=Object.values(this.parentToBranch);return this.froca.getBranches(t)}getBranches(){return this.getParentBranches()}hasChildren(){return this.children.length>0}getChildBranches(){const t=this.children.map((t=>this.childToBranch[t]));return this.froca.getBranches(t)}getParentNoteIds(){return this.parents}getParentNotes(){return this.froca.getNotesFromCache(this.parents)}sortParents(){this.parents.sort(((t,e)=>{const n=this.parentToBranch[t];if(n&&n.startsWith("virt-"))return 1;const i=this.froca.getNoteFromCache(t);return i.isArchived||i.isHiddenCompletely()?1:t<e?-1:1}))}get isArchived(){return this.hasAttribute("label","archived")}getChildNoteIds(){return this.children}async getChildNotes(){return await this.froca.getNotes(this.children)}async getAttachments(){return this.attachments||(this.attachments=await this.froca.getAttachmentsForNote(this.noteId)),this.attachments}async getAttachmentsByRole(t){return(await this.getAttachments()).filter((e=>e.role===t))}async getAttachmentById(t){return(await this.getAttachments()).find((e=>e.attachmentId===t))}isEligibleForConversionToAttachment(){if("image"!==this.type||!this.isContentAvailable()||this.hasChildren()||1!==this.getParentBranches().length)return!1;const t=this.getTargetRelations().filter((t=>"imageLink"===t.name));if(t.length>1)return!1;const e=this.getParentNotes()[0],n=t[0]?.getNote();return!(n&&n!==e||"text"!==e.type||!e.isContentAvailable())}getOwnedAttributes(t,e){const n=this.attributes.map((t=>this.froca.attributes[t])).filter(Boolean);return this.__filterAttrs(n,t,e)}getAttributes(t,e){return this.__filterAttrs(this.__getCachedAttributes([]),t,e)}__getCachedAttributes(t){if(t.includes(this.noteId))return[];if(!(this.noteId in o.Z.attributes)){const e=[...t,this.noteId],n=[this.getOwnedAttributes()];if("root"!==this.noteId&&"_hidden"!==this.noteId)for(const t of this.getParentNotes())"search"!==t.type&&n.push(t.__getInheritableAttributes(e));for(const t of n.flat().filter((t=>"relation"===t.type&&["template","inherit"].includes(t.name)))){const i=this.froca.notes[t.value];i&&i.noteId!==this.noteId&&n.push(i.__getCachedAttributes(e).filter((t=>!("label"===t.type&&("template"===t.name||"workspacetemplate"===t.name)))))}o.Z.attributes[this.noteId]=[];const i=new Set;for(const t of n.flat())i.has(t.attributeId)||(i.add(t.attributeId),o.Z.attributes[this.noteId].push(t))}return o.Z.attributes[this.noteId]}isRoot(){return"root"===this.noteId}getAllNotePaths(){if("root"===this.noteId)return[["root"]];const t=this.getParentNotes().filter((t=>"search"!==t.type)),e=1===t.length?t[0].getAllNotePaths():t.flatMap((t=>t.getAllNotePaths()));for(const t of e)t.push(this.noteId);return e}getSortedNotePathRecords(t="root"){const e="root"===t,n=this.getAllNotePaths().map((n=>({notePath:n,isInHoistedSubTree:e||n.includes(t),isArchived:n.some((t=>a.default.notes[t].isArchived)),isSearch:n.find((t=>"search"===a.default.notes[t].type)),isHidden:n.includes("_hidden")})));return n.sort(((t,e)=>t.isInHoistedSubTree!==e.isInHoistedSubTree?t.isInHoistedSubTree?-1:1:t.isArchived!==e.isArchived?t.isArchived?1:-1:t.isHidden!==e.isHidden?t.isHidden?1:-1:t.isSearch!==e.isSearch?t.isSearch?1:-1:t.notePath.length-e.notePath.length)),n}getBestNotePath(t="root"){return this.getSortedNotePathRecords(t)[0]?.notePath}getBestNotePathString(t="root"){const e=this.getBestNotePath(t);return e?.join("/")}isHiddenCompletely(){if("_hidden"===this.noteId)return!0;if("root"===this.noteId)return!1;for(const t of this.getParentNotes()){if("root"===t.noteId)return!1;if("_hidden"!==t.noteId&&"search"!==t.type&&!t.isHiddenCompletely())return!1}return!0}__filterAttrs(t,e,n){return this.__validateTypeName(e,n),e||n?e&&n?t.filter((t=>t.name===n&&t.type===e)):e?t.filter((t=>t.type===e)):n?t.filter((t=>t.name===n)):void 0:t}__getInheritableAttributes(t){return this.__getCachedAttributes(t).filter((t=>t.isInheritable))}__validateTypeName(t,e){if(t&&"label"!==t&&"relation"!==t)throw new Error(`Unrecognized attribute type '${t}'. Only 'label' and 'relation' are possible values.`);if(e){const t=e.charAt(0);if("#"===t||"~"===t)throw new Error("Detect '#' or '~' in the attribute's name. In the API, attribute names should be set without these characters.")}}getOwnedLabels(t){return this.getOwnedAttributes(c,t)}getLabels(t){return this.getAttributes(c,t)}getIcon(){const t=this.getLabels("iconClass"),e=this.getWorkspaceIconClass();return t.length>0?t[0].value:e||("root"===this.noteId?"bx bx-chevrons-right":"_share"===this.noteId?"bx bx-share-alt":"text"===this.type?this.isFolder()?"bx bx-folder":"bx bx-note":"code"===this.type&&this.mime.startsWith("text/x-sql")?"bx bx-data":p[this.type])}getColorClass(){const t=this.getLabelValue("color");return l(t)}isFolder(){return"search"===this.type||this.getFilteredChildBranches().length>0}getFilteredChildBranches(){let t=this.getChildBranches();if(t)return t;s.Z.logError(`No children for '${this.noteId}'. This shouldn't happen.`)}getOwnedRelations(t){return this.getOwnedAttributes(h,t)}getRelations(t){return this.getAttributes(h,t)}hasAttribute(t,e){return this.getAttributes().some((n=>n.name===e&&n.type===t))}hasOwnedAttribute(t,e){return!!this.getOwnedAttribute(t,e)}getOwnedAttribute(t,e){return this.getOwnedAttributes().find((n=>n.name===e&&n.type===t))}getAttribute(t,e){return this.getAttributes().find((n=>n.name===e&&n.type===t))}getOwnedAttributeValue(t,e){const n=this.getOwnedAttribute(t,e);return n?n.value:null}getAttributeValue(t,e){const n=this.getAttribute(t,e);return n?n.value:null}hasOwnedLabel(t){return this.hasOwnedAttribute(c,t)}hasLabel(t){return this.hasAttribute(c,t)}isLabelTruthy(t){const e=this.getLabel(t);return!!e&&e&&"false"!==e.value}hasOwnedRelation(t){return this.hasOwnedAttribute(h,t)}hasRelation(t){return this.hasAttribute(h,t)}getOwnedLabel(t){return this.getOwnedAttribute(c,t)}getLabel(t){return this.getAttribute(c,t)}getOwnedRelation(t){return this.getOwnedAttribute(h,t)}getRelation(t){return this.getAttribute(h,t)}getOwnedLabelValue(t){return this.getOwnedAttributeValue(c,t)}getLabelValue(t){return this.getAttributeValue(c,t)}getOwnedRelationValue(t){return this.getOwnedAttributeValue(h,t)}getRelationValue(t){return this.getAttributeValue(h,t)}async getRelationTarget(t){const e=await this.getRelationTargets(t);return e.length>0?e[0]:null}async getRelationTargets(t){const e=this.getRelations(t),n=[];for(const t of e)n.push(await this.froca.getNote(t.value));return n}getNotesToInheritAttributesFrom(){return[...this.getRelations("template"),...this.getRelations("inherit")].map((t=>this.froca.notes[t.value]))}getPromotedDefinitionAttributes(){if(this.isLabelTruthy("hidePromotedAttributes"))return[];const t=this.getAttributes().filter((t=>t.isDefinition())).filter((t=>{const e=t.getDefinition();return e&&e.isPromoted}));return t.sort(((t,e)=>t.noteId===e.noteId?t.position<e.position?-1:1:t.noteId<e.noteId?-1:1)),t}hasAncestor(t,e=!1,n=null){if(this.noteId===t)return!0;if(n){if(n.has(this.noteId))return!1}else n=new Set;if(n.add(this.noteId),e)for(const i of this.getNotesToInheritAttributesFrom())if(i.hasAncestor(t,e,n))return!0;for(const i of this.getParentNotes())if(i.hasAncestor(t,e,n))return!0;return!1}isInHiddenSubtree(){return"_hidden"===this.noteId||this.hasAncestor("_hidden")}invalidateAttributeCache(){}getTargetRelations(){return this.targetRelations.map((t=>this.froca.attributes[t]))}async getTargetRelationSourceNotes(){const t=this.getTargetRelations();return await this.froca.getNotes(t.map((t=>t.noteId)))}async getNoteComplement(){return this.getBlob()}async getBlob(){return await this.froca.getBlob("notes",this.noteId)}toString(){return`Note(noteId=${this.noteId}, title=${this.title})`}get dto(){const t=Object.assign({},this);return delete t.froca,t}getCssClass(){return this.getLabels("cssClass").map((t=>t.value)).join(" ")}getWorkspaceIconClass(){const t=this.getLabels("workspaceIconClass");return t.length>0?t[0].value:""}getWorkspaceTabBackgroundColor(){const t=this.getLabels("workspaceTabBackgroundColor");return t.length>0?t[0].value:""}isJavaScript(){return("code"===this.type||"file"===this.type||"launcher"===this.type)&&(this.mime.startsWith("application/javascript")||"application/x-javascript"===this.mime||"text/javascript"===this.mime)}isHtml(){return("code"===this.type||"file"===this.type||"render"===this.type)&&"text/html"===this.mime}getScriptEnv(){return this.isHtml()||this.isJavaScript()&&this.mime.endsWith("env=frontend")||"render"===this.type?"frontend":this.isJavaScript()&&this.mime.endsWith("env=backend")?"backend":null}async executeScript(){if(!this.isJavaScript())throw new Error(`Note ${this.noteId} is of type ${this.type} and mime ${this.mime} and thus cannot be executed`);const t=this.getScriptEnv();if("frontend"===t){const t=(await Promise.resolve().then(n.bind(n,394))).default;return await t.getAndExecuteBundle(this.noteId)}if("backend"!==t)throw new Error(`Unrecognized env type ${t} for note ${this.noteId}`);await i.Z.post(`script/run/${this.noteId}`)}isShared(){for(const t of this.parents){if("root"===t||"none"===t)continue;const e=a.default.notes[t];if(e&&"search"!==e.type&&("_share"===e.noteId||e.isShared()))return!0}return!1}isContentAvailable(){return!this.isProtected||r.Z.isProtectedSessionAvailable()}isLaunchBarConfig(){return"launcher"===this.type||["_lbRoot","_lbAvailableLaunchers","_lbVisibleLaunchers"].includes(this.noteId)}isOptions(){return this.noteId.startsWith("_options")}async getMetadata(){return await i.Z.get(`notes/${this.noteId}/metadata`)}}},1801:(t,e,n)=>{"use strict";n.d(e,{Z:()=>o});var i=n(6604);const o=new class{constructor(){this.$widget=$("#context-menu-container"),this.dateContextMenuOpenedMs=0,$(document).on("click",(()=>this.hide()))}async show(t){this.options=t,this.$widget.empty(),this.addItems(this.$widget,t.items),i.default.updateDisplayedShortcuts(this.$widget),this.positionMenu(),this.dateContextMenuOpenedMs=Date.now()}positionMenu(){const t=document.documentElement.clientHeight,e=document.documentElement.clientWidth,n=this.$widget.outerHeight(),i=this.$widget.outerWidth();let o,s;o=this.options.y+n-0>t-5?t-n-5:this.options.y-0<5?5:this.options.y-0,s="left"===this.options.orientation?this.options.x+0>e-5?e-i-0:this.options.x-i+0<5?5:this.options.x-i+0:this.options.x+i-0>e-5?e-i-5:this.options.x-0<5?5:this.options.x-0,this.$widget.css({display:"block",top:o,left:s}).addClass("show")}addItems(t,e){for(const n of e)if(n)if("----"===n.title)t.append($("<div>").addClass("dropdown-divider"));else{const e=$("<span>");n.uiIcon?e.addClass(n.uiIcon):e.append("&nbsp;");const i=$("<span>").append(e).append(" &nbsp; ").append(n.title),o=$("<li>").addClass("dropdown-item").append(i).on("contextmenu",(t=>!1)).on("mousedown",(t=>(t.stopPropagation(),1!==t.which||(this.hide(),n.handler&&n.handler(n,t),this.options.selectMenuItemHandler(n,t)),!1)));if(void 0===n.enabled||n.enabled||o.addClass("disabled"),n.items){o.addClass("dropdown-submenu"),i.addClass("dropdown-toggle");const t=$("<ul>").addClass("dropdown-menu");this.addItems(t,n.items),o.append(t)}t.append(o)}}hide(){Date.now()-this.dateContextMenuOpenedMs>300&&setTimeout((()=>this.$widget.hide()),100)}}},592:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var i=n(1801),o=n(2817);const s={openContextMenu:function(t,e,n={},s=null){i.Z.show({x:e.pageX,y:e.pageY,items:[{title:"在新标签页中打开笔记",command:"openNoteInNewTab",uiIcon:"bx bx-empty"},{title:"在新的拆分中打开笔记",command:"openNoteInNewSplit",uiIcon:"bx bx-dock-right"},{title:"在新窗口中打开笔记",command:"openNoteInNewWindow",uiIcon:"bx bx-window-open"}],selectMenuItemHandler:({command:e})=>{if(s||(s=o.default.tabManager.getActiveContext().hoistedNoteId),"openNoteInNewTab"===e)o.default.tabManager.openContextWithNote(t,{hoistedNoteId:s,viewScope:n});else if("openNoteInNewSplit"===e){const e=o.default.tabManager.getActiveContext().getSubContexts(),{ntxId:i}=e[e.length-1];o.default.triggerCommand("openNewNoteSplit",{ntxId:i,notePath:t,hoistedNoteId:s,viewScope:n})}else"openNoteInNewWindow"===e&&o.default.triggerCommand("openInWindow",{notePath:t,hoistedNoteId:s,viewScope:n})}})}}},1375:(t,e,n)=>{"use strict";n.d(e,{Z:()=>d});var i=n(4264),o=n(1412);async function s(t,e){const n=e&&t.isInheritable?"(可继承的)":"",s=$("<span>");if("label"===t.type)s.append(document.createTextNode(`#${t.name}${n}`)),t.value&&(s.append("="),s.append(document.createTextNode((a=t.value,/^[\p{L}\p{N}\-_,.]+$/u.test(a)?a:a.includes('"')?a.includes("'")?a.includes("`")?`"${a.replace(/"/g,'\\"')}"`:`\`${a}\``:`'${a}'`:`"${a}"`))));else if("relation"===t.type){if(t.isAutoLink)return s;t.value&&(s.append(document.createTextNode(`~${t.name}${n}=`)),s.append(await async function(t){const e=await o.default.getNote(t);if(e)return $("<a>",{href:`#root/${t}`,class:"reference-link"}).text(e.title)}(t.value)))}else i.Z.logError(`Unknown attr type: ${t.type}`);var a;return s}async function a(t,e){const n=$('<span class="rendered-note-attributes">');for(let i=0;i<t.length;i++){const o=t[i],a=await s(o,e);n.append(a.html()),i<t.length-1&&n.append(" ")}return n}const r=["originalFileName","fileSize","template","inherit","cssClass","iconClass","pageSize","viewType"],d={renderAttribute:s,renderAttributes:a,renderNormalAttributes:async function(t){const e=t.getPromotedDefinitionAttributes();let n=t.getAttributes();n=e.length>0?n.filter((t=>!!e.find((e=>e.isDefinitionFor(t))))):n.filter((e=>!e.isDefinition()&&!e.isAutoLink&&!r.includes(e.name)&&e.noteId===t.noteId));const i=await a(n,!1);return{count:n.length,$renderedAttributes:i}}}},8159:(t,e,n)=>{"use strict";n.d(e,{Z:()=>u});var i=n(9046),o=n(1736),s=n(6885),a=n(1412),r=n(3968),d=n(4264),l=n(2817);function c(t){return t.filter((t=>!t.startsWith("virt-")))}function h(t){const e=r.Z.getHoistedNoteId();return t.filter((t=>{const n=a.default.getBranch(t);return"root"!==n.noteId&&n.noteId!==e}))}function p(t,e){return{id:t,title:"删除状态",message:e,icon:"trash"}}d.Z.subscribeToMessages((async t=>{if("deleteNotes"===t.taskType)if("taskError"===t.type)s.default.closePersistent(t.taskId),s.default.showError(t.message);else if("taskProgressCount"===t.type)s.default.showPersistent(p(t.taskId,`Delete notes in progress: ${t.progressCount}`));else if("taskSucceeded"===t.type){const e=p(t.taskId,"删除成功.");e.closeAfter=5e3,s.default.showPersistent(e)}})),d.Z.subscribeToMessages((async t=>{if("undeleteNotes"===t.taskType)if("taskError"===t.type)s.default.closePersistent(t.taskId),s.default.showError(t.message);else if("taskProgressCount"===t.type)s.default.showPersistent(p(t.taskId,`Undeleting notes in progress: ${t.progressCount}`));else if("taskSucceeded"===t.type){const e=p(t.taskId,"撤销删除成功");e.closeAfter=5e3,s.default.showPersistent(e)}}));const u={moveBeforeBranch:async function(t,e){t=c(t=h(t));const n=a.default.getBranch(e);if(["root","_lbRoot","_lbAvailableLaunchers","_lbVisibleLaunchers"].includes(n.noteId))s.default.showError("无法在此移动笔记。");else for(const n of t){const t=await o.Z.put(`branches/${n}/move-before/${e}`);if(!t.success)return void s.default.showError(t.message)}},moveAfterBranch:async function(t,e){t=c(t=h(t));const n=a.default.getBranch(e).getNote();if(["root",r.Z.getHoistedNoteId(),"_lbRoot","_lbAvailableLaunchers","_lbVisibleLaunchers"].includes(n.noteId))s.default.showError("无法在此移动笔记。");else{t.reverse();for(const n of t){const t=await o.Z.put(`branches/${n}/move-after/${e}`);if(!t.success)return void s.default.showError(t.message)}}},moveToParentNote:async function(t,e){if("_lbRoot"!==a.default.getBranch(e).noteId){t=h(t);for(const n of t){const t=a.default.getBranch(n);if(t.noteId===r.Z.getHoistedNoteId()||"search"===(await t.getParentNote()).type)continue;const i=await o.Z.put(`branches/${n}/move-to/${e}`);if(!i.success)return void s.default.showError(i.message)}}else s.default.showError("无法在此移动笔记。")},deleteNotes:async function(t,e=!1){if(0===(t=h(t)).length)return!1;let n,s,r;if(i.default.isMobile()?(n=!0,s=!1):({proceed:n,deleteAllClones:s,eraseNotes:r}=await new Promise((n=>l.default.triggerCommand("showDeleteNotesDialog",{branchIdsToDelete:t,callback:n,forceDeleteAllClones:e})))),!n)return!1;const d=i.default.randomString(10);let c=0;for(const e of t){c++;const n=`?taskId=${d}&eraseNotes=${r?"true":"false"}&last=${c===t.length?"true":"false"}`,i=a.default.getBranch(e);s?await o.Z.remove(`notes/${i.noteId}${n}`):await o.Z.remove(`branches/${e}${n}`)}return r&&i.default.reloadFrontendApp("erasing notes requires reload"),!0},moveNodeUpInHierarchy:async function(t){if(r.Z.isHoistedNode(t)||r.Z.isTopLevelNode(t)||"search"===t.getParent().data.noteType)return;const e=t.getParent().data.branchId,n=t.data.branchId,i=await o.Z.put(`branches/${n}/move-after/${e}`);i.success?!r.Z.isTopLevelNode(t)&&t.getParent().getChildren().length<=1&&(t.getParent().folder=!1,t.getParent().renderTitle()):s.default.showError(i.message)},cloneNoteAfter:async function(t,e){const n=await o.Z.put(`notes/${t}/clone-after/${e}`);n.success||s.default.showError(n.message)},cloneNoteToBranch:async function(t,e,n){const i=await o.Z.put(`notes/${t}/clone-to-branch/${e}`,{prefix:n});i.success||s.default.showError(i.message)},cloneNoteToParentNote:async function(t,e,n){const i=await o.Z.put(`notes/${t}/clone-to-note/${e}`,{prefix:n});i.success||s.default.showError(i.message)}}},394:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>__WEBPACK_DEFAULT_EXPORT__});var _script_context_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(5574),_server_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1736),_toast_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(6885),_froca_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(1412),_utils_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(9046);async function getAndExecuteBundle(t,e=null,n=null,i=null){const o=await _server_js__WEBPACK_IMPORTED_MODULE_1__.Z.post(`script/bundle/${t}`,{script:n,params:i});return await executeBundle(o,e)}async function executeBundle(bundle,originEntity,$container){const apiContext=await(0,_script_context_js__WEBPACK_IMPORTED_MODULE_0__.Z)(bundle.noteId,bundle.allNoteIds,originEntity,$container);try{return await function(){return eval(`const apiContext = this; (async function() { ${bundle.script}\r\n})()`)}.call(apiContext)}catch(t){const e=await _froca_js__WEBPACK_IMPORTED_MODULE_3__.default.getNote(bundle.noteId);_toast_js__WEBPACK_IMPORTED_MODULE_2__.default.showAndLogError(`执行 ID 为 ${bundle.noteId} 的JS笔记"${e.title}"失败, 错误: ${t.message}`)}}async function executeStartupBundles(){const t=_utils_js__WEBPACK_IMPORTED_MODULE_4__.default.isMobile(),e=await _server_js__WEBPACK_IMPORTED_MODULE_1__.Z.get("script/startup"+(t?"?mobile=true":""));for(const t of e)await executeBundle(t)}class WidgetsByParent{constructor(){this.byParent={}}add(t){t.parentWidget?(this.byParent[t.parentWidget]=this.byParent[t.parentWidget]||[],this.byParent[t.parentWidget].push(t)):console.log("Custom widget does not have mandatory 'parentWidget' property defined")}get(t){return this.byParent[t]?this.byParent[t].map((t=>t.prototype?new t:t)):[]}}async function getWidgetBundlesByParent(){const t=await _server_js__WEBPACK_IMPORTED_MODULE_1__.Z.get("script/widgets"),e=new WidgetsByParent;for(const n of t){let t;try{t=await executeBundle(n),e.add(t)}catch(t){logError("小部件初始化失败: ",t);continue}}return e}const __WEBPACK_DEFAULT_EXPORT__={executeBundle,getAndExecuteBundle,executeStartupBundles,getWidgetBundlesByParent}},1035:(t,e,n)=>{"use strict";n.d(e,{Z:()=>h});var i=n(8159),o=n(6885),s=n(1412),a=n(7844),r=n(9046);let d=[],l=null;function c(){return d=d.filter((t=>!!s.default.getBranch(t))),0===d.length}const h={pasteAfter:async function(t){if(!c())if("cut"===l)await i.Z.moveAfterBranch(d,t),d=[],l=null;else if("copy"===l){const e=d.map((t=>s.default.getBranch(t)));for(const n of e){const e=await n.getNote();await i.Z.cloneNoteAfter(e.noteId,t)}}else o.default.throwError(`Unrecognized clipboard mode=${l}`)},pasteInto:async function(t){if(!c())if("cut"===l)await i.Z.moveToParentNote(d,t),d=[],l=null;else if("copy"===l){const e=d.map((t=>s.default.getBranch(t)));for(const n of e){const e=await n.getNote();await i.Z.cloneNoteToBranch(e.noteId,t)}}else o.default.throwError(`Unrecognized clipboard mode=${l}`)},cut:function(t){d=t,d.length>0&&(l="cut",o.default.showMessage("笔记已被剪切到剪贴板."))},copy:async function(t){if(d=t,l="copy",r.default.isElectron()){const{clipboard:t}=n(2298),e=[];for(const t of s.default.getBranches(d)){const n=await a.Z.createLink(`${t.parentNoteId}/${t.noteId}`,{referenceLink:!0});e.push(n[0].outerHTML)}t.writeHTML(e.join(", "))}o.default.showMessage("笔记已复制到剪贴板.")},isClipboardEmpty:c}},5913:(t,e,n)=>{"use strict";n.d(e,{Z:()=>m});var i=n(5437),o=n(7336),s=n(2040),a=n(6707),r=n(5489),d=n(1412),l=n(9046),c=n(7844),h=n(8481),p=n(2021),u=n(9763);let g=1;const m={getRenderedContent:async function(t,e={}){e=Object.assign({tooltip:!1},e);const n=function(t){let e=t.type||t.role;const n=t.mime;return"file"===e&&"application/pdf"===n?e="pdf":"file"===e&&n.startsWith("audio/")?e="audio":"file"===e&&n.startsWith("video/")&&(e="video"),t.isProtected&&(s.Z.isProtectedSessionAvailable()?s.Z.touchProtectedSession():e="protectedSession"),e}(t),m=$('<div class="rendered-content">');if("text"===n)await async function(t,e){const n=await t.getBlob();if(l.default.isHtmlEmpty(n.content))await async function(t,e){t.css("padding","10px"),t.addClass("text-with-ellipsis");let n=e.getChildNoteIds();n.length>10&&(n=n.slice(0,10));const i=await d.default.getNotes(n);for(const n of i)t.append(await c.Z.createLink(`${e.noteId}/${n.noteId}`,{showTooltip:!1,showNoteIcon:!0})),t.append("<br>")}(e,t);else{e.append($('<div class="ck-content">').html(n.content)),e.find("span.math-tex").length>0&&(await a.Z.requireLibrary(a.Z.KATEX),renderMathInElement(e[0],{trust:!0}));const t=t=>h.Z.getNoteIdFromUrl($(t).attr("href")),i=e.find("a.reference-link"),o=i.map((e=>t(e)));await d.default.getNotes(o);for(const t of i)await c.Z.loadReferenceLinkTitle($(t))}}(t,m);else if("code"===n)await async function(t,e){const n=await t.getBlob();e.append($("<pre>").text(n.content))}(t,m);else if("image"===n||"canvas"===n)!function(t,e,n={}){const i=encodeURIComponent(t.title);let o;t instanceof p.Z?o=`api/images/${t.noteId}/${i}?${Math.random()}`:t instanceof u.Z&&(o=`api/attachments/${t.attachmentId}/image/${i}?${t.utcDateModified}">`),e.css("display","flex").css("align-items","center").css("justify-content","center");const s=$("<img>").attr("src",o).attr("id","attachment-image-"+g++).css("max-width","100%");e.append(s),n.imageHasZoom&&a.Z.requireLibrary(a.Z.WHEEL_ZOOM).then((()=>{WZoom.create(`#${s.attr("id")}`,{maxScale:50,speed:1.3,zoomOnClick:!1})}))}(t,m,e);else if(!e.tooltip&&["file","pdf","audio","video"].includes(n))!function(t,e,n){let i,o;if(t instanceof p.Z)i="notes",o=t.noteId;else{if(!(t instanceof u.Z))throw new Error(`Can't recognize entity type of '${t}'`);i="attachments",o=t.attachmentId}const s=$('<div style="display: flex; flex-direction: column; height: 100%;">');if("pdf"===e){const t=$('<iframe class="pdf-preview" style="width: 100%; flex-grow: 100;"></iframe>');t.attr("src",r.Z.getUrlForDownload(`api/${i}/${o}/open`)),s.append(t)}else if("audio"===e){const e=$("<audio controls></audio>").attr("src",r.Z.getUrlForDownload(`api/${i}/${o}/open-partial`)).attr("type",t.mime).css("width","100%");s.append(e)}else if("video"===e){const e=$("<video controls></video>").attr("src",r.Z.getUrlForDownload(`api/${i}/${o}/open-partial`)).attr("type",t.mime).css("width","100%");s.append(e)}if("notes"===i){const e=$('<button class="file-download btn btn-primary" type="button">下载</button>'),n=$('<button class="file-open btn btn-primary" type="button">打开</button>');e.on("click",(()=>r.Z.downloadFileNote(t.noteId))),n.on("click",(()=>r.Z.openNoteExternally(t.noteId,t.mime))),n.toggle(!t.isProtected),s.append($('<div style="display: flex; justify-content: space-evenly; margin-top: 5px;">').append(e).append(n))}n.append(s)}(t,n,m);else if("mermaid"===n)await async function(t,e){await a.Z.requireLibrary(a.Z.MERMAID);const n=(await t.getBlob()).content||"";e.css("display","flex").css("justify-content","space-around");const i=window.getComputedStyle(document.documentElement).getPropertyValue("--mermaid-theme");mermaid.mermaidAPI.initialize({startOnLoad:!1,theme:i.trim(),securityLevel:"antiscript"});try{const{svg:t}=await mermaid.mermaidAPI.render("in-mermaid-graph-"+g++,n);e.append($(t))}catch(t){const n=$("<p>图表无法显示.</p>");e.append(n)}}(t,m);else if("render"===n){const e=$("<div>");await i.Z.render(t,e,this.ctx),m.append(e)}else if(e.tooltip||"protectedSession"!==n)t instanceof p.Z&&m.append($("<div>").css("display","flex").css("justify-content","space-around").css("align-items","center").css("height","100%").css("font-size","500%").append($("<span>").addClass(t.getIcon())));else{const t=$('<button class="btn btn-sm"><span class="bx bx-log-in"></span>进入受保护的会话</button>').on("click",o.Z.enterProtectedSession);m.append($("<div>").append("<div>此笔记受保护, 您需要输入密码来访问它.</div>").append("<br/>").append(t))}return t instanceof p.Z&&m.addClass(t.getCssClass()),{$renderedContent:m,type:n}}}},383:(t,e,n)=>{"use strict";n.d(e,{Z:()=>r});var i=n(1412),o=n(1736),s=n(4264);async function a(t){const e=await o.Z.get(`special-notes/days/${t}`,"date-note");return await s.Z.waitForMaxKnownEntityChangeId(),await i.default.getNote(e.noteId)}const r={getInboxNote:async function(){const t=await o.Z.get(`special-notes/inbox/${dayjs().format("YYYY-MM-DD")}`,"date-note");return await i.default.getNote(t.noteId)},getTodayNote:async function(){return await a(dayjs().format("YYYY-MM-DD"))},getDayNote:a,getWeekNote:async function(t){const e=await o.Z.get(`special-notes/weeks/${t}`,"date-note");return await s.Z.waitForMaxKnownEntityChangeId(),await i.default.getNote(e.noteId)},getMonthNote:async function(t){const e=await o.Z.get(`special-notes/months/${t}`,"date-note");return await s.Z.waitForMaxKnownEntityChangeId(),await i.default.getNote(e.noteId)},getYearNote:async function(t){const e=await o.Z.get(`special-notes/years/${t}`,"date-note");return await s.Z.waitForMaxKnownEntityChangeId(),await i.default.getNote(e.noteId)},createSqlConsole:async function(){const t=await o.Z.post("special-notes/sql-console");return await s.Z.waitForMaxKnownEntityChangeId(),await i.default.getNote(t.noteId)},createSearchNote:async function(t={}){const e=await o.Z.post("special-notes/search-note",t);return await s.Z.waitForMaxKnownEntityChangeId(),await i.default.getNote(e.noteId)}}},3152:(t,e,n)=>{"use strict";n.d(e,{Z:()=>o});var i=n(2817);const o={info:async function(t){return new Promise((e=>i.default.triggerCommand("showInfoDialog",{message:t,callback:e})))},confirm:async function(t){return new Promise((e=>i.default.triggerCommand("showConfirmDialog",{message:t,callback:t=>e(t.confirmed)})))},confirmDeleteNoteBoxWithNote:async function(t){return new Promise((e=>i.default.triggerCommand("showConfirmDeleteNoteBoxWithNoteDialog",{title:t,callback:e})))},prompt:async function(t){return new Promise((e=>i.default.triggerCommand("showPromptDialog",{...t,callback:e})))}}},1412:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>h});var i=n(8726),o=n(2021),s=n(9673),a=n(1736),r=n(2817);class d{constructor(t){this.blobId=t.blobId,this.content=t.content,this.contentLength=t.contentLength,this.dateModified=t.dateModified,this.utcDateModified=t.utcDateModified}getJsonContent(){return this.content&&this.content.trim()?JSON.parse(this.content):null}getJsonContentSafely(){try{return this.getJsonContent()}catch(t){return null}}}var l=n(9763);const c=new class{constructor(){this.initializedPromise=this.loadInitialTree()}async loadInitialTree(){const t=await a.Z.get("tree");this.notes={},this.branches={},this.attributes={},this.attachments={},this.blobPromises={},this.addResp(t)}async loadSubTree(t){const e=await a.Z.get(`tree?subTreeNoteId=${t}`);return this.addResp(e),this.notes[t]}addResp(t){const e=t.notes,n=t.branches,a=t.attributes,r=new Set;for(const t of e){const{noteId:e}=t;let n=this.notes[e];if(n){if(n.update(t),"search"!==n.type){for(const t of n.children){const n=this.notes[t];n&&(n.parents=n.parents.filter((t=>t!==e)),delete this.branches[n.parentToBranch[e]],delete n.parentToBranch[e])}n.children=[],n.childToBranch={}}n.parents=n.parents.filter((t=>{const n=this.notes[t],i=this.branches[n.childToBranch[e]];return!(!n||!i||!i.fromSearchNote&&(n.children=n.children.filter((t=>t!==e)),delete this.branches[n.childToBranch[e]],delete n.childToBranch[e],1))}))}else this.notes[e]=new o.Z(this,t)}for(const t of n){const e=new i.Z(this,t);this.branches[e.branchId]=e;const n=this.notes[e.noteId];n&&n.addParent(e.parentNoteId,e.branchId,!1);const o=this.notes[e.parentNoteId];o&&(o.addChild(e.noteId,e.branchId,!1),r.add(o.noteId))}for(const t of a){const{attributeId:e}=t;this.attributes[e]=new s.Z(this,t);const n=this.notes[t.noteId];if(n&&!n.attributes.includes(e)&&n.attributes.push(e),"relation"===t.type){const n=this.notes[t.value];n&&(n.targetRelations.includes(e)||n.targetRelations.push(e))}}for(const t of r)this.notes[t].sortChildren(),this.notes[t].sortParents()}async reloadNotes(t){if(0===t.length)return;t=Array.from(new Set(t));const e=await a.Z.post("tree/load",{noteIds:t});this.addResp(e),r.default.triggerEvent("notesReloaded",{noteIds:t})}async loadSearchNote(t){const e=await this.getNote(t);if(!e||"search"!==e.type)return;const{searchResultNoteIds:n,highlightedTokens:i,error:o}=await a.Z.get(`search-note/${e.noteId}`);if(!Array.isArray(n))throw new Error(`Search note '${e.noteId}' failed: ${n}`);e.noteId in c.notes&&(c.notes[e.noteId].children=[],c.notes[e.noteId].childToBranch={});const s=[...e.getParentBranches(),...e.getChildBranches()];return n.forEach(((t,n)=>s.push({branchId:`virt-${e.noteId}-${t}`,noteId:t,parentNoteId:e.noteId,notePosition:10*(n+1),fromSearchNote:!0}))),this.addResp({notes:[e],branches:s,attributes:[]}),c.notes[e.noteId].searchResultsLoaded=!0,c.notes[e.noteId].highlightedTokens=i,{error:o}}getNotesFromCache(t,e=!1){return t.map((t=>this.notes[t]||e?this.notes[t]:(console.trace(`Can't find note '${t}'`),null))).filter((t=>!!t))}async getNotes(t,e=!1){const n=(t=Array.from(new Set(t))).filter((t=>!this.notes[t]));return await this.reloadNotes(n),t.map((t=>this.notes[t]||e?this.notes[t]:(console.trace(`Can't find note '${t}'`),null))).filter((t=>!!t))}async noteExists(t){return 1===(await this.getNotes([t],!0)).length}async getNote(t,e=!1){return"none"===t?(console.trace("No 'none' note."),null):t?(await this.getNotes([t],e))[0]:(console.trace(`Falsy noteId '${t}', returning null.`),null)}getNoteFromCache(t){if(!t)throw new Error("空 noteId");return this.notes[t]}getBranches(t,e=!1){return t.map((t=>this.getBranch(t,e))).filter((t=>!!t))}getBranch(t,e=!1){if(t in this.branches)return this.branches[t];e||logError(`Not existing branch '${t}'`)}async getBranchId(t,e){if("root"===e)return"none_root";const n=await this.getNote(e);return n?n.parentToBranch[t]:(logError(`Could not find branchId for parent '${t}', child '${e}' since child does not exist`),null)}async getAttachment(t,e=!1){const n=this.attachments[t];if(n)return n;let i;try{i=await a.Z.getWithSilentNotFound(`attachments/${t}/all`)}catch(n){if(e)return logInfo(`Attachment '${t}' not found, but silentNotFoundError is enabled: `+n.message),null;throw n}const o=this.processAttachmentRows(i);return o.length&&(o[0].getNote().attachments=o),this.attachments[t]}async getAttachmentsForNote(t){const e=await a.Z.get(`notes/${t}/attachments`);return this.processAttachmentRows(e)}processAttachmentRows(t){return t.map((t=>{let e;return t.attachmentId in this.attachments?(e=this.attachments[t.attachmentId],e.update(t)):(e=new l.Z(this,t),this.attachments[e.attachmentId]=e),e}))}async getBlob(t,e){const n=`${t}-${e}`;return this.blobPromises[n]||(this.blobPromises[n]=a.Z.get(`${t}/${e}/blob`).then((t=>new d(t))).catch((n=>console.error(`Cannot get blob for ${t} '${e}'`,n))),this.blobPromises[n].then((()=>setTimeout((()=>this.blobPromises[n]=null),1e3)))),await this.blobPromises[n]}},h=c},3968:(t,e,n)=>{"use strict";n.d(e,{Z:()=>c});var i=n(2817),o=n(8481),s=n(3152),a=n(1412);function r(){const t=i.default.tabManager.getActiveContext();return t?t.hoistedNoteId:"root"}async function d(){const t=i.default.tabManager.getActiveContext();t&&await t.unhoist()}function l(t){return"root"===t.data.noteId||t.data.noteId===r()}const c={getHoistedNoteId:r,unhoist:d,isTopLevelNode:function(t){return l(t.getParent())},isHoistedNode:l,checkNoteAccess:async function(t,e){const n=await o.Z.resolveNotePath(t,e.hoistedNoteId);if(!n)return console.log(`Cannot activate '${t}'`),!1;const i=e.hoistedNoteId;if(!n.includes(i)&&!n.includes("_hidden")){const t=await a.default.getNote(o.Z.getNoteIdFromUrl(n)),e=await a.default.getNote(i);if(!e.hasAncestor("_hidden")&&!await s.Z.confirm(`Requested note '${t.title}' is outside of hoisted note '${e.title}' subtree and you must unhoist to access the note. Do you want to proceed with unhoisting?`))return!1;await d()}return!0},isHoistedInHiddenSubtree:async function(){const t=r();return"root"!==t&&(await a.default.getNote(t)).isHiddenCompletely()}}},1274:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>c,uploadFiles:()=>d});var i=n(6885),o=n(1736),s=n(4264),a=n(9046),r=n(2817);async function d(t,e,n,s){if(!["notes","attachments"].includes(t))throw new Error(`Unrecognized import entity type '${t}'.`);if(0===n.length)return;const r=a.default.randomString(10);let d=0;for(const a of n){d++;const l=new FormData;l.append("upload",a),l.append("taskId",r),l.append("last",d===n.length?"true":"false");for(const t in s)l.append(t,s[t]);await $.ajax({url:`${window.glob.baseApiUrl}notes/${e}/${t}-import`,headers:await o.Z.getHeaders(),data:l,dataType:"json",type:"POST",timeout:36e5,error:function(t){i.default.showError(`Import failed: ${t.responseText}`)},contentType:!1,processData:!1})}}function l(t,e){return{id:t,title:"导入状态",message:e,icon:"plus"}}s.Z.subscribeToMessages((async t=>{if("importNotes"===t.taskType)if("taskError"===t.type)i.default.closePersistent(t.taskId),i.default.showError(t.message);else if("taskProgressCount"===t.type)i.default.showPersistent(l(t.taskId,`Import in progress: ${t.progressCount}`));else if("taskSucceeded"===t.type){const e=l(t.taskId,"导入成功.");e.closeAfter=5e3,i.default.showPersistent(e),t.result.importedNoteId&&await r.default.tabManager.getActiveContext().setNote(t.result.importedNoteId)}})),s.Z.subscribeToMessages((async t=>{if("importAttachments"===t.taskType)if("taskError"===t.type)i.default.closePersistent(t.taskId),i.default.showError(t.message);else if("taskProgressCount"===t.type)i.default.showPersistent(l(t.taskId,`Import in progress: ${t.progressCount}`));else if("taskSucceeded"===t.type){const e=l(t.taskId,"导入成功.");e.closeAfter=5e3,i.default.showPersistent(e),t.result.parentNoteId&&await r.default.tabManager.getActiveContext().setNote(t.result.importedNoteId,{viewScope:{viewMode:"attachments"}})}}));const c={uploadFiles:d}},6604:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>c});var i=n(1736),o=n(2817),s=n(1065);const a={},r=i.Z.get("keyboard-actions").then((t=>{t=t.filter((t=>!!t.actionName));for(const e of t)e.effectiveShortcuts=e.effectiveShortcuts.filter((t=>!t.startsWith("global:"))),a[e.actionName]=e;return t}));async function d(t){return(await r).filter((e=>e.scope===t))}async function l(t,e=!1){await r;const n=a[t];if(!n){if(!e)throw new Error(`Cannot find action '${t}'`);console.debug(`Cannot find action '${t}'`)}return n}d("window").then((t=>{for(const e of t)for(const t of e.effectiveShortcuts)s.Z.bindGlobalShortcut(t,(()=>o.default.triggerCommand(e.actionName,{ntxId:o.default.tabManager.activeNtxId})))}));const c={updateDisplayedShortcuts:function(t){t.find("kbd[data-command]").each((async(t,e)=>{const n=$(e).attr("data-command"),i=await l(n,!0);if(i){const t=i.effectiveShortcuts.join(", ");(t||"not set"!==$(e).text())&&$(e).text(t)}})),t.find("[data-trigger-command]").each((async(t,e)=>{const n=$(e).attr("data-trigger-command"),i=await l(n,!0);if(i){const t=$(e).attr("title"),n=i.effectiveShortcuts.join(", ");if(t?.includes(n))return;const o=t?.trim()?`${t} (${n})`:n;$(e).attr("title",o)}}))},setupActionsForElement:async function(t,e,n){const i=await d(t);for(const t of i)for(const i of t.effectiveShortcuts)s.Z.bindElShortcut(e,i,(()=>n.triggerCommand(t.actionName,{ntxId:o.default.tabManager.activeNtxId})))},getActions:async function(){return await r},getActionsForScope:d}},6707:(t,e,n)=>{"use strict";n.d(e,{Z:()=>a});const i={};async function o(t){t=`${window.glob.assetPath}/${t}`,i[t]||(i[t]=$.ajax({url:t,dataType:"script",cache:!0})),await i[t]}async function s(t,e=!0){Array.from(document.querySelectorAll("link")).map((t=>t.href)).some((e=>e.endsWith(t)))||(e&&(t=`${window.glob.assetPath}/${t}`),$("head").append($('<link rel="stylesheet" type="text/css" />').attr("href",t)))}const a={requireCss:s,requireLibrary:async function(t){if(t.css&&t.css.map((t=>s(t))),t.js)for(const e of t.js)await o(e)},CKEDITOR:{js:["libraries/ckeditor/ckeditor.js"]},CODE_MIRROR:{js:["libraries/codemirror/codemirror.js","libraries/codemirror/addon/display/placeholder.js","libraries/codemirror/addon/edit/matchbrackets.js","libraries/codemirror/addon/edit/matchtags.js","libraries/codemirror/addon/fold/xml-fold.js","libraries/codemirror/addon/lint/lint.js","libraries/codemirror/addon/lint/eslint.js","libraries/codemirror/addon/mode/loadmode.js","libraries/codemirror/addon/mode/multiplex.js","libraries/codemirror/addon/mode/overlay.js","libraries/codemirror/addon/mode/simple.js","libraries/codemirror/addon/search/match-highlighter.js","libraries/codemirror/mode/meta.js","libraries/codemirror/keymap/vim.js"],css:["libraries/codemirror/codemirror.css","libraries/codemirror/addon/lint/lint.css"]},ESLINT:{js:["libraries/eslint.js"]},RELATION_MAP:{js:["libraries/jsplumb.js","libraries/panzoom.js"],css:["stylesheets/relation_map.css"]},PRINT_THIS:{js:["libraries/printThis.js"]},CALENDAR_WIDGET:{css:["stylesheets/calendar.css"]},KATEX:{js:["node_modules/katex/dist/katex.min.js","node_modules/katex/dist/contrib/mhchem.min.js","node_modules/katex/dist/contrib/auto-render.min.js"],css:["node_modules/katex/dist/katex.min.css"]},WHEEL_ZOOM:{js:["libraries/wheel-zoom.min.js"]},FORCE_GRAPH:{js:["libraries/force-graph.min.js"]},MERMAID:{js:["libraries/mermaid.min.js"]},EXCALIDRAW:{js:["node_modules/react/umd/react.production.min.js","node_modules/react-dom/umd/react-dom.production.min.js","node_modules/@excalidraw/excalidraw/dist/excalidraw.production.min.js"]},MARKJS:{js:["libraries/jquery.mark.es6.min.js"]}}},7844:(t,e,n)=>{"use strict";n.d(e,{Z:()=>g});var i=n(8481),o=n(592),s=n(2817),a=n(1412),r=n(9046);async function d(t,e){let n;return"default"===e?n=(await a.default.getNote(t)).getIcon():"source"===e?n="bx bx-code-curly":"attachments"===e&&(n="bx bx-file"),n}function l({notePath:t,ntxId:e,hoistedNoteId:n,viewScope:i={}}){t=t||"";const o=[e?{ntxId:e}:null,n&&"root"!==n?{hoistedNoteId:n}:null,i.viewMode&&"default"!==i.viewMode?{viewMode:i.viewMode}:null,i.attachmentId?{attachmentId:i.attachmentId}:null].filter((t=>!!t)).map((t=>{const e=Object.keys(t)[0],n=t[e];return`${encodeURIComponent(e)}=${encodeURIComponent(n)}`})).join("&");if(!t&&!o)return"";let s=`#${t}`;return o&&(s+=`?${o}`),s}function c(t){if(!t)return{};const e=t.indexOf("#");if(-1===e)return{};const n=t.substr(e+1),[o,s]=n.split("?");if(!o.match(/^[_a-z0-9]{4,}(\/[_a-z0-9]{4,})*$/i))return{};const a={viewMode:"default"};let r=null,d=null,l=null;if(s)for(const t of s.split("&")){let[e,n]=t.split("=");e=decodeURIComponent(e),n=decodeURIComponent(n),"ntxId"===e?r=n:"hoistedNoteId"===e?d=n:"searchString"===e?l=n:["viewMode","attachmentId"].includes(e)?a[e]=n:console.warn(`Unrecognized hash parameter '${e}'.`)}return{notePath:o,noteId:i.Z.getNoteIdFromUrl(o),ntxId:r,hoistedNoteId:d,viewScope:a,searchString:l}}function h(t){const e=$(t.target).closest("a,.block-link");return p(t,e.attr("href")||e.attr("data-href"),e)}function p(t,e,n){if(e?.startsWith("data:"))return!0;t.preventDefault(),t.stopPropagation();const{notePath:i,viewScope:o}=c(e),a=r.default.isCtrlKey(t),d=1===t.which,l=2===t.which,h=d&&a||l,p=1===t.which,u=2===t.which;if(i){if(h)s.default.tabManager.openTabWithNoteWithHoisting(i,{viewScope:o});else if(d){const e=$(t.target).closest("[data-ntx-id]").attr("data-ntx-id"),n=e?s.default.tabManager.getNoteContextById(e):s.default.tabManager.getActiveContext();n.setNote(i,{viewScope:o}).then((()=>{n!==s.default.tabManager.getActiveContext()&&s.default.tabManager.activateNoteContext(n.ntxId)}))}}else if(e){const t=n?.hasClass("ck-link-actions__preview"),i=!n||0===n.closest("[contenteditable]").length;(h||t&&(p||u)||i&&(p||u))&&(e.toLowerCase().startsWith("http")||e.startsWith("api/")?window.open(e,"_blank"):e.toLowerCase().startsWith("file:")&&r.default.isElectron()&&r.default.dynamicRequire("electron").shell.openPath(e))}return!0}async function u(t){const{noteId:e,viewScope:n}=c(t);if(!e)return"[missing note]";const i=await a.default.getNote(e);if(!i)return"[missing note]";if("attachments"===n?.viewMode&&n?.attachmentId){const t=await i.getAttachmentById(n.attachmentId);return t?t.title:"[missing attachment]"}return i.title}$(document).on("click","a",h),$(document).on("auxclick","a",h),$(document).on("contextmenu","a",(function(t){const e=$(t.target).closest("a"),n=e.attr("href")||e.attr("data-href"),{notePath:i,viewScope:s}=c(n);i&&(t.preventDefault(),o.Z.openContextMenu(i,t,s,null))})),$(document).on("dblclick","a",(t=>{t.preventDefault(),t.stopPropagation();const e=$(t.target).closest("a").attr("href");e&&e.startsWith("http")&&window.open(e,"_blank")})),$(document).on("mousedown","a",(t=>{if(2===t.which)return t.preventDefault(),!1}));const g={getNotePathFromUrl:function(t){const e=/#(root[A-Za-z0-9_/]*)$/.exec(t);return null===e?null:e[1]},createLink:async function(t,e={}){if(!t||!t.trim())return logError("缺少笔记路径"),$("<span>").text("[missing note]");t.startsWith("root")||(t=`root/${t}`);const n=void 0===e.showTooltip||e.showTooltip,o=void 0!==e.showNotePath&&e.showNotePath,s=void 0!==e.showNoteIcon&&e.showNoteIcon,r=void 0!==e.referenceLink&&e.referenceLink,c=void 0!==e.autoConvertToImage&&e.autoConvertToImage,{noteId:h,parentNoteId:p}=i.Z.getNoteIdAndParentIdFromUrl(t),u=e.viewScope||{},g=u.viewMode||"default";let m=e.title;if(!m)if("attachments"===g&&u.attachmentId){const t=await a.default.getAttachment(u.attachmentId);m=t?t.title:"[missing attachment]"}else m=await i.Z.getNoteTitle(h,p);const b=await a.default.getNote(h);if(c&&["image","canvas","mermaid"].includes(b.type)&&"default"===g){const t=encodeURIComponent(m);return $("<img>").attr("src",`api/images/${h}/${t}?${Math.random()}`).attr("alt",m)}const f=$("<span>");if(s){let t=await d(h,g);t&&f.append($("<span>").addClass(`bx ${t}`)).append(" ")}const w=l({notePath:t,viewScope:u}),v=$("<a>",{href:w,text:m});if(n||v.addClass("no-tooltip-preview"),r&&v.addClass("reference-link"),f.append(v),o){const e=await i.Z.resolveNotePathToSegments(t);if(e){e.pop();const t=e.join("/").trim();t&&f.append($("<small>").text(` (${await i.Z.getNotePathTitle(t)})`))}}return f},goToLink:h,goToLinkExt:p,loadReferenceLinkTitle:async function(t,e=null){const n="A"===t[0].tagName?t:t.find("a");if(!(e=e||n.attr("href")))return void console.warn("Empty URL for parsing: "+t[0].outerHTML);const{noteId:i,viewScope:o}=c(e),s=await a.default.getNote(i,!0);s&&t.addClass(s.getColorClass());const r=await u(e);if(t.text(r),s){const e=await d(i,o.viewMode);t.prepend($("<span>").addClass(e))}},getReferenceLinkTitle:u,getReferenceLinkTitleSync:function(t){const{noteId:e,viewScope:n}=c(t);if(!e)return"[missing note]";const i=a.default.getNoteFromCache(e);if(!i)return"[missing note]";if("attachments"===n?.viewMode&&n?.attachmentId){if(!i.attachments)return"[loading title...]";const t=i.attachments.find((t=>t.attachmentId===n.attachmentId));return t?t.title:"[missing attachment]"}return i.title},calculateHash:l,parseNavigationStateFromUrl:c}},4585:(t,e,n)=>{"use strict";n.d(e,{Z:()=>i});const i=new class{constructor(){this.attributes={}}invalidate(){this.attributes={}}}},8181:(t,e,n)=>{"use strict";n.d(e,{Z:()=>p});var i=n(2817),o=n(2040),s=n(1736),a=n(4264),r=n(1412),d=n(8481),l=n(6885);async function c(t,e={}){(e=Object.assign({activate:!0,focus:"title",target:"into"},e)).isProtected&&o.Z.isProtectedSessionAvailable()||(e.isProtected=!1),"text"!==i.default.tabManager.getActiveContextNoteType()&&(e.saveSelection=!1),e.saveSelection&&([e.title,e.content]=function(t){const e=$.parseHTML(t);return e.length>0&&e[0].tagName&&e[0].tagName.match(/h[1-6]/i)?[$(e[0]).text(),t.replace(e[0].outerHTML,"")]:[null,t]}(e.textEditor.getSelectedHtml()));const n=d.Z.getNoteIdFromUrl(t);"mermaid"!==e.type||e.content||(e.content="graph TD;\n    A--\x3eB;\n    A--\x3eC;\n    B--\x3eD;\n    C--\x3eD;");const{note:l,branch:c}=await s.Z.post(`notes/${n}/children?target=${e.target}&targetBranchId=${e.targetBranchId||""}`,{title:e.title,content:e.content||"",isProtected:e.isProtected,type:e.type,mime:e.mime,templateNoteId:e.templateNoteId});if(e.saveSelection&&e.textEditor.removeSelection(),await a.Z.waitForMaxKnownEntityChangeId(),e.activate){const n=i.default.tabManager.getActiveContext();await n.setNote(`${t}/${l.noteId}`),"title"===e.focus?i.default.triggerEvent("focusAndSelectTitle",{isNewNote:!0}):"content"===e.focus&&i.default.triggerEvent("focusOnDetail",{ntxId:n.ntxId})}return{note:await r.default.getNote(l.noteId),branch:r.default.getBranch(c.branchId)}}async function h(){return new Promise((t=>{i.default.triggerCommand("chooseNoteType",{callback:t})}))}const p={createNote:c,createNoteWithTypePrompt:async function(t,e={}){const{success:n,noteType:i,templateNoteId:o}=await h();if(n)return e.type=i,e.templateNoteId=o,await c(t,e)},duplicateSubtree:async function(t,e){const n=d.Z.getNoteIdFromUrl(e),{note:o}=await s.Z.post(`notes/${t}/duplicate/${n}`);await a.Z.waitForMaxKnownEntityChangeId(),i.default.tabManager.getActiveContext().setNote(`${e}/${o.noteId}`);const c=await r.default.getNote(t);l.default.showMessage(`笔记 "${c.title}" 已被复制`)},chooseNoteType:h}},4716:(t,e,n)=>{"use strict";n.d(e,{Z:()=>p});var i=n(8481),o=n(7844),s=n(1412),a=n(9046),r=n(1375),d=n(5913),l=n(2817);async function c(){const t=$(this);if(t.hasClass("no-tooltip-preview")||t.hasClass("disabled"))return;if(t.closest(".ck-link-actions").length)return;if(t.closest(".note-tooltip").length)return;const e=t.attr("href")||t.attr("data-href"),{notePath:n,noteId:i,viewScope:r}=o.Z.parseNavigationStateFromUrl(e);if(!n||"default"!==r.viewMode)return;const d=t.attr("data-link-id")||`link-${Math.floor(1e6*Math.random())}`;if(t.attr("data-link-id",d),$(`.${d}`).is(":visible"))return;const l=await s.default.getNote(i),[c]=await Promise.all([h(l),new Promise((t=>setTimeout(t,500)))]);if(a.default.isHtmlEmpty(c))return;const p=`<div class="note-tooltip-content">${c}</div>`,u="tooltip-"+Math.floor(999999999*Math.random());if($(this).filter(":hover").length>0){$(this).tooltip({container:"body",placement:"bottom",trigger:"manual",boundary:"window",title:p,html:!0,template:`<div class="tooltip note-tooltip ${u}" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>`,sanitize:!1,customClass:d}),$(this).tooltip("show");const t=()=>{$(`.${u}`).is(":visible")?$(this).filter(":hover").length||$(`.${d}:hover`).length?setTimeout(t,1e3):$(this).tooltip("dispose"):console.log("Not visible anymore")};setTimeout(t,1e3)}}async function h(t){if(!t)return"<div>笔记已被删除.</div>";const e=l.default.tabManager.getActiveContext()?.hoistedNoteId,n=t.getBestNotePathString(e);if(!n)return;let o=`<h5 class="note-tooltip-title">${(await i.Z.getNoteTitleWithPathAsSuffix(n)).prop("outerHTML")}</h5>`;const{$renderedAttributes:s}=await r.Z.renderNormalAttributes(t),{$renderedContent:a}=await d.Z.getRenderedContent(t,{tooltip:!0,trim:!0});return o=`${o}<div class="note-tooltip-attributes">${s[0].outerHTML}</div>${a[0].outerHTML}`,o}const p={setupGlobalTooltip:function(){$(document).on("mouseenter","a",c),$(document).on("click",(t=>{$(t.target).closest(".note-tooltip").length||$(".note-tooltip").remove()}))},setupElementTooltip:function(t){t.on("mouseenter",c)}}},4733:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var i=n(1736),o=n(1412);const s={getNoteTypeItems:async function(t){const e=[{title:"文本",command:t,type:"text",uiIcon:"bx bx-note"},{title:"代码",command:t,type:"code",uiIcon:"bx bx-code"},{title:"保存的搜索",command:t,type:"search",uiIcon:"bx bx-file-find"},{title:"关系图",command:t,type:"relationMap",uiIcon:"bx bx-map-alt"},{title:"笔记地图",command:t,type:"noteMap",uiIcon:"bx bx-map-alt"},{title:"渲染笔记",command:t,type:"render",uiIcon:"bx bx-extension"},{title:"书",command:t,type:"book",uiIcon:"bx bx-book"},{title:"美人鱼图",command:t,type:"mermaid",uiIcon:"bx bx-selection"},{title:"画布",command:t,type:"canvas",uiIcon:"bx bx-pen"},{title:"网页视图",command:t,type:"webView",uiIcon:"bx bx-globe-alt"}],n=await i.Z.get("search-templates"),s=await o.default.getNotes(n);if(s.length>0){e.push({title:"----"});for(const n of s)e.push({title:n.title,uiIcon:n.getIcon(),command:t,type:n.type,templateNoteId:n.noteId})}return e}}},5489:(t,e,n)=>{"use strict";n.d(e,{Z:()=>h});var i=n(9046),o=n(1736);function s(t){if("notes"!==t&&"attachments"!==t)throw new Error(`Unrecognized type '${t}', should be 'notes' or 'attachments'`)}function a(t,e){return s(t),l(`api/${t}/${e}/download`)}function r(t){i.default.isElectron()?i.default.dynamicRequire("@electron/remote").getCurrentWebContents().downloadURL(t):window.location.href=t}async function d(t,e,n){if(s(t),!i.default.isElectron()||i.default.isMac())return;let r=(await o.Z.post(`${t}/${e}/save-to-tmp-dir`)).tmpFilePath;const{exec:d}=i.default.dynamicRequire("child_process"),l=process.platform;if("linux"===l){const t=["x-terminal-emulator","gnome-terminal","konsole","xterm","xfce4-terminal","mate-terminal","rxvt","terminator","terminology"],n=e=>{const n=`${e} -e 'mimeopen -d "${r}"'`;console.log(`Open Note custom: ${n} `),d(n,((n,o,s)=>{n?(console.error(`Open Note custom: Failed to open file with ${e}: ${n}`),i(t.indexOf(e)+1)):console.log(`Open Note custom: File opened with ${e}: ${o}`)}))},i=o=>{const s=t[o];if(!s)return console.error("Open Note custom: No terminal found!"),void open(a(e),{url:!0});d(`which ${s}`,((t,e,a)=>{e.trim()?n(s):i(o+1)}))};i(0)}else"win32"===l?(-1!==r.indexOf("/")&&(r=r.replace(/\//g,"\\")),d("rundll32.exe shell32.dll,OpenAs_RunDLL "+r,((t,n,i)=>{if(t)return console.error("Open Note custom: ",t),void open(a(e),{url:!0})}))):(console.log('Currently "Open Note custom" only supports linux and windows systems'),open(a(e),{url:!0}))}function l(t){return i.default.isElectron()?`${function(){const t=new URL(window.location.href);return`${t.protocol}//${t.hostname}:${t.port}`}()}/${t}`:t}async function c(t,e,n){if(s(t),i.default.isElectron()){const n=await o.Z.post(`${t}/${e}/save-to-tmp-dir`),s=i.default.dynamicRequire("electron");await s.shell.openPath(n.tmpFilePath)&&window.open(a(t,e))}else!function(t){return"application/pdf"===t||t.startsWith("image")||t.startsWith("audio")||t.startsWith("video")}(n)?window.location.href=a(t,e):window.open(function(t,e){return s(t),l(`api/${t}/${e}/open`)}(t,e))}const h={download:r,downloadFileNote:function(t){r(`${a("notes",t)}?${Date.now()}`)},downloadRevision:function(t,e){r(l(`api/revisions/${e}/download`))},downloadAttachment:function(t){r(`${a("attachments",t)}?${Date.now()}`)},getUrlForDownload:l,openNoteExternally:async(t,e)=>await c("notes",t,e),openAttachmentExternally:async(t,e)=>await c("attachments",t,e),openNoteCustom:async(t,e)=>await d("notes",t),openAttachmentCustom:async(t,e)=>await d("attachments",t)}},4378:(t,e,n)=>{"use strict";n.d(e,{Z:()=>o});var i=n(1736);const o=new class{constructor(){this.initializedPromise=i.Z.get("options").then((t=>this.load(t)))}load(t){this.arr=t}get(t){return this.arr[t]}getNames(){return Object.keys(this.arr)}getJson(t){try{return JSON.parse(this.arr[t])}catch(t){return null}}getInt(t){return parseInt(this.arr[t])}getFloat(t){return parseFloat(this.arr[t])}is(t){return"true"===this.arr[t]}set(t,e){this.arr[t]=e}async save(t,e){this.set(t,e);const n={};n[t]=e,await i.Z.put("options",n)}async toggle(t){await this.save(t,(!this.is(t)).toString())}}},3847:(t,e,n)=>{"use strict";n.d(e,{Z:()=>i});const i={parse:function(t){const e=t.split(",").map((t=>t.trim())),n={};for(const t of e)if("promoted"===t)n.isPromoted=!0;else if(["text","number","boolean","date","datetime","url"].includes(t))n.labelType=t;else if(["single","multi"].includes(t))n.multiplicity=t;else if(t.startsWith("precision")){const e=t.split("=");n.numberPrecision=parseInt(e[1])}else if(t.startsWith("alias")){const e=t.split("=");n.promotedAlias=e[1]}else if(t.startsWith("inverse")){const e=t.split("=");n.inverseRelation=e[1]}else console.log("Unrecognized attribute definition token:",t);return n}}},7336:(t,e,n)=>{"use strict";n.d(e,{Z:()=>g});var i=n(1736),o=n(2040),s=n(6885),a=n(4264),r=n(2817),d=n(1412),l=n(9046),c=n(4378);let h=null;function p(){const t=$.Deferred();return c.Z.is("isPasswordSet")?(o.Z.isProtectedSessionAvailable()?t.resolve(!1):(h=t,r.default.triggerCommand("showProtectedSessionPasswordDialog")),t.promise()):(r.default.triggerCommand("showPasswordNotSet"),t)}function u(t,e,n){return{id:t.taskId,title:`${e} status`,message:n,icon:t.data.protect?"check-shield":"shield"}}a.Z.subscribeToMessages((async t=>{"protectedSessionLogin"===t.type?(await async function(){const t=Object.keys(d.default.notes);await d.default.loadInitialTree(),await d.default.reloadNotes(t,!0)}(),await r.default.triggerEvent("frocaReloaded"),r.default.triggerEvent("protectedSessionStarted"),r.default.triggerCommand("closeProtectedSessionPasswordDialog"),null!==h&&(h.resolve(!0),h=null),s.default.showMessage("受保护的会话已启动.")):"protectedSessionLogout"===t.type&&l.default.reloadFrontendApp("Protected session logout")})),a.Z.subscribeToMessages((async t=>{if("protectNotes"!==t.taskType)return;const e=t.data.protect?"保护":"取消保护";if("taskError"===t.type)s.default.closePersistent(t.taskId),s.default.showError(t.message);else if("taskProgressCount"===t.type)s.default.showPersistent(u(t,e,`${e} in progress: ${t.progressCount}`));else if("taskSucceeded"===t.type){const n=u(t,e,`${e} finished successfully.`);n.closeAfter=3e3,s.default.showPersistent(n)}}));const g={protectNote:async function(t,e,n){await p(),await i.Z.put(`notes/${t}/protect/${e?1:0}?subtree=${n?1:0}`)},enterProtectedSession:p,leaveProtectedSession:async function(){o.Z.isProtectedSessionAvailable()&&await o.Z.resetProtectedSession()},setupProtectedSession:async function(t){(await i.Z.post("login/protected",{password:t})).success?o.Z.enableProtectedSession():s.default.showError("密码错误.",3e3)}}},2040:(t,e,n)=>{"use strict";n.d(e,{Z:()=>a});var i=n(1736);function o(){return glob.isProtectedSessionAvailable}async function s(){o()&&await i.Z.post("login/protected/touch")}const a={enableProtectedSession:function(){glob.isProtectedSessionAvailable=!0,s()},resetProtectedSession:async function(){await i.Z.post("logout/protected")},isProtectedSessionAvailable:o,touchProtectedSession:s,touchProtectedSessionIfNecessary:function(t){t&&t.isProtected&&o()&&s()}}},5437:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var i=n(1736),o=n(394);const s={render:async function(t,e){const n=t.getRelations("renderNote").map((t=>t.value)).filter((t=>t));e.empty().toggle(n.length>0);for(const s of n){const n=await i.Z.post(`script/bundle/${s}`),a=$("<div>");e.append(a),a.append(n.html),o.default.executeBundle(n,t,a)}return n.length>0}}},5574:(t,e,n)=>{"use strict";n.d(e,{Z:()=>y});var i=n(1736),o=n(9046),s=n(6885),a=n(7844),r=n(1412),d=n(4716),l=n(7336),c=n(383),h=n(9692),p=n(1698),u=n(4264),g=n(2817),m=n(2503),b=n(1167),f=n(1902),w=n(1065),v=n(3152);const x=function(t,e,n=null,x=null){function y(t){return t?t.map((t=>"function"==typeof t?`!@#Function: ${t.toString()}`:t)):t}this.$container=x,this.startNote=t,this.currentNote=e,this.originEntity=n,this.dayjs=dayjs,this.RightPanelWidget=p.Z,this.NoteContextAwareWidget=m.Z,this.BasicWidget=b.Z,this.activateNote=async t=>{await g.default.tabManager.getActiveContext().setNote(t)},this.activateNewNote=async t=>{await u.Z.waitForMaxKnownEntityChangeId(),await g.default.tabManager.getActiveContext().setNote(t),await g.default.triggerEvent("focusAndSelectTitle")},this.openTabWithNote=async(t,e)=>{await u.Z.waitForMaxKnownEntityChangeId(),await g.default.tabManager.openTabWithNoteWithHoisting(t,{activate:e}),e&&await g.default.triggerEvent("focusAndSelectTitle")},this.openSplitWithNote=async(t,e)=>{await u.Z.waitForMaxKnownEntityChangeId();const n=g.default.tabManager.getActiveContext().getSubContexts(),{ntxId:i}=n[n.length-1];await g.default.triggerCommand("openNewNoteSplit",{ntxId:i,notePath:t}),e&&await g.default.triggerEvent("focusAndSelectTitle")},this.addButtonToToolbar=async t=>{console.warn("api.addButtonToToolbar() has been deprecated since v0.58 and may be removed in the future. Use  Menu -> Configure Launchbar to create/update launchers instead.");const{action:e,...n}=t;n.action=e.toString(),await i.Z.put("special-notes/api-script-launcher",n)},this.__runOnBackendInner=async(o,s,a)=>{"function"==typeof o&&(o=o.toString());const r=await i.Z.post("script/exec",{script:o,params:y(s),startNoteId:t.noteId,currentNoteId:e.noteId,originEntityName:"notes",originEntityId:n?n.noteId:null,transactional:a},"script");if(r.success)return await u.Z.waitForMaxKnownEntityChangeId(),r.executionResult;throw new Error(`server error: ${r.error}`)},this.runOnBackend=async(t,e=[])=>(("AsyncFunction"===t?.constructor.name||t?.startsWith?.("async "))&&s.default.showError("You're passing an async function to api.runOnBackend() which will likely not work as you intended. Either make the function synchronous (by removing 'async' keyword), or use api.runAsyncOnBackendWithManualTransactionHandling()"),await this.__runOnBackendInner(t,e,!0)),this.runAsyncOnBackendWithManualTransactionHandling=async(t,e=[])=>(("Function"===t?.constructor.name||t?.startsWith?.("function"))&&s.default.showError("You're passing a synchronous function to api.runAsyncOnBackendWithManualTransactionHandling(), while you should likely use api.runOnBackend() instead."),await this.__runOnBackendInner(t,e,!1)),this.searchForNotes=async t=>await h.Z.searchForNotes(t),this.searchForNote=async t=>{const e=await this.searchForNotes(t);return e.length>0?e[0]:null},this.getNote=async t=>await r.default.getNote(t),this.getNotes=async(t,e=!1)=>await r.default.getNotes(t,e),this.reloadNotes=async t=>await r.default.reloadNotes(t),this.getInstanceName=()=>window.glob.instanceName,this.formatDateISO=o.default.formatDateISO,this.parseDate=o.default.parseDate,this.showMessage=s.default.showMessage,this.showError=s.default.showError,this.showInfoDialog=v.Z.info,this.showConfirmDialog=v.Z.confirm,this.showPromptDialog=v.Z.prompt,this.triggerCommand=(t,e)=>g.default.triggerCommand(t,e),this.triggerEvent=(t,e)=>g.default.triggerEvent(t,e),this.createLink=a.Z.createLink,this.createNoteLink=a.Z.createLink,this.addTextToActiveContextEditor=t=>g.default.triggerCommand("addTextToActiveEditor",{text:t}),this.getActiveContextNote=()=>g.default.tabManager.getActiveContextNote(),this.getActiveContext=()=>g.default.tabManager.getActiveContext(),this.getActiveMainContext=()=>g.default.tabManager.getActiveMainContext(),this.getNoteContexts=()=>g.default.tabManager.getNoteContexts(),this.getMainNoteContexts=()=>g.default.tabManager.getMainNoteContexts(),this.getActiveContextTextEditor=()=>g.default.tabManager.getActiveContext()?.getTextEditor(),this.getActiveContextCodeEditor=()=>g.default.tabManager.getActiveContext()?.getCodeEditor(),this.getActiveNoteDetailWidget=()=>new Promise((t=>g.default.triggerCommand("executeInActiveNoteDetailWidget",{callback:t}))),this.getActiveContextNotePath=()=>g.default.tabManager.getActiveContextNotePath(),this.getComponentByEl=t=>g.default.getComponentByEl(t),this.setupElementTooltip=d.Z.setupElementTooltip,this.protectNote=async(t,e)=>{await l.Z.protectNote(t,e,!1)},this.protectSubTree=async(t,e)=>{await l.Z.protectNote(t,e,!0)},this.getTodayNote=c.Z.getTodayNote,this.getDayNote=c.Z.getDayNote,this.getWeekNote=c.Z.getWeekNote,this.getMonthNote=c.Z.getMonthNote,this.getYearNote=c.Z.getYearNote,this.setHoistedNoteId=t=>{const e=g.default.tabManager.getActiveContext();e&&e.setHoistedNoteId(t)},this.bindGlobalShortcut=w.Z.bindGlobalShortcut,this.waitUntilSynced=u.Z.waitForMaxKnownEntityChangeId,this.refreshIncludedNote=t=>g.default.triggerEvent("refreshIncludedNote",{noteId:t}),this.randomString=o.default.randomString,this.formatSize=o.default.formatSize,this.formatNoteSize=o.default.formatSize,this.logMessages={},this.logSpacedUpdates={},this.log=t=>{const{noteId:e}=this.startNote;t=`${o.default.now()}: ${t}`,console.log(`Script ${e}: ${t}`),this.logMessages[e]=this.logMessages[e]||[],this.logSpacedUpdates[e]=this.logSpacedUpdates[e]||new f.Z((()=>{const t=this.logMessages[e];this.logMessages[e]=[],g.default.triggerEvent("apiLogMessages",{noteId:e,messages:t})}),100),this.logMessages[e].push(t),this.logSpacedUpdates[e].scheduleUpdate()}},y=async function(t,e,n=null,i=null){const s={};await r.default.initializedPromise;const a=await r.default.getNote(t),d=await r.default.getNotes(e);return{modules:s,notes:o.default.toObject(d,(t=>[t.noteId,t])),apis:o.default.toObject(d,(t=>[t.noteId,new x(a,t,n,i)])),require:t=>e=>{const n=d.filter((e=>t.includes(e.noteId))),i=n.find((t=>t.title===e));if(!i)throw new Error(`Could not find module note ${e}`);return s[i.noteId].exports}}}},9692:(t,e,n)=>{"use strict";n.d(e,{Z:()=>a});var i=n(1736),o=n(1412);async function s(t){return await i.Z.get(`search/${encodeURIComponent(t)}`)}const a={searchForNoteIds:s,searchForNotes:async function(t){const e=await s(t);return await o.default.getNotes(e)}}},1736:(t,e,n)=>{"use strict";n.d(e,{Z:()=>h});var i=n(9046);class o{constructor(t){for(const e in t)this[e]=t[e]}}async function s(t){const e=(await Promise.resolve().then(n.bind(n,2817))).default,o=e.tabManager?e.tabManager.getActiveContext():null,s={"trilium-component-id":glob.componentId,"trilium-local-now-datetime":i.default.localNowDateTime(),"trilium-hoisted-note-id":o?o.hoistedNoteId:null,"x-csrf-token":glob.csrfToken};for(const e in t)t[e]&&(s[e]=t[e]);return i.default.isElectron()&&(s.cookie=document.cookie),s}let a=1;const r={};let d=0;async function l(t,e,n,o={}){let l;const h=await s({"trilium-component-id":n}),{data:p}=o;if(i.default.isElectron()){const n=i.default.dynamicRequire("electron").ipcRenderer,s=a++;l=await new Promise(((i,a)=>{r[s]={resolve:i,reject:a,silentNotFound:!!o.silentNotFound},n.send("server-request",{requestId:s,headers:h,method:t,url:`/${window.glob.baseApiUrl}${e}`,data:p})}))}else l=await function(t,e,n,i,o){return new Promise(((s,a)=>{const r={url:window.glob.baseApiUrl+t,type:e,headers:i,timeout:6e4,success:(t,e,n)=>{const i={};n.getAllResponseHeaders().trim().split(/[\r\n]+/).forEach((t=>{const e=t.split(": "),n=e.shift();i[n]=e.join(": ")})),s({body:t,headers:i})},error:async n=>{o&&404===n.status||await c(e,t,n.status,n.responseText),a(n.responseText)}};if(n){try{r.data=JSON.stringify(n)}catch(t){console.log("Can't stringify data: ",n," because of error: ",t)}r.contentType="application/json"}$.ajax(r)}))}(e,t,p,h,!!o.silentNotFound);const u=l.headers["trilium-max-entity-change-id"];return u&&u.trim()&&(d=Math.max(d,parseInt(u))),l.body}if(i.default.isElectron()){function p(t){if("application/json"===t.headers["Content-Type"]&&(t.body=JSON.parse(t.body)),!(t.requestId in r))throw new Error(`Unknown requestId '${t.requestId}'`);r[t.requestId].resolve({body:t.body,headers:t.headers})}i.default.dynamicRequire("electron").ipcRenderer.on("server-response",(async(t,e)=>{e.statusCode>=200&&e.statusCode<300?p(e):(404===e.statusCode&&r[e.requestId]?.silentNotFound||await c(e.method,e.url,e.statusCode,e.body),r[e.requestId].reject(new Error(`Server responded with ${e.statusCode}`))),delete r[e.requestId]}))}async function c(t,e,i,s){let a=s;if("string"==typeof s)try{a=(s=JSON.parse(s)).message}catch(t){}const r=(await Promise.resolve().then(n.bind(n,6885))).default;if([400,404].includes(i)&&s&&"object"==typeof s)throw r.showError(a),new o({requestUrl:e,method:t,statusCode:i,...s});{const n=`${i} ${t} ${e}`;r.showErrorTitleAndMessage(n,a),r.throwError(`${n} - ${a}`)}}const h={get:async function(t,e){return await l("GET",t,e)},getWithSilentNotFound:async function(t,e){return await l("GET",t,e,{silentNotFound:!0})},post:async function(t,e,n){return await l("POST",t,n,{data:e})},put:async function(t,e,n){return await l("PUT",t,n,{data:e})},patch:async function(t,e,n){return await l("PATCH",t,n,{data:e})},remove:async function(t,e){return await l("DELETE",t,e)},upload:async function(t,e){const n=new FormData;return n.append("upload",e),await $.ajax({url:window.glob.baseApiUrl+t,headers:await s(),data:n,type:"PUT",timeout:36e5,contentType:!1,processData:!1})},getHeaders:s,getMaxKnownEntityChangeId:()=>d}},1065:(t,e,n)=>{"use strict";n.d(e,{Z:()=>r});var i=n(9046);function o(t,e,n=null){s($(document),t,e,n)}function s(t,e,n,o=null){if(i.default.isDesktop()){e=a(e);let i="keydown";o&&(i+=`.${o}`,t.off(i)),e&&t.bind(i,e,(t=>{n(t),t.preventDefault(),t.stopPropagation()}))}}function a(t){return t?t.toLowerCase().replace("enter","return").replace("delete","del").replace("ctrl+alt","alt+ctrl").replace("meta+alt","alt+meta"):t}const r={bindGlobalShortcut:o,bindElShortcut:s,removeGlobalShortcut:function(t){o("",null,t)},normalizeShortcut:a}},1902:(t,e,n)=>{"use strict";n.d(e,{Z:()=>i});class i{constructor(t,e=1e3){this.updater=t,this.lastUpdated=Date.now(),this.changed=!1,this.updateInterval=e}scheduleUpdate(){this.changeForbidden||(this.changed=!0,setTimeout((()=>this.triggerUpdate())))}async updateNowIfNecessary(){if(this.changed){this.changed=!1;try{await this.updater()}catch(t){throw this.changed=!0,t}}}isAllSavedAndTriggerUpdate(){const t=!this.changed;return this.updateNowIfNecessary(),t}triggerUpdate(){this.changed&&(Date.now()-this.lastUpdated>this.updateInterval?(this.updater(),this.lastUpdated=Date.now(),this.changed=!1):this.scheduleUpdate())}async allowUpdateWithoutChange(t){this.changeForbidden=!0;try{await t()}finally{this.changeForbidden=!1}}}},6885:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});var i=n(4264),o=n(9046);function s(t){const e=$(`<div class="toast" role="alert" aria-live="assertive" aria-atomic="true">\n    <div class="toast-header">\n        <strong class="mr-auto"><span class="bx bx-${t.icon}"></span> <span class="toast-title"></span></strong>\n        <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">\n            <span aria-hidden="true">&times;</span>\n        </button>\n    </div>\n    <div class="toast-body"></div>\n</div>`);return e.find(".toast-title").text(t.title),e.find(".toast-body").text(t.message),t.id&&e.attr("id",`toast-${t.id}`),$("#toast-container").append(e),e.toast({delay:t.delay||3e3,autohide:!!t.autohide}),e.on("hidden.bs.toast",(t=>t.target.remove())),e.toast("show"),e}function a(t,e=1e4){console.log(o.default.now(),"error: ",t),s({title:"错误",icon:"alert",message:t,autohide:!0,delay:e})}const r={showMessage:function(t,e=2e3){console.debug(o.default.now(),"message:",t),s({title:"信息",icon:"check",message:t,autohide:!0,delay:e})},showError:a,showErrorTitleAndMessage:function(t,e,n=1e4){console.log(o.default.now(),"error: ",e),s({title:t,icon:"alert",message:e,autohide:!0,delay:n})},showAndLogError:function(t,e=1e4){a(t,e),i.Z.logError(t)},throwError:function(t){throw i.Z.logError(t),new Error(t)},showPersistent:function(t){let e=$(`#toast-${t.id}`);e.length>0?e.find(".toast-body").html(t.message):(t.autohide=!1,e=s(t)),t.closeAfter&&setTimeout((()=>e.remove()),t.closeAfter)},closePersistent:function(t){$(`#toast-${t}`).remove()}}},8481:(t,e,n)=>{"use strict";n.d(e,{Z:()=>u});var i=n(4264),o=n(9046),s=n(1412),a=n(3968),r=n(2817);async function d(t,e="root",n=!0){if(o.default.assertArguments(t),0===(t=t.split("?")[0].trim()).length)return null;const a=t.split("/").reverse();a.includes("root")||a.push("root");const r=[];let d=null,c=0;for(;!(c>=a.length);){const l=a[c++];if(null!==d){const a=await s.default.getNote(d,!n);if(!a)return n&&i.Z.logError(`Can't find note ${d}`),null;a.sortParents();const c=a.getParentNotes();if(!c.length)return n&&i.Z.logError(`No parents found for note ${d} (${a.title}) for path ${t}`),null;if(!c.some((t=>t.noteId===l))){if(n){const t=s.default.getNoteFromCache(l);console.debug(o.default.now(),`Did not find parent ${l} (${t?t.title:"n/a"}) \n                        for child ${d} (${a.title}), available parents: ${c.map((t=>`${t.noteId} (${t.title})`))}. \n                        You can ignore this message as it is mostly harmless.`)}const t=a.getBestNotePath(e);if(t){const e=t.reverse().slice(1);for(const t of e)r.push(t)}break}}r.push(l),d=l}if(r.reverse(),r.includes(e))return r;{const n=await s.default.getNote(l(t)),i=n.getBestNotePath(e);if(!i)throw new Error(`Did not find any path segments for '${n.toString()}', hoisted note '${e}'`);return i.includes(e)?i:r}}function l(t){if(!t)return null;const[e]=t.split("?"),n=e.split("/");return n[n.length-1]}function c(t){if(!t)return{};const[e]=t.split("?");if("root"===e)return{noteId:"root",parentNoteId:"none"};let n="root",i="";if(e){const t=e.split("/");i=t[t.length-1],t.length>1&&(n=t[t.length-2])}return{parentNoteId:n,noteId:i}}async function h(t,e=null){o.default.assertArguments(t);const n=await s.default.getNote(t);if(!n)return"[not found]";let{title:i}=n;if(null!==e){const t=n.parentToBranch[e];if(t){const e=s.default.getBranch(t);e?.prefix&&(i=`${e.prefix} - ${i}`)}}return i}async function p(t){const e=[];if(t.startsWith("root/")&&(t=t.substr(5)),"root"===t)e.push(await h(t));else{let n="root";for(const i of t.split("/"))e.push(await h(i,n)),n=i}return e}i.Z.subscribeToMessages((t=>{"openNote"===t.type&&(r.default.tabManager.activateOrOpenNote(t.noteId),o.default.isElectron())&&o.default.dynamicRequire("@electron/remote").getCurrentWindow().show()}));const u={resolveNotePath:async function(t,e="root"){const n=await d(t,e);return n?n.join("/"):null},resolveNotePathToSegments:d,getParentProtectedStatus:function(t){return!a.Z.isHoistedNode(t)&&t.getParent().data.isProtected},getNotePath:function(t){if(!t)return logError("节点为空"),"";const e=[];for(;t;)t.data.noteId&&e.push(t.data.noteId),t=t.getParent();return e.reverse().join("/")},getNoteIdFromUrl:l,getNoteIdAndParentIdFromUrl:c,getBranchIdFromUrl:async function(t){const{noteId:e,parentNoteId:n}=c(t);return await s.default.getBranchId(n,e)},getNoteTitle:h,getNotePathTitle:async function(t){return o.default.assertArguments(t),(await p(t)).join(" / ")},getNoteTitleWithPathAsSuffix:async function(t){o.default.assertArguments(t);const e=await p(t);if(!e||0===e.length)return"";const n=e[e.length-1],i=e.slice(0,e.length-1),s=$('<span class="note-title-with-path">').append($('<span class="note-title">').text(n));return i.length>0&&s.append($('<span class="note-path">').text(` (${i.join(" / ")})`)),s},isNotePathInHiddenSubtree:function(t){return t?.includes("root/_hidden")}}},9046:(t,e,n)=>{"use strict";function i(t){return`${t<=9?"0":""}${t}`}function o(t){return`${t.getFullYear()}-${i(t.getMonth()+1)}-${i(t.getDate())}`}function s(){return!!(window&&window.process&&window.process.type)}function a(){return navigator.platform.indexOf("Mac")>-1}n.d(e,{default:()=>f});const r={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};function d(){glob.activeDialog&&(glob.activeDialog.modal("hide"),glob.activeDialog=null)}let l=null;function c(){l=$(":focus")}function h(){if(l){if(l.hasClass("ck")){const t=l.closest(".ck-editor__editable").prop("ckeditorInstance");t?t.editing.view.focus():console.log("Could not find CKEditor instance to focus last element")}else l.focus();l=null}}function p(t){return"undefined"!=typeof require?require(t):n(3676)(t)}const u="https://github.com/zadam/trilium/wiki/";function g(t){const e=t.attr("data-help-page");if(e){const t=u+e;window.open(t,"_blank")}}function m(t){t.on("click",(t=>{g($(t.target).closest("[data-help-page]"))}))}const b=new RegExp("^[\\p{L}\\p{N}_:]+$","u"),f={reloadFrontendApp:function(t){t&&logInfo(`Frontend app reload: ${t}`),window.location.reload()},parseDate:function(t){try{return new Date(Date.parse(t))}catch(e){throw new Error(`Can't parse date from '${t}': ${e.message} ${e.stack}`)}},formatDateISO:o,formatDateTime:function(t){return`${function(t){return o(t)}(t)} ${function(t){return`${i(t.getHours())}:${i(t.getMinutes())}`}(t)}`},formatTimeInterval:function(t){const e=Math.round(t/1e3),n=Math.floor(e/60),i=Math.floor(n/60),o=Math.floor(i/24),s=(t,e)=>`${t} ${e}`,a=[];return o>0&&a.push(s(o,"天")),o<2&&(i%24>0&&a.push(s(i%24,"小时")),i<4&&(n%60>0&&a.push(s(n%60,"分钟")),n<5&&e%60>0&&a.push(s(e%60,"秒")))),a.join(", ")},formatSize:function(t){return(t=Math.max(Math.round(t/1024),1))<1024?`${t} KiB`:Math.round(t/102.4)/10+" MiB"},localNowDateTime:function(){return dayjs().format("YYYY-MM-DD HH:mm:ss.SSSZZ")},now:function(){return`${i((t=new Date).getHours())}:${i(t.getMinutes())}:${i(t.getSeconds())}`;var t},isElectron:s,isMac:a,isCtrlKey:function(t){return!a()&&t.ctrlKey||a()&&t.metaKey},assertArguments:function(){for(const t in arguments)arguments[t]||console.trace(`Argument idx#${t} should not be falsy: ${arguments[t]}`)},escapeHtml:function(t){return t.replace(/[&<>"'`=\/]/g,(t=>r[t]))},toObject:function(t,e){const n={};for(const i of t){const[t,o]=e(i);n[t]=o}return n},randomString:function(t){let e="";for(let n=0;n<t;n++)e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(Math.floor(62*Math.random()));return e},isMobile:function(){return"mobile"===window.glob?.device||!window.glob?.device&&/Mobi/.test(navigator.userAgent)},isDesktop:function(){return"desktop"===window.glob?.device||!window.glob?.device&&!/Mobi/.test(navigator.userAgent)},setCookie:function(t,e){const n=`; expires=${new Date(Date.now()+31536e7).toUTCString()}`;document.cookie=`${t}=${e||""}${n};`},getNoteTypeClass:function(t){return`type-${t}`},getMimeTypeClass:function(t){if(!t)return"";const e=t.indexOf(";");return-1!==e&&(t=t.substr(0,e)),`mime-${t.toLowerCase().replace(/[\W_]+/g,"-")}`},closeActiveDialog:d,openDialog:async function(t,e=!0){e&&(d(),glob.activeDialog=t),c(),t.modal(),t.on("hidden.bs.modal",(()=>{$(".aa-input").autocomplete("close"),glob.activeDialog&&glob.activeDialog!==t||h()})),(await n.e(586).then(n.bind(n,6604))).default.updateDisplayedShortcuts(t)},saveFocusedElement:c,focusSavedElement:h,isHtmlEmpty:function(t){return!(t&&("string"!=typeof t?(logError(`Got object of type '${typeof t}' where string was expected.`),1):(t=t.toLowerCase()).includes("<img")||t.includes("<section")||0!==$("<div>").html(t).text().trim().length))},clearBrowserCache:async function(){if(s()){const t=p("@electron/remote").getCurrentWindow();await t.webContents.session.clearCache()}},copySelectionToClipboard:function(){const t=window.getSelection().toString();navigator.clipboard&&navigator.clipboard.writeText(t)},dynamicRequire:p,timeLimit:function(t,e,n){if(!t||!t.then)return t;const i=new Error(n||`Process exceeded time limit ${e}`);return new Promise(((n,o)=>{let s=!1;t.then((t=>{s=!0,n(t)})),setTimeout((()=>{s||o(i)}),e)}))},initHelpDropdown:function(t){const e=t.find(".help-dropdown .dropdown-menu");e.on("click",(t=>t.stopPropagation())),m(e)},initHelpButtons:m,openHelp:g,filterAttributeName:function(t){return t.replace(/[^\p{L}\p{N}_:]/gu,"")},isValidAttributeName:function(t){return b.test(t)},sleep:function(t){return new Promise((e=>{setTimeout(e,t)}))},escapeRegExp:function(t){return t.replace(/([.*+?^=!:${}()|\[\]\/\\])/g,"\\$1")},areObjectsEqual:function(){let t,e,n,i;function o(t,e){let s;if(isNaN(t)&&isNaN(e)&&"number"==typeof t&&"number"==typeof e)return!0;if(t===e)return!0;if("function"==typeof t&&"function"==typeof e||t instanceof Date&&e instanceof Date||t instanceof RegExp&&e instanceof RegExp||t instanceof String&&e instanceof String||t instanceof Number&&e instanceof Number)return t.toString()===e.toString();if(!(t instanceof Object&&e instanceof Object))return!1;if(t.isPrototypeOf(e)||e.isPrototypeOf(t))return!1;if(t.constructor!==e.constructor)return!1;if(t.prototype!==e.prototype)return!1;if(n.indexOf(t)>-1||i.indexOf(e)>-1)return!1;for(s in e){if(e.hasOwnProperty(s)!==t.hasOwnProperty(s))return!1;if(typeof e[s]!=typeof t[s])return!1}for(s in t){if(e.hasOwnProperty(s)!==t.hasOwnProperty(s))return!1;if(typeof e[s]!=typeof t[s])return!1;switch(typeof t[s]){case"object":case"function":if(n.push(t),i.push(e),!o(t[s],e[s]))return!1;n.pop(),i.pop();break;default:if(t[s]!==e[s])return!1}}return!0}if(arguments.length<1)return!0;for(t=1,e=arguments.length;t<e;t++)if(n=[],i=[],!o(arguments[0],arguments[t]))return!1;return!0},copyHtmlToClipboard:function(t){const e=new ClipboardItem({"text/html":new Blob([t],{type:"text/html"}),"text/plain":new Blob([t],{type:"text/plain"})});navigator.clipboard.write([e])},createImageSrcUrl:function(t){return`api/images/${t.noteId}/${encodeURIComponent(t.title)}?timestamp=${Date.now()}`}}},4264:(t,e,n)=>{"use strict";n.d(e,{Z:()=>M});var i=n(9046),o=n(6885),s=n(1736),a=n(4378);class r{constructor(t){this.entities={};for(const{entityId:e,entityName:n,entity:i}of t)i&&(this.entities[n]=this.entities[n]||[],this.entities[n][e]=i);this.noteIdToComponentId={},this.componentIdToNoteIds={},this.branchRows=[],this.attributeRows=[],this.noteReorderings=[],this.revisionRows=[],this.contentNoteIdToComponentId=[],this.optionNames=[],this.attachmentRows=[]}getEntityRow(t,e){return this.entities[t]?.[e]}addNote(t,e){this.noteIdToComponentId[t]=this.noteIdToComponentId[t]||[],this.noteIdToComponentId[t].includes(e)||this.noteIdToComponentId[t].push(e),this.componentIdToNoteIds[e]=this.componentIdToNoteIds[e]||[],this.componentIdToNoteIds[e]||this.componentIdToNoteIds[e].push(t)}addBranch(t,e){this.branchRows.push({branchId:t,componentId:e})}getBranchRows(){return this.branchRows.map((t=>this.getEntityRow("branches",t.branchId))).filter((t=>!!t))}addNoteReordering(t,e){this.noteReorderings.push(t)}getNoteReorderings(){return this.noteReorderings}addAttribute(t,e){this.attributeRows.push({attributeId:t,componentId:e})}getAttributeRows(t="none"){return this.attributeRows.filter((e=>e.componentId!==t)).map((t=>this.getEntityRow("attributes",t.attributeId))).filter((t=>!!t))}addRevision(t,e,n){this.revisionRows.push({revisionId:t,noteId:e,componentId:n})}hasRevisionForNote(t){return!!this.revisionRows.find((e=>e.noteId===t))}getNoteIds(){return Object.keys(this.noteIdToComponentId)}isNoteReloaded(t,e=null){if(!t)return!1;const n=this.noteIdToComponentId[t];return n&&void 0!==n.find((t=>t!==e))}addNoteContent(t,e){this.contentNoteIdToComponentId.push({noteId:t,componentId:e})}isNoteContentReloaded(t,e){return!!t&&this.contentNoteIdToComponentId.find((n=>n.noteId===t&&n.componentId!==e))}addOption(t){this.optionNames.push(t)}isOptionReloaded(t){return this.optionNames.includes(t)}getOptionNames(){return this.optionNames}addAttachmentRow(t){this.attachmentRows.push(t)}getAttachmentRows(){return this.attachmentRows}hasAttributeRelatedChanges(){return this.branchRows.length>0||this.attributeRows.length>0}isEmpty(){return 0===Object.keys(this.noteIdToComponentId).length&&0===this.branchRows.length&&0===this.attributeRows.length&&0===this.noteReorderings.length&&0===this.revisionRows.length&&0===this.contentNoteIdToComponentId.length&&0===this.optionNames.length&&0===this.attachmentRows.length}isEmptyForTree(){return 0===Object.keys(this.noteIdToComponentId).length&&0===this.branchRows.length&&0===this.attributeRows.length&&0===this.noteReorderings.length}}var d=n(1412),l=n(4585),c=n(8726),h=n(9673),p=n(9763);function u(t,e){const n=d.default.notes[e.entityId];if(n)if(t.addNote(e.entityId,e.componentId),e.isErased&&e.entityId in d.default.notes)i.default.reloadFrontendApp(`${e.entityName} '${e.entityId}' is erased, need to do complete reload.`);else if(e.isErased||e.entity?.isDeleted)delete d.default.notes[e.entityId];else{if(n.blobId!==e.entity.blobId){for(const t of Object.keys(d.default.blobPromises))t.includes(n.noteId)&&delete d.default.blobPromises[t];t.addNoteContent(n.noteId,e.componentId)}n.update(e.entity)}}async function g(t,e){if(e.isErased&&e.entityId in d.default.branches)return void i.default.reloadFrontendApp(`${e.entityName} '${e.entityId}' is erased, need to do complete reload.`);let n=d.default.branches[e.entityId];if(e.isErased||e.entity?.isDeleted){if(n){const i=d.default.notes[n.noteId],o=d.default.notes[n.parentNoteId];i&&(i.parents=i.parents.filter((t=>t!==n.parentNoteId)),delete i.parentToBranch[n.parentNoteId]),o&&(o.children=o.children.filter((t=>t!==n.noteId)),delete o.childToBranch[n.noteId]),t.addBranch(e.entityId,e.componentId),delete d.default.branches[e.entityId]}return}t.addBranch(e.entityId,e.componentId);const o=d.default.notes[e.entity.noteId];let s=d.default.notes[e.entity.parentNoteId];!o||o.isRoot()||s||(s=await d.default.getNote(e.entity.parentNoteId)),n?n.update(e.entity):(o||s)&&(d.default.branches[e.entityId]=n=new c.Z(d.default,e.entity)),o&&o.addParent(n.parentNoteId,n.branchId),s&&s.addChild(n.noteId,n.branchId)}function m(t,e){const n=new Set;for(const t in e.positions){const i=d.default.branches[t];i&&(i.notePosition=e.positions[t],n.add(i.parentNoteId))}for(const t of n){const e=d.default.notes[t];e&&e.sortChildren()}t.addNoteReordering(e.entityId,e.componentId)}function b(t,e){let n=d.default.attributes[e.entityId];if(e.isErased&&e.entityId in d.default.attributes)return void i.default.reloadFrontendApp(`${e.entityName} '${e.entityId}' is erased, need to do complete reload.`);if(e.isErased||e.entity?.isDeleted){if(n){const i=d.default.notes[n.noteId],o="relation"===n.type&&d.default.notes[n.value];i&&(i.attributes=i.attributes.filter((t=>t!==n.attributeId))),o&&(o.targetRelations=o.targetRelations.filter((t=>t!==n.attributeId))),t.addAttribute(e.entityId,e.componentId),delete d.default.attributes[e.entityId]}return}t.addAttribute(e.entityId,e.componentId);const o=d.default.notes[e.entity.noteId],s="relation"===e.entity.type&&d.default.notes[e.entity.value];n?n.update(e.entity):(o||s)&&(n=new h.Z(d.default,e.entity),d.default.attributes[n.attributeId]=n,o&&!o.attributes.includes(n.attributeId)&&o.attributes.push(n.attributeId),s&&!s.targetRelations.includes(n.attributeId)&&s.targetRelations.push(n.attributeId))}function f(t,e){if(e.isErased&&e.entityId in d.default.attachments)return void i.default.reloadFrontendApp(`${e.entityName} '${e.entityId}' is erased, need to do complete reload.`);const n=d.default.attachments[e.entityId];if(e.isErased||e.entity?.isDeleted){if(n){const i=n.getNote();i&&i.attachments&&(i.attachments=i.attachments.filter((t=>t.attachmentId!==n.attachmentId))),t.addAttachmentRow(e.entity),delete d.default.attachments[e.entityId]}}else{if(n)n.update(e.entity);else{const t=d.default.notes[e.entity.ownerId];t?.attachments&&t.attachments.push(new p.Z(d.default,e.entity))}t.addAttachmentRow(e.entity)}}const w={processEntityChanges:async function(t){const e=new r(t);for(const n of t)try{if("notes"===n.entityName)u(e,n);else if("branches"===n.entityName)await g(e,n);else if("attributes"===n.entityName)b(e,n);else if("note_reordering"===n.entityName)m(e,n);else if("revisions"===n.entityName)e.addRevision(n.entityId,n.noteId,n.componentId);else if("options"===n.entityName){if("openNoteContexts"===n.entity.name)continue;a.Z.set(n.entity.name,n.entity.value),e.addOption(n.entity.name)}else if("attachments"===n.entityName)f(e,n);else if("blobs"!==n.entityName&&"etapi_tokens"!==n.entityName)throw new Error(`Unknown entityName '${n.entityName}'`)}catch(t){throw new Error(`Can't process entity ${JSON.stringify(n)} with error ${t.message} ${t.stack}`)}const i=[];for(const{entityName:e,entity:n}of t)n&&("branches"!==e||n.parentNoteId in d.default.notes?"attributes"!==e||"relation"!==n.type||"template"!==n.name&&"inherit"!==n.name||n.value in d.default.notes||i.push(n.value):i.push(n.parentNoteId));if(i.length>0&&await d.default.reloadNotes(i),!e.isEmpty()){e.hasAttributeRelatedChanges()&&l.Z.invalidate();const t=(await Promise.resolve().then(n.bind(n,2817))).default;await t.triggerEvent("entitiesReloaded",{loadResults:e})}}};var v=n(2817);const x=[];let y,$,I=window.glob.maxEntityChangeIdAtLoad,C=window.glob.maxEntityChangeSyncIdAtLoad,N=window.glob.maxEntityChangeIdAtLoad,k=[];function T(t){console.error(i.default.now(),t),y&&1===y.readyState&&y.send(JSON.stringify({type:"log-error",error:t,stack:(new Error).stack}))}window.logError=T,window.logInfo=function(t){console.log(i.default.now(),t),y&&1===y.readyState&&y.send(JSON.stringify({type:"log-info",info:t}))};let S=null;const E=new Set;async function A(t){const e=JSON.parse(t.data);for(const t of x)t(e);if("ping"===e.type)$=Date.now();else if("reload-frontend"===e.type)i.default.reloadFrontendApp("received request from backend to reload frontend");else if("frontend-update"===e.type)await async function(t){if($=Date.now(),t.length>0){!function(t){const e=t.filter((t=>!E.has(t.id)&&("options"!==t.entityName||"openNoteContexts"!==t.entityId)));e.length>0&&console.debug(i.default.now(),"Frontend update data: ",e)}(t),k.push(...t);for(const e of t)I=Math.max(I,e.id),e.isSynced&&(C=Math.max(C,e.id));for(_();S;)await S;try{S=async function(){if(k.length>0){const t=k;k=[];const e=t.filter((t=>!E.has(t.id)));try{await i.default.timeLimit(w.processEntityChanges(e),3e4)}catch(t){T(`发生错误 ${t.message}: ${t.stack}, 重新加载界面.`),glob.isDev||a.Z.is("debugModeEnabled")?(console.log("nonProcessedEntityChanges causing the timeout",e),o.default.showError(`Encountered error "${t.message}", check out the console.`)):i.default.reloadFrontendApp()}for(const t of e)E.add(t.id),N=Math.max(N,t.id)}R.filter((t=>t.desiredEntityChangeId<=N)).forEach((t=>t.resolvePromise())),R=R.filter((t=>t.desiredEntityChangeId>N)),R.filter((t=>Date.now()>t.start-6e4)).forEach((t=>console.log(`Waiting for entityChangeId ${t.desiredEntityChangeId} while last processed is ${N} (last accepted ${I}) for ${Math.floor((Date.now()-t.start)/1e3)}s`)))}(),await S}finally{S=null}}}(e.data.entityChanges);else if("sync-hash-check-failed"===e.type)o.default.showError("同步检查失败!",6e4);else if("consistency-checks-failed"===e.type)o.default.showError("一致性检查失败! 详情请看日志.",3e6);else if("api-log-messages"===e.type)v.default.triggerEvent("apiLogMessages",{noteId:e.noteId,messages:e.messages});else if("toast"===e.type)o.default.showMessage(e.message);else if("execute-script"===e.type){const t=(await Promise.resolve().then(n.bind(n,394))).default,i=(await Promise.resolve().then(n.bind(n,1412))).default,o=e.originEntityId?await i.getNote(e.originEntityId):null;t.getAndExecuteBundle(e.currentNoteId,o,e.script,e.params)}}let R=[];function P(){const t=window.location,e=`${"https:"===t.protocol?"wss:":"ws:"}//${t.host}${t.pathname}`,n=new WebSocket(e);return n.onopen=()=>console.debug(i.default.now(),`Connected to server ${e} with WebSocket`),n.onmessage=A,n}async function _(){Date.now()-$>3e4&&console.log(i.default.now(),"Lost websocket connection to the backend. If you keep having this issue repeatedly, you might want to check your reverse proxy (nginx, apache) configuration and allow/unblock WebSocket."),y.readyState===y.OPEN?y.send(JSON.stringify({type:"ping",lastEntityChangeId:I})):y.readyState!==y.CLOSED&&y.readyState!==y.CLOSING||(console.log(i.default.now(),"WS closed or closing, trying to reconnect"),y=P())}setTimeout((()=>{y=P(),$=Date.now(),setInterval(_,1e3)}),0);const M={logError:T,subscribeToMessages:function(t){x.push(t)},waitForMaxKnownEntityChangeId:function(){return(t=s.Z.getMaxKnownEntityChangeId())<=N?Promise.resolve():(console.debug(`Waiting for ${t}, last processed is ${N}, last accepted ${I}`),new Promise(((e,n)=>{R.push({desiredEntityChangeId:t,resolvePromise:e,start:Date.now()})})));var t},getMaxKnownEntityChangeSyncId:()=>C}},3676:t=>{function e(t){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}e.keys=()=>[],e.resolve=e,e.id=3676,t.exports=e},1167:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var i=n(8866);class o extends i.Z{constructor(){super(),this.attrs={style:""},this.classes=[],this.children=[],this.childPositionCounter=10}child(...t){if(!t)return this;super.child(...t);for(const e of t)void 0===e.position&&(e.position=this.childPositionCounter,this.childPositionCounter+=10);return this.children.sort(((t,e)=>t.position-e.position)),this}id(t){return this.attrs.id=t,this}class(t){return this.classes.push(t),this}css(t,e){return this.attrs.style+=`${t}: ${e};`,this}contentSized(){return this.css("contain","none"),this}collapsible(){return this.css("min-height","0"),this.css("min-width","0"),this}filling(){return this.css("flex-grow","1"),this}cssBlock(t){return this.cssEl=t,this}render(){if(this.doRender(),this.$widget.attr("data-component-id",this.componentId),this.$widget.addClass("component").prop("component",this),this.isEnabled()||this.toggleInt(!1),this.cssEl){const t=this.cssEl.trim().startsWith("<style>")?this.cssEl:`<style>${this.cssEl}</style>`;this.$widget.append(t)}for(const t in this.attrs)if("style"===t){if(this.attrs[t]){let e=this.$widget.attr("style");e=e?`${e}; ${this.attrs[t]}`:this.attrs[t],this.$widget.attr(t,e)}}else this.$widget.attr(t,this.attrs[t]);for(const t of this.classes)this.$widget.addClass(t);return this.$widget}isEnabled(){return!0}doRender(){}toggleInt(t){this.$widget.toggleClass("hidden-int",!t)}isHiddenInt(){return this.$widget.hasClass("hidden-int")}toggleExt(t){this.$widget.toggleClass("hidden-ext",!t)}isHiddenExt(){return this.$widget.hasClass("hidden-ext")}canBeShown(){return!this.isHiddenInt()&&!this.isHiddenExt()}isVisible(){return this.$widget.is(":visible")}getPosition(){return this.position}remove(){this.$widget&&this.$widget.remove()}getClosestNtxId(){return this.$widget?this.$widget.closest("[data-ntx-id]").attr("data-ntx-id"):null}cleanup(){}}const s=o},2503:(t,e,n)=>{"use strict";n.d(e,{Z:()=>a});var i=n(1167),o=n(2817);class s extends i.Z{isNoteContext(t){return Array.isArray(t)?this.noteContext&&t.includes(this.noteContext.ntxId):this.noteContext&&this.noteContext.ntxId===t}isActiveNoteContext(){return o.default.tabManager.getActiveContext()===this.noteContext}isNote(t){return this.noteId===t}get note(){return this.noteContext?.note}get noteId(){return this.note?.noteId}get notePath(){return this.noteContext?.notePath}get hoistedNoteId(){return this.noteContext?.hoistedNoteId}get ntxId(){return this.noteContext?.ntxId}isEnabled(){return!!this.note}async refresh(){this.isEnabled()?(this.toggleInt(!0),await this.refreshWithNote(this.note)):this.toggleInt(!1)}async refreshWithNote(t){}async noteSwitchedEvent({noteContext:t,notePath:e}){t.notePath===e&&await this.noteSwitched()}async noteSwitched(){await this.refresh()}async activeContextChangedEvent({noteContext:t}){this.noteContext=t,await this.activeContextChanged()}async activeContextChanged(){await this.refresh()}async noteSwitchedAndActivatedEvent({noteContext:t,notePath:e}){this.noteContext=t,this.notePath===e&&await this.refresh()}setNoteContextEvent({noteContext:t}){this.noteContext=t}async noteTypeMimeChangedEvent({noteId:t}){this.isNote(t)&&await this.refresh()}async frocaReloadedEvent(){await this.refresh()}}const a=s},1698:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var i=n(2503);class o extends i.Z{get widgetTitle(){return"Untitled widget"}get widgetButtons(){return[]}get help(){return{}}constructor(){super(),this.child(...this.widgetButtons)}doRender(){this.$widget=$('\n<div class="card widget">\n    <div class="card-header">\n        <div class="card-header-title"></div>\n        <div class="card-header-buttons"></div>\n    </div>\n\n    <div id="[to be set]" class="body-wrapper">\n        <div class="card-body"></div>\n    </div>\n</div>'),this.contentSized(),this.$widget.find("[data-target]").attr("data-target",`#${this.componentId}`),this.$bodyWrapper=this.$widget.find(".body-wrapper"),this.$bodyWrapper.attr("id",this.componentId),this.$body=this.$bodyWrapper.find(".card-body"),this.$title=this.$widget.find(".card-header .card-header-title"),this.$title.text(this.widgetTitle),this.$buttons=this.$widget.find(".card-header .card-header-buttons"),this.$buttons.empty();for(const t of this.children)this.$buttons.append(t.render());this.initialized=this.doRenderBody()}async doRenderBody(){}}const s=o},2298:t=>{"use strict";t.exports=require("electron")}},__webpack_module_cache__={},inProgress,dataWebpackPrefix;function __webpack_require__(t){var e=__webpack_module_cache__[t];if(void 0!==e)return e.exports;var n=__webpack_module_cache__[t]={exports:{}};return __webpack_modules__[t](n,n.exports,__webpack_require__),n.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.d=(t,e)=>{for(var n in e)__webpack_require__.o(e,n)&&!__webpack_require__.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},__webpack_require__.f={},__webpack_require__.e=t=>Promise.all(Object.keys(__webpack_require__.f).reduce(((e,n)=>(__webpack_require__.f[n](t,e),e)),[])),__webpack_require__.u=t=>t+".js",__webpack_require__.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),inProgress={},dataWebpackPrefix="trilium:",__webpack_require__.l=(t,e,n,i)=>{if(inProgress[t])inProgress[t].push(e);else{var o,s;if(void 0!==n)for(var a=document.getElementsByTagName("script"),r=0;r<a.length;r++){var d=a[r];if(d.getAttribute("src")==t||d.getAttribute("data-webpack")==dataWebpackPrefix+n){o=d;break}}o||(s=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,__webpack_require__.nc&&o.setAttribute("nonce",__webpack_require__.nc),o.setAttribute("data-webpack",dataWebpackPrefix+n),o.src=t),inProgress[t]=[e];var l=(e,n)=>{o.onerror=o.onload=null,clearTimeout(c);var i=inProgress[t];if(delete inProgress[t],o.parentNode&&o.parentNode.removeChild(o),i&&i.forEach((t=>t(n))),e)return e(n)},c=setTimeout(l.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=l.bind(null,o.onerror),o.onload=l.bind(null,o.onload),s&&document.head.appendChild(o)}},__webpack_require__.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},__webpack_require__.p="assets/v0.62.4/app-dist/",(()=>{var t={380:0,586:0,274:0};__webpack_require__.f.j=(e,n)=>{var i=__webpack_require__.o(t,e)?t[e]:void 0;if(0!==i)if(i)n.push(i[2]);else{var o=new Promise(((n,o)=>i=t[e]=[n,o]));n.push(i[2]=o);var s=__webpack_require__.p+__webpack_require__.u(e),a=new Error;__webpack_require__.l(s,(n=>{if(__webpack_require__.o(t,e)&&(0!==(i=t[e])&&(t[e]=void 0),i)){var o=n&&("load"===n.type?"missing":n.type),s=n&&n.target&&n.target.src;a.message="Loading chunk "+e+" failed.\n("+o+": "+s+")",a.name="ChunkLoadError",a.type=o,a.request=s,i[1](a)}}),"chunk-"+e,e)}};var e=(e,n)=>{var i,o,[s,a,r]=n,d=0;if(s.some((e=>0!==t[e]))){for(i in a)__webpack_require__.o(a,i)&&(__webpack_require__.m[i]=a[i]);r&&r(__webpack_require__)}for(e&&e(n);d<s.length;d++)o=s[d],__webpack_require__.o(t,o)&&t[o]&&t[o][0](),t[o]=0},n=global.webpackChunktrilium=global.webpackChunktrilium||[];n.forEach(e.bind(null,0)),n.push=e.bind(null,n.push.bind(n))})();var __webpack_exports__={};(()=>{"use strict";var t=__webpack_require__(2817),e=__webpack_require__(9046),n=__webpack_require__(4716),i=__webpack_require__(394),o=__webpack_require__(1736),s=__webpack_require__(8181),a=__webpack_require__(1412);const r="data-note-path";async function d(n,i,s={}){const a=t.default.tabManager.getActiveContextNoteId();let r=await o.Z.get(`autocomplete?query=${encodeURIComponent(n)}&activeNoteId=${a}`);n.trim().length>=1&&s.allowCreatingNotes&&(r=[{action:"create-note",noteTitle:n,parentNoteId:a||"root",highlightedNotePathTitle:`创建并关联子笔记 "${e.default.escapeHtml(n)}"`}].concat(r)),n.match(/^[a-z]+:\/\/.+/i)&&s.allowExternalLinks&&(r=[{action:"external-link",externalLink:n,highlightedNotePathTitle:`插入外部链接到 "${e.default.escapeHtml(n)}"`}].concat(r)),i(r)}function l(t){e.default.isMobile()||(t.setSelectedNotePath(""),t.autocomplete("val","").trigger("change"))}function c(t){if(e.default.isMobile())return;t.setSelectedNotePath(""),t.autocomplete("val",""),t.trigger("focus");const n=$.Event("keydown");n.which=40,t.trigger(n)}const h={autocompleteSourceForCKEditor:async function(t){return await new Promise(((e,n)=>{d(t,(t=>{e(t.map((t=>({action:t.action,noteTitle:t.noteTitle,id:`@${t.notePathTitle}`,name:t.notePathTitle,link:`#${t.notePath}`,notePath:t.notePath,highlightedNotePathTitle:t.highlightedNotePathTitle}))))}),{allowCreatingNotes:!0})}))},initNoteAutocomplete:function(n,i){if(n.hasClass("note-autocomplete-input")||e.default.isMobile())return n.off("autocomplete:noteselected"),n;i=i||{},n.addClass("note-autocomplete-input");const o=$("<a>").addClass("input-group-text input-clearer-button bx bxs-tag-x").prop("title","清空文字"),a=$("<a>").addClass("input-group-text show-recent-notes-button bx bx-time").prop("title","显示最近笔记"),r=$("<a>").addClass("input-group-text go-to-selected-note-button bx bx-arrow-to-right"),h=$("<div>").addClass("input-group-append").append(o).append(a);i.hideGoToSelectedNoteButton||h.append(r),n.after(h),o.on("click",(()=>l(n))),a.on("click",(t=>(c(n),!1)));let p={};return i.container&&(p.dropdownMenuContainer=i.container,p.debug=!0),n.autocomplete({...p,appendTo:document.querySelector("body"),hint:!1,autoselect:!0,openOnFocus:!1,minLength:0,tabAutocomplete:!1},[{source:(t,e)=>d(t,e,i),displayKey:"notePathTitle",templates:{suggestion:t=>t.highlightedNotePathTitle},cache:!1}]),n.on("autocomplete:selected",(async(e,i)=>{if("external-link"===i.action)return n.setSelectedNotePath(null),n.setSelectedExternalLink(i.externalLink),n.autocomplete("val",i.externalLink),n.autocomplete("close"),void n.trigger("autocomplete:externallinkselected",[i]);if("create-note"===i.action){const{success:e,noteType:n,templateNoteId:o}=await s.Z.chooseNoteType();if(!e)return;const{note:a}=await s.Z.createNote(i.parentNoteId,{title:i.noteTitle,activate:!1,type:n,templateNoteId:o}),r=t.default.tabManager.getActiveContext()?.hoistedNoteId;i.notePath=a.getBestNotePathString(r)}n.setSelectedNotePath(i.notePath),n.setSelectedExternalLink(null),n.autocomplete("val",i.noteTitle),n.autocomplete("close"),n.trigger("autocomplete:noteselected",[i])})),n.on("autocomplete:closed",(()=>{n.val().trim()||l(n)})),n.on("autocomplete:opened",(()=>{n.attr("readonly")&&n.autocomplete("close")})),n.off("autocomplete:noteselected"),n},showRecentNotes:c,setText:function(t,n){e.default.isMobile()||(t.setSelectedNotePath(""),t.autocomplete("val",n.trim()).autocomplete("open"))},init:function(){$.fn.getSelectedNotePath=function(){return $(this).val().trim()?$(this).attr(r):""},$.fn.getSelectedNoteId=function(){const t=$(this).getSelectedNotePath();if(!t)return null;const e=t.split("/");return e.length>=1?e[e.length-1]:null},$.fn.setSelectedNotePath=function(t){t=t||"",$(this).attr(r,t),$(this).closest(".input-group").find(".go-to-selected-note-button").toggleClass("disabled",!t.trim()).attr("href",`#${t}`)},$.fn.getSelectedExternalLink=function(){return $(this).val().trim()?$(this).attr("data-external-link"):""},$.fn.setSelectedExternalLink=function(t){t&&$(this).closest(".input-group").find(".go-to-selected-note-button").toggleClass("disabled",!0)},$.fn.setNote=async function(t){const e=t?await a.default.getNote(t,!0):null;$(this).val(e?e.title:"").setSelectedNotePath(t)}}};var p=__webpack_require__(1065);function u(t){return document.execCommand(t),!1}const g=function(){e.default.isElectron()&&e.default.isMac()&&(p.Z.bindGlobalShortcut("meta+c",(()=>u("copy"))),p.Z.bindGlobalShortcut("meta+v",(()=>u("paste"))),p.Z.bindGlobalShortcut("meta+x",(()=>u("cut"))),p.Z.bindGlobalShortcut("meta+a",(()=>u("selectAll"))),p.Z.bindGlobalShortcut("meta+z",(()=>u("undo"))),p.Z.bindGlobalShortcut("meta+y",(()=>u("redo"))))};var m=__webpack_require__(4378),b=__webpack_require__(9925),f=__webpack_require__(1801);const w=function(){const t=e.default.dynamicRequire("electron"),n=e.default.dynamicRequire("@electron/remote"),{webContents:i}=n.getCurrentWindow();i.on("context-menu",((e,n)=>{const{editFlags:o}=n,s=n.selectionText.trim().length>0,a="darwin"===process.platform?"Meta":"Ctrl",r=[];if(n.misspelledWord){for(const t of n.dictionarySuggestions)r.push({title:t,command:"replaceMisspelling",spellingSuggestion:t,uiIcon:"bx bx-empty"});r.push({title:`将 "${n.misspelledWord}" 加入字典`,uiIcon:"bx bx-plus",handler:()=>i.session.addWordToSpellCheckerDictionary(n.misspelledWord)}),r.push({title:"----"})}if(n.isEditable&&r.push({enabled:o.canCut&&s,title:`剪切 <kbd>${a}+X`,uiIcon:"bx bx-cut",handler:()=>i.cut()}),(n.isEditable||s)&&r.push({enabled:o.canCopy&&s,title:`复制 <kbd>${a}+C`,uiIcon:"bx bx-copy",handler:()=>i.copy()}),["","javascript:","about:blank#blocked"].includes(n.linkURL)||"none"!==n.mediaType||r.push({title:"复制 link",uiIcon:"bx bx-copy",handler:()=>{t.clipboard.write({bookmark:n.linkText,text:n.linkURL})}}),n.isEditable&&r.push({enabled:o.canPaste,title:`粘贴 <kbd>${a}+V`,uiIcon:"bx bx-paste",handler:()=>i.paste()}),n.isEditable&&r.push({enabled:o.canPaste,title:`粘贴为纯文本 <kbd>${a}+Shift+V`,uiIcon:"bx bx-paste",handler:()=>i.pasteAndMatchStyle()}),s){const e=n.selectionText.length>15?`${n.selectionText.substr(0,13)}…`:n.selectionText,i=m.Z.get("customSearchEngineName"),s=m.Z.get("customSearchEngineUrl");let a,d;i&&s?(a=i,d=s):(a="DuckDuckGo",d="https://duckduckgo.com/?q={keyword}");let l=d.replace("{keyword}",encodeURIComponent(n.selectionText));r.push({enabled:o.canPaste,title:`用 ${a} 搜索 "${e}"`,uiIcon:"bx bx-search-alt",handler:()=>t.shell.openExternal(l)})}if(0===r.length)return;const d=b.Z.getCurrentZoom();f.Z.show({x:n.x/d,y:n.y/d,items:r,selectMenuItemHandler:({command:t,spellingSuggestion:e})=>{"replaceMisspelling"===t&&i.insertText(e)}})}))};var v=__webpack_require__(1167);class x extends v.Z{doRender(){this.$widget=$("<div>"),this.renderChildren()}renderChildren(){for(const t of this.children)this.$widget.append(t.render())}}class y extends x{constructor(t){if(super(),!t||!["row","column"].includes(t))throw new Error(`Direction argument given as '${t}', use either 'row' or 'column'`);this.attrs.style=`display: flex; flex-direction: ${t};`}}class I extends v.Z{doRender(){this.$widget=$('\n<div style="display: none;">\n    <style>\n        .global-menu-button-update-available-button {\n            width: 21px !important;\n            height: 21px !important;\n            padding: 0 !important;\n            \n            border-radius: var(--button-border-radius);\n            transform: scale(0.9);\n            border: none;\n            opacity: 0.8;\n            \n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n        \n        .global-menu-button-wrapper:hover .global-menu-button-update-available-button {\n            opacity: 1;\n        }\n    </style>\n    \n    <span class="bx bx-sync global-menu-button-update-available-button" title="有可用的更新"></span>\n</div>\n')}updateVersionStatus(t){this.$widget.toggle(t>glob.triliumVersion)}}const C=`\n<div class="dropdown global-menu dropright">\n    <style>\n    .global-menu {\n        width: 53px;\n        height: 53px;\n    }\n    \n    .global-menu .dropdown-menu {\n        min-width: 20em;\n    }\n    \n    .global-menu-button {\n        background-image: url("${window.glob.assetPath}/images/icon-black.svg");\n        background-repeat: no-repeat;\n        background-position: 40% 50%;\n        background-size: 45px;\n        width: 100%;\n        height: 100%;\n        position: relative;\n    }\n    \n    .global-menu-button:hover {\n        background-image: url("${window.glob.assetPath}/images/icon-color.svg");\n        border: 0;\n    }\n    \n    .global-menu-button-update-available {\n        position: absolute;\n        right: -30px;\n        bottom: -30px;\n        width: 100%;\n        height: 100%;\n        pointer-events: none;\n    }\n\n    .update-to-latest-version-button {\n        display: none;\n    }\n    \n    .global-menu .zoom-container {\n        display: flex; \n        flex-direction: row; \n        justify-content: space-between;\n        align-items: baseline;\n    }\n    \n    .global-menu .zoom-buttons a {\n        display: inline-block;\n        border: 1px solid var(--button-border-color);\n        border-radius: var(--button-border-radius);\n        color: var(--button-text-color);\n        background-color: var(--button-background-color);\n        padding: 3px;\n        margin-left: 3px;\n    }\n    \n    .global-menu .zoom-buttons a:hover {\n        text-decoration: none;\n    }\n    \n    .global-menu .zoom-state {\n        margin-left: 5px;\n        margin-right: 5px;\n    }\n    \n    .global-menu .dropdown-item .bx {\n        position: relative;\n        top: 3px;\n        font-size: 120%;\n        margin-right: 5px;\n    }\n    \n    body.mobile .show-help-button, body.mobile .show-about-dialog-button {\n        /* hidden because these dialogs are not available for mobile */\n        display: none;\n    }\n    \n    body.mobile .global-menu .dropdown-submenu .dropdown-menu {\n        display: block;\n        font-size: 90%;\n        position: relative;\n        left: 0;\n        top: 5px;\n    }\n    </style>\n\n    <button type="button" data-toggle="dropdown" data-placement="right"\n            aria-haspopup="true" aria-expanded="false" \n            class="icon-action global-menu-button" title="菜单">\n        <div class="global-menu-button-update-available"></div>\n    </button>\n\n    <ul class="dropdown-menu dropdown-menu-right">\n        <li class="dropdown-item" data-trigger-command="showOptions">\n            <span class="bx bx-slider"></span>\n            选项\n        </li>\n\n        <li class="dropdown-item" data-trigger-command="openNewWindow">\n            <span class="bx bx-window-open"></span>\n            新窗口\n            <kbd data-command="openNewWindow"></kbd>\n        </li>\n\n        <li class="dropdown-item switch-to-mobile-version-button" data-trigger-command="switchToMobileVersion">\n            <span class="bx bx-mobile"></span>\n            切换到移动版\n        </li>\n        \n        <li class="dropdown-item switch-to-desktop-version-button" data-trigger-command="switchToDesktopVersion">\n            <span class="bx bx-desktop"></span>\n            切换到桌面版\n        </li>\n        \n        <span class="zoom-container dropdown-item">\n            <div>\n                <span class="bx bx-empty"></span>\n                缩放\n            </div>\n            \n            <div class="zoom-buttons">\n                <a data-trigger-command="toggleFullscreen" title="切换全屏" class="bx bx-expand-alt"></a>\n                \n                &nbsp;\n                \n                <a data-trigger-command="zoomOut" title="缩小" class="bx bx-minus"></a>\n                \n                <span data-trigger-command="zoomReset" title="Reset Zoom Level" class="zoom-state"></span>\n                \n                <a data-trigger-command="zoomIn" title="放大" class="bx bx-plus"></a>\n            </div>\n        </span>\n\n        <li class="dropdown-item" data-trigger-command="showLaunchBarSubtree">\n            <span class="bx bx-sidebar"></span>\n            配置启动栏\n        </li>\n        \n        <li class="dropdown-item" data-trigger-command="showShareSubtree">\n            <span class="bx bx-share-alt"></span>\n            显示分享的笔记子树\n        </li>\n        \n        <li class="dropdown-item dropdown-submenu">\n            <span class="dropdown-toggle">\n                <span class="bx bx-empty"></span>\n                高级\n            </span>\n            \n            <ul class="dropdown-menu">\n                <li class="dropdown-item open-dev-tools-button" data-trigger-command="openDevTools">\n                    <span class="bx bx-bug-alt"></span>\n                    开发者工具\n                    <kbd data-command="openDevTools"></kbd>\n                </li>\n        \n                <li class="dropdown-item" data-trigger-command="showSQLConsole">\n                    <span class="bx bx-data"></span>\n                    打开SQL控制台\n                    <kbd data-command="showSQLConsole"></kbd>\n                </li>\n                \n                <li class="dropdown-item" data-trigger-command="showSQLConsoleHistory">\n                    <span class="bx bx-empty"></span>\n                    打开SQL控制台历史记录\n                </li>\n                \n                <li class="dropdown-item" data-trigger-command="showSearchHistory">\n                    <span class="bx bx-empty"></span>\n                    打开搜索历史\n                </li>\n        \n                <li class="dropdown-item" data-trigger-command="showBackendLog">\n                    <span class="bx bx-empty"></span>\n                    显示后台日志\n                    <kbd data-command="showBackendLog"></kbd>\n                </li>\n                \n                <li class="dropdown-item" data-trigger-command="reloadFrontendApp" \n                    title="重新加载可以帮助解决一些显示问题, 而无需重新启动整个应用程序.">\n                    <span class="bx bx-empty"></span>\n                    重新加载界面\n                    <kbd data-command="reloadFrontendApp"></kbd>\n                </li>\n                \n                <li class="dropdown-item" data-trigger-command="showHiddenSubtree">\n                    <span class="bx bx-empty"></span>\n                    显示隐藏的子树\n                </li>\n            </ul>\n        </li>\n\n        <li class="dropdown-item show-help-button" data-trigger-command="showHelp">\n            <span class="bx bx-info-circle"></span>\n            显示帮助\n            <kbd data-command="showHelp"></kbd>\n        </li>\n\n        <li class="dropdown-item show-about-dialog-button">\n            <span class="bx bx-empty"></span>\n            关于 Trilium Notes\n        </li>\n\n        <li class="dropdown-item update-to-latest-version-button" data-trigger-command="downloadLatestVersion">\n            <span class="bx bx-sync"></span>\n\n            <span class="version-text"></span>\n        </li>\n\n        <li class="dropdown-item logout-button" data-trigger-command="logout">\n            <span class="bx bx-log-out"></span>\n            登出\n        </li>\n    </ul>\n</div>\n`;class N extends v.Z{constructor(){super(),this.updateAvailableWidget=new I}doRender(){this.$widget=$(C),this.$dropdown=this.$widget.find("[data-toggle='dropdown']");const t=this.$widget.find(".global-menu-button");t.tooltip({trigger:"hover"}),t.on("click",(()=>t.tooltip("hide"))),this.$widget.find(".show-about-dialog-button").on("click",(()=>this.triggerCommand("openAboutDialog")));const n=e.default.isElectron();this.$widget.find(".logout-button").toggle(!n),this.$widget.find(".open-dev-tools-button").toggle(n),this.$widget.find(".switch-to-mobile-version-button").toggle(!n&&e.default.isDesktop()),this.$widget.find(".switch-to-desktop-version-button").toggle(!n&&e.default.isMobile()),this.$widget.on("click",".dropdown-item",(t=>{$(t.target).parent(".zoom-buttons")||this.$dropdown.dropdown("toggle")})),this.$widget.find(".global-menu-button-update-available").append(this.updateAvailableWidget.render()),this.$updateToLatestVersionButton=this.$widget.find(".update-to-latest-version-button"),e.default.isElectron()||this.$widget.find(".zoom-container").hide(),this.$zoomState=this.$widget.find(".zoom-state"),this.$widget.on("show.bs.dropdown",(()=>this.updateZoomState())),this.$widget.find(".zoom-buttons").on("click",(()=>setTimeout((()=>this.updateZoomState()),300))),this.updateVersionStatus(),setInterval((()=>this.updateVersionStatus()),288e5)}updateZoomState(){if(!e.default.isElectron())return;const t=e.default.dynamicRequire("electron").webFrame.getZoomFactor(),n=Math.round(100*t);this.$zoomState.text(`${n}%`)}async updateVersionStatus(){if(await m.Z.initializedPromise,"true"!==m.Z.get("checkForUpdates"))return;const t=await this.fetchLatestVersion();this.updateAvailableWidget.updateVersionStatus(t),this.$updateToLatestVersionButton.toggle(t>glob.triliumVersion),this.$updateToLatestVersionButton.find(".version-text").text(`Version ${t} is available, click to download.`)}async fetchLatestVersion(){const t=await fetch("https://api.github.com/repos/zadam/trilium/releases/latest"),e=await t.json();return e?.tag_name?.substring(1)}downloadLatestVersionCommand(){window.open("https://github.com/zadam/trilium/releases/latest")}activeContextChangedEvent(){this.$dropdown.dropdown("hide")}noteSwitchedEvent(){this.$dropdown.dropdown("hide")}}var k=__webpack_require__(6604);const T={addLabel:async function(t,e,n=""){await o.Z.put(`notes/${t}/attribute`,{type:"label",name:e,value:n})},setLabel:async function(t,e,n=""){await o.Z.put(`notes/${t}/set-attribute`,{type:"label",name:e,value:n})},removeAttributeById:async function(t,e){await o.Z.remove(`notes/${t}/attributes/${e}`)},isAffecting:function(t,e){if(!e||!t)return!1;const n=a.default.notes[t.noteId];if(!n)return!1;const i=[e,...e.getNotesToInheritAttributesFrom()];for(const t of i)if(t.noteId===n.noteId)return!0;if(this.isInheritable)for(const t of i)if(t.hasAncestor(n.noteId,!0))return!0;return!1}};var S,E;(S=window).jQueryBridget=function(t,e){var n=Array.prototype.slice,i=t.console,o=void 0===i?function(){}:function(t){i.error(t)};function s(i,s,r){(r=r||e||t.jQuery)&&(s.prototype.option||(s.prototype.option=function(t){r.isPlainObject(t)&&(this.options=r.extend(!0,this.options,t))}),r.fn[i]=function(t){return"string"==typeof t?function(t,e,n){var s,a=`$().${i}("${e}")`;return t.each((function(t,d){var l=r.data(d,i);if(l){var c=l[e];if(c&&"_"!=e.charAt(0)){var h=c.apply(l,n);s=void 0===s?h:s}else o(`${a} is not a valid method`)}else o(`${i} not initialized. Cannot call methods, i.e. ${a}`)})),void 0!==s?s:t}(this,t,n.call(arguments,1)):(function(t,e){t.each((function(t,n){var o=r.data(n,i);o?(o.option(e),o._init()):(o=new s(n,e),r.data(n,i,o))}))}(this,t),this)},a(r))}function a(t){!t||t&&t.bridget||(t.bridget=s)}return a(e||t.jQuery),s}(S,S.jQuery),window.getSize=function(){function t(t){var e=parseFloat(t);return-1==t.indexOf("%")&&!isNaN(e)&&e}var e="undefined"==typeof console?function(){}:function(t){console.error(t)},n=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],i=n.length;function o(t){var n=getComputedStyle(t);return n||e(`Style returned ${n}. Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1`),n}var s,a=!1;function r(){if(!a){a=!0;var e=document.createElement("div");e.style.width="200px",e.style.padding="1px 2px 3px 4px",e.style.borderStyle="solid",e.style.borderWidth="1px 2px 3px 4px",e.style.boxSizing="border-box";var n=document.body||document.documentElement;n.appendChild(e);var i=o(e);d.isBoxSizeOuter=s=200==t(i.width),n.removeChild(e)}}function d(e){if(r(),"string"==typeof e&&(e=document.querySelector(e)),e&&"object"==typeof e&&e.nodeType){var a=o(e);if("none"==a.display)return function(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0;e<i;e++)t[n[e]]=0;return t}();var d={};d.width=e.offsetWidth,d.height=e.offsetHeight;for(var l=d.isBorderBox="border-box"==a.boxSizing,c=0;c<i;c++){var h=n[c],p=a[h],u=parseFloat(p);d[h]=isNaN(u)?0:u}var g=d.paddingLeft+d.paddingRight,m=d.paddingTop+d.paddingBottom,b=d.marginLeft+d.marginRight,f=d.marginTop+d.marginBottom,w=d.borderLeftWidth+d.borderRightWidth,v=d.borderTopWidth+d.borderBottomWidth,x=l&&s,y=t(a.width);!1!==y&&(d.width=y+(x?0:g+w));var $=t(a.height);return!1!==$&&(d.height=$+(x?0:m+v)),d.innerWidth=d.width-(g+w),d.innerHeight=d.height-(m+v),d.outerWidth=d.width+b,d.outerHeight=d.height+f,d}}return d}(),("undefined"!=typeof window?window:void 0).EvEmitter=function(){function t(){}var e=t.prototype;return e.on=function(t,e){if(t&&e){var n=this._events=this._events||{},i=n[t]=n[t]||[];return-1==i.indexOf(e)&&i.push(e),this}},e.once=function(t,e){if(t&&e){this.on(t,e);var n=this._onceEvents=this._onceEvents||{};return(n[t]=n[t]||{})[e]=!0,this}},e.off=function(t,e){var n=this._events&&this._events[t];if(n&&n.length){var i=n.indexOf(e);return-1!=i&&n.splice(i,1),this}},e.emitEvent=function(t,e){var n=this._events&&this._events[t];if(n&&n.length){n=n.slice(0),e=e||[];for(var i=this._onceEvents&&this._onceEvents[t],o=0;o<n.length;o++){var s=n[o];i&&i[s]&&(this.off(t,s),delete i[s]),s.apply(this,e)}return this}},e.allOff=function(){delete this._events,delete this._onceEvents},t}(),function(t,e){t.Unipointer=function(t,e){function n(){}var i=n.prototype=Object.create(e.prototype);i.bindStartEvent=function(t){this._bindStartEvent(t,!0)},i.unbindStartEvent=function(t){this._bindStartEvent(t,!1)},i._bindStartEvent=function(e,n){var i=(n=void 0===n||n)?"addEventListener":"removeEventListener",o="mousedown";t.PointerEvent?o="pointerdown":"ontouchstart"in t&&(o="touchstart"),e[i](o,this)},i.handleEvent=function(t){var e=`on${t.type}`;this[e]&&this[e](t)},i.getTouch=function(t){for(var e=0;e<t.length;e++){var n=t[e];if(n.identifier==this.pointerIdentifier)return n}},i.onmousedown=function(t){var e=t.button;e&&0!==e&&1!==e||this._pointerDown(t,t)},i.ontouchstart=function(t){this._pointerDown(t,t.changedTouches[0])},i.onpointerdown=function(t){this._pointerDown(t,t)},i._pointerDown=function(t,e){t.button||this.isPointerDown||(this.isPointerDown=!0,this.pointerIdentifier=void 0!==e.pointerId?e.pointerId:e.identifier,this.pointerDown(t,e))},i.pointerDown=function(t,e){this._bindPostStartEvents(t),this.emitEvent("pointerDown",[t,e])};var o={mousedown:["mousemove","mouseup"],touchstart:["touchmove","touchend","touchcancel"],pointerdown:["pointermove","pointerup","pointercancel"]};return i._bindPostStartEvents=function(e){if(e){var n=o[e.type];n.forEach((function(e){t.addEventListener(e,this)}),this),this._boundPointerEvents=n}},i._unbindPostStartEvents=function(){this._boundPointerEvents&&(this._boundPointerEvents.forEach((function(e){t.removeEventListener(e,this)}),this),delete this._boundPointerEvents)},i.onmousemove=function(t){this._pointerMove(t,t)},i.onpointermove=function(t){t.pointerId==this.pointerIdentifier&&this._pointerMove(t,t)},i.ontouchmove=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerMove(t,e)},i._pointerMove=function(t,e){this.pointerMove(t,e)},i.pointerMove=function(t,e){this.emitEvent("pointerMove",[t,e])},i.onmouseup=function(t){this._pointerUp(t,t)},i.onpointerup=function(t){t.pointerId==this.pointerIdentifier&&this._pointerUp(t,t)},i.ontouchend=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerUp(t,e)},i._pointerUp=function(t,e){this._pointerDone(),this.pointerUp(t,e)},i.pointerUp=function(t,e){this.emitEvent("pointerUp",[t,e])},i._pointerDone=function(){this._pointerReset(),this._unbindPostStartEvents(),this.pointerDone()},i._pointerReset=function(){this.isPointerDown=!1,delete this.pointerIdentifier},i.pointerDone=function(){},i.onpointercancel=function(t){t.pointerId==this.pointerIdentifier&&this._pointerCancel(t,t)},i.ontouchcancel=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerCancel(t,e)},i._pointerCancel=function(t,e){this._pointerDone(),this.pointerCancel(t,e)},i.pointerCancel=function(t,e){this.emitEvent("pointerCancel",[t,e])},n.getPointerPoint=function(t){return{x:t.pageX,y:t.pageY}},n}(t,t.EvEmitter)}(window),function(t,e){t.Unidragger=function(t,e){function n(){}var i=n.prototype=Object.create(e.prototype);i.bindHandles=function(){this._bindHandles(!0)},i.unbindHandles=function(){this._bindHandles(!1)},i._bindHandles=function(e){for(var n=(e=void 0===e||e)?"addEventListener":"removeEventListener",i=e?this._touchActionValue:"",o=0;o<this.handles.length;o++){var s=this.handles[o];this._bindStartEvent(s,e),s[n]("click",this),t.PointerEvent&&(s.style.touchAction=i)}},i._touchActionValue="none",i.pointerDown=function(t,e){this.okayPointerDown(t)&&(this.pointerDownPointer=e,t.preventDefault(),this.pointerDownBlur(),this._bindPostStartEvents(t),this.emitEvent("pointerDown",[t,e]))};var o={TEXTAREA:!0,INPUT:!0,SELECT:!0,OPTION:!0},s={radio:!0,checkbox:!0,button:!0,submit:!0,image:!0,file:!0};return i.okayPointerDown=function(t){var e=o[t.target.nodeName],n=s[t.target.type],i=!e||n;return i||this._pointerReset(),i},i.pointerDownBlur=function(){var t=document.activeElement;t&&t.blur&&t!=document.body&&t.blur()},i.pointerMove=function(t,e){var n=this._dragPointerMove(t,e);this.emitEvent("pointerMove",[t,e,n]),this._dragMove(t,e,n)},i._dragPointerMove=function(t,e){var n={x:e.pageX-this.pointerDownPointer.pageX,y:e.pageY-this.pointerDownPointer.pageY};return!this.isDragging&&this.hasDragStarted(n)&&this._dragStart(t,e),n},i.hasDragStarted=function(t){return Math.abs(t.x)>3||Math.abs(t.y)>3},i.pointerUp=function(t,e){this.emitEvent("pointerUp",[t,e]),this._dragPointerUp(t,e)},i._dragPointerUp=function(t,e){this.isDragging?this._dragEnd(t,e):this._staticClick(t,e)},i._dragStart=function(t,e){this.isDragging=!0,this.isPreventingClicks=!0,this.dragStart(t,e)},i.dragStart=function(t,e){this.emitEvent("dragStart",[t,e])},i._dragMove=function(t,e,n){this.isDragging&&this.dragMove(t,e,n)},i.dragMove=function(t,e,n){t.preventDefault(),this.emitEvent("dragMove",[t,e,n])},i._dragEnd=function(t,e){this.isDragging=!1,setTimeout(function(){delete this.isPreventingClicks}.bind(this)),this.dragEnd(t,e)},i.dragEnd=function(t,e){this.emitEvent("dragEnd",[t,e])},i.onclick=function(t){this.isPreventingClicks&&t.preventDefault()},i._staticClick=function(t,e){this.isIgnoringMouseUp&&"mouseup"==t.type||(this.staticClick(t,e),"mouseup"!=t.type&&(this.isIgnoringMouseUp=!0,setTimeout(function(){delete this.isIgnoringMouseUp}.bind(this),400)))},i.staticClick=function(t,e){this.emitEvent("staticClick",[t,e])},n.getPointerPoint=e.getPointerPoint,n}(t,t.Unipointer)}(window),(E=window).Draggabilly=function(t,e,n){function i(t,e){for(var n in e)t[n]=e[n];return t}var o=t.jQuery;function s(t,e){this.element="string"==typeof t?document.querySelector(t):t,o&&(this.$element=o(this.element)),this.options=i({},this.constructor.defaults),this.option(e),this._create()}var a=s.prototype=Object.create(n.prototype);s.defaults={},a.option=function(t){i(this.options,t)};var r={relative:!0,absolute:!0,fixed:!0};function d(t,e,n){return n=n||"round",e?Math[n](t/e)*e:t}return a._create=function(){this.position={},this._getPosition(),this.startPoint={x:0,y:0},this.dragPoint={x:0,y:0},this.startPosition=i({},this.position);var t=getComputedStyle(this.element);r[t.position]||(this.element.style.position="relative"),this.on("pointerMove",this.onPointerMove),this.on("pointerUp",this.onPointerUp),this.enable(),this.setHandles()},a.setHandles=function(){this.handles=this.options.handle?this.element.querySelectorAll(this.options.handle):[this.element],this.bindHandles()},a.dispatchEvent=function(t,e,n){var i=[e].concat(n);this.emitEvent(t,i),this.dispatchJQueryEvent(t,e,n)},a.dispatchJQueryEvent=function(e,n,i){var o=t.jQuery;if(o&&this.$element){var s=o.Event(n);s.type=e,this.$element.trigger(s,i)}},a._getPosition=function(){var t=getComputedStyle(this.element),e=this._getPositionCoord(t.left,"width"),n=this._getPositionCoord(t.top,"height");this.position.x=isNaN(e)?0:e,this.position.y=isNaN(n)?0:n,this._addTransformPosition(t)},a._getPositionCoord=function(t,n){if(-1!=t.indexOf("%")){var i=e(this.element.parentNode);return i?parseFloat(t)/100*i[n]:0}return parseInt(t,10)},a._addTransformPosition=function(t){var e=t.transform;if(0===e.indexOf("matrix")){var n=e.split(","),i=0===e.indexOf("matrix3d")?12:4,o=parseInt(n[i],10),s=parseInt(n[i+1],10);this.position.x+=o,this.position.y+=s}},a.onPointerDown=function(t,e){this.element.classList.add("is-pointer-down"),this.dispatchJQueryEvent("pointerDown",t,[e])},a.pointerDown=function(t,e){this.okayPointerDown(t)&&this.isEnabled?(this.pointerDownPointer={pageX:e.pageX,pageY:e.pageY},t.preventDefault(),this.pointerDownBlur(),this._bindPostStartEvents(t),this.element.classList.add("is-pointer-down"),this.dispatchEvent("pointerDown",t,[e])):this._pointerReset()},a.dragStart=function(t,e){this.isEnabled&&(this._getPosition(),this.measureContainment(),this.startPosition.x=this.position.x,this.startPosition.y=this.position.y,this.setLeftTop(),this.dragPoint.x=0,this.dragPoint.y=0,this.element.classList.add("is-dragging"),this.dispatchEvent("dragStart",t,[e]),this.animate())},a.measureContainment=function(){var t=this.getContainer();if(t){var n=e(this.element),i=e(t),o=this.element.getBoundingClientRect(),s=t.getBoundingClientRect(),a=i.borderLeftWidth+i.borderRightWidth,r=i.borderTopWidth+i.borderBottomWidth,d=this.relativeStartPosition={x:o.left-(s.left+i.borderLeftWidth),y:o.top-(s.top+i.borderTopWidth)};this.containSize={width:i.width-a-d.x-n.width,height:i.height-r-d.y-n.height}}},a.getContainer=function(){var t=this.options.containment;if(t)return t instanceof HTMLElement?t:"string"==typeof t?document.querySelector(t):this.element.parentNode},a.onPointerMove=function(t,e,n){this.dispatchJQueryEvent("pointerMove",t,[e,n])},a.dragMove=function(t,e,n){if(this.isEnabled){var i=n.x,o=n.y,s=this.options.grid,a=s&&s[0],r=s&&s[1];i=d(i,a),o=d(o,r),i=this.containDrag("x",i,a),o=this.containDrag("y",o,r),i="y"==this.options.axis?0:i,o="x"==this.options.axis?0:o,this.position.x=this.startPosition.x+i,this.position.y=this.startPosition.y+o,this.dragPoint.x=i,this.dragPoint.y=o,this.dispatchEvent("dragMove",t,[e,n])}},a.containDrag=function(t,e,n){if(!this.options.containment)return e;var i="x"==t?"width":"height",o=d(-this.relativeStartPosition[t],n,"ceil"),s=this.containSize[i];return s=d(s,n,"floor"),Math.max(o,Math.min(s,e))},a.onPointerUp=function(t,e){this.element.classList.remove("is-pointer-down"),this.dispatchJQueryEvent("pointerUp",t,[e])},a.dragEnd=function(t,e){this.isEnabled&&(this.element.style.transform="",this.setLeftTop(),this.element.classList.remove("is-dragging"),this.dispatchEvent("dragEnd",t,[e]))},a.animate=function(){if(this.isDragging){this.positionDrag();var t=this;requestAnimationFrame((function(){t.animate()}))}},a.setLeftTop=function(){this.element.style.left=`${this.position.x}px`,this.element.style.top=`${this.position.y}px`},a.positionDrag=function(){this.element.style.transform=`translate3d( ${this.dragPoint.x}px, ${this.dragPoint.y}px, 0)`},a.staticClick=function(t,e){this.dispatchEvent("staticClick",t,[e])},a.setPosition=function(t,e){this.position.x=t,this.position.y=e,this.setLeftTop()},a.enable=function(){this.isEnabled=!0},a.disable=function(){this.isEnabled=!1,this.isDragging&&this.dragEnd()},a.destroy=function(){this.disable(),this.element.style.transform="",this.element.style.left="",this.element.style.top="",this.element.style.position="",this.unbindHandles(),this.$element&&this.$element.removeData("draggabilly")},a._init=function(){},o&&o.bridget&&o.bridget("draggabilly",s),s}(E,E.getSize,E.Unidragger);const A=window.Draggabilly;class R extends v.Z{doRender(){this.$widget=$('\n<div class="tab-row-widget">\n    <style>\n    .tab-row-widget {\n        box-sizing: border-box;\n        position: relative;\n        width: 100%;\n        background: var(--main-background-color);\n        overflow: hidden;\n    }\n    \n    .tab-row-widget * {\n        box-sizing: inherit;\n        font: inherit;\n    }\n    \n    .tab-row-widget .tab-row-widget-container {\n        box-sizing: border-box;\n        position: relative;\n        width: 100%;\n        height: 100%;\n    }\n    \n    .tab-row-widget .note-tab {\n        position: absolute;\n        left: 0;\n        width: 240px;\n        border: 0;\n        margin: 0;\n        z-index: 1;\n        pointer-events: none;\n    }\n    \n    .note-new-tab {\n        position: absolute;\n        left: 0;\n        width: 36px;\n        height: 36px;\n        padding: 1px;\n        border: 0;\n        margin: 0;\n        z-index: 1;\n        text-align: center;\n        font-size: 24px;\n        cursor: pointer;\n        box-sizing: border-box;\n    }\n    \n    .note-new-tab:hover {\n        background-color: var(--accented-background-color);\n        border-radius: var(--button-border-radius);\n    }\n    \n    .tab-row-filler {\n        box-sizing: border-box;\n        -webkit-app-region: drag;\n        position: absolute;\n        left: 0;\n        height: 100%;\n    }\n        \n    .tab-row-widget .note-tab[active] {\n        z-index: 5;\n    }\n    \n    .tab-row-widget .note-tab,\n    .tab-row-widget .note-tab * {\n        user-select: none;\n        cursor: default;\n    }\n    \n    .tab-row-widget .note-tab.note-tab-was-just-added {\n        top: 10px;\n        animation: note-tab-was-just-added 120ms forwards ease-in-out;\n    }\n    \n    .tab-row-widget .note-tab .note-tab-wrapper {\n        position: absolute;\n        display: flex;\n        align-items: center;\n        top: 0;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        height: 36px;\n        padding: 7px 5px 7px 11px;\n        border-radius: 8px;\n        overflow: hidden;\n        pointer-events: all;\n        color: var(--inactive-tab-text-color);\n        background-color: var(--inactive-tab-background-color);\n    }\n    \n    .tab-row-widget .note-tab[active] .note-tab-wrapper {\n        font-weight: bold;\n        color: var(--active-tab-text-color);\n        background-color : var(--active-tab-background-color);\n    }\n    \n    .tab-row-widget .note-tab[is-mini] .note-tab-wrapper {\n        padding-left: 2px;\n        padding-right: 2px;\n    }\n    \n    .tab-row-widget .note-tab .note-tab-title {\n        flex: 1;\n        vertical-align: top;\n        overflow: hidden;\n        white-space: nowrap;\n    }\n    \n    .tab-row-widget .note-tab .note-tab-icon {\n        position: relative;\n        top: -1px;\n        padding-right: 3px;\n    }\n    \n    .tab-row-widget .note-tab[is-small] .note-tab-title {\n        margin-left: 0;\n    }\n    \n    .tab-row-widget .note-tab .note-tab-drag-handle {\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        right: 0;\n        left: 0;\n    }\n    \n    .tab-row-widget .note-tab .note-tab-close {\n        flex: 0 0 22px;\n        border-radius: 50%;\n        z-index: 100;\n        width: 22px;\n        height: 22px;\n        cursor: pointer;\n        text-align: center;\n    }\n    \n    .tab-row-widget .note-tab:hover .note-tab-wrapper {\n        background-color: var(--inactive-tab-hover-background-color);\n    }\n    \n    .tab-row-widget .note-tab[active]:hover .note-tab-wrapper {\n        background-color: var(--active-tab-hover-background-color);\n    }\n    \n    .tab-row-widget .note-tab .note-tab-close:hover {\n        background-color: var(--hover-item-background-color);\n        color: var(--hover-item-text-color);\n    }\n    \n    .tab-row-widget .note-tab[is-smaller] .note-tab-close {\n        margin-left: auto;\n    }\n    .tab-row-widget .note-tab[is-mini]:not([active]) .note-tab-close {\n        display: none;\n    }\n    .tab-row-widget .note-tab[is-mini][active] .note-tab-close {\n        margin-left: auto;\n        margin-right: auto;\n    }\n    @-moz-keyframes note-tab-was-just-added {\n        to {\n            top: 0;\n        }\n    }\n    @-webkit-keyframes note-tab-was-just-added {\n        to {\n            top: 0;\n        }\n    }\n    @-o-keyframes note-tab-was-just-added {\n        to {\n            top: 0;\n        }\n    }\n    @keyframes note-tab-was-just-added {\n        to {\n            top: 0;\n        }\n    }\n    .tab-row-widget.tab-row-widget-is-sorting .note-tab:not(.note-tab-is-dragging),\n    .tab-row-widget:not(.tab-row-widget-is-sorting) .note-tab.note-tab-was-just-dragged {\n        transition: transform 120ms ease-in-out;\n    }\n    </style>\n\n    <div class="tab-row-widget-container"></div>\n</div>'),this.draggabillies=[],this.setupStyle(),this.setupEvents(),this.setupDraggabilly(),this.setupNewButton(),this.setupFiller(),this.layoutTabs(),this.setVisibility(),this.$widget.on("contextmenu",".note-tab",(t=>{t.preventDefault();const e=$(t.target).closest(".note-tab").attr("data-ntx-id");f.Z.show({x:t.pageX,y:t.pageY,items:[{title:"关闭",command:"closeTab",uiIcon:"bx bx-x"},{title:"关闭其它标签页",command:"closeOtherTabs",uiIcon:"bx bx-x"},{title:"关闭所有标签页",command:"closeAllTabs",uiIcon:"bx bx-x"},{title:"把标签页移动到新窗口",command:"moveTabToNewWindow",uiIcon:"bx bx-window-open"}],selectMenuItemHandler:({command:t})=>{this.triggerCommand(t,{ntxId:e})}})}))}setupStyle(){this.$style=$("<style>"),this.$widget.append(this.$style)}setupEvents(){new ResizeObserver((t=>{this.cleanUpPreviouslyDraggedTabs(),this.layoutTabs()})).observe(this.$widget[0]),this.tabEls.forEach((t=>this.setTabCloseEvent(t)))}setVisibility(){this.$widget.show()}get tabEls(){return Array.prototype.slice.call(this.$widget.find(".note-tab"))}get $tabContainer(){return this.$widget.find(".tab-row-widget-container")}get tabWidths(){const t=this.tabEls.length,e=this.$tabContainer[0].clientWidth-32-50,n=5*(t-1),i=(e-n)/t,o=Math.max(24,Math.min(240,i)),s=Math.floor(o),a=[];let r=e-(s*t+n);for(let e=0;e<t;e+=1){const t=s<240&&r>0?1:0;a.push(s+t),r>0&&(r-=1)}return this.$filler&&this.$filler.css("width",`${r+50}px`),a}getTabPositions(){const t=[];let e=5;return this.tabWidths.forEach((n=>{t.push(e),e+=n+5})),e-=5,{tabPositions:t,newTabPosition:e,fillerPosition:e+32}}layoutTabs(){const t=this.tabWidths;this.tabEls.forEach(((e,n)=>{const i=t[n];e.style.width=`${i}px`,e.removeAttribute("is-small"),e.removeAttribute("is-smaller"),e.removeAttribute("is-mini"),i<84&&e.setAttribute("is-small",""),i<60&&e.setAttribute("is-smaller",""),i<48&&e.setAttribute("is-mini","")}));let e="";const{tabPositions:n,newTabPosition:i,fillerPosition:o}=this.getTabPositions();n.forEach(((t,n)=>{e+=`.note-tab:nth-child(${n+1}) { transform: translate3d(${t}px, 0, 0)} `})),e+=`.note-new-tab { transform: translate3d(${i}px, 0, 0) } `,e+=`.tab-row-filler { transform: translate3d(${o}px, 0, 0) } `,this.$style.html(e)}addTab(t){const e=$('\n<div class="note-tab">\n  <div class="note-tab-wrapper">\n    <div class="note-tab-drag-handle"></div>\n    <div class="note-tab-icon"></div>\n    <div class="note-tab-title"></div>\n    <div class="note-tab-close bx bx-x" title="关闭标签" data-trigger-command="closeActiveTab"></div>\n  </div>\n</div>').attr("data-ntx-id",t);k.default.updateDisplayedShortcuts(e),e.addClass("note-tab-was-just-added"),setTimeout((()=>e.removeClass("note-tab-was-just-added")),500),this.$newTab.before(e),this.setVisibility(),this.setTabCloseEvent(e),this.updateTitle(e,"新标签页"),this.cleanUpPreviouslyDraggedTabs(),this.layoutTabs(),this.setupDraggabilly()}closeActiveTabCommand({$el:e}){const n=e.closest(".note-tab").attr("data-ntx-id");t.default.tabManager.removeNoteContext(n)}setTabCloseEvent(e){e.on("mousedown",(n=>{if(2===n.which)return t.default.tabManager.removeNoteContext(e.attr("data-ntx-id")),!0}))}get activeTabEl(){return this.$widget.find(".note-tab[active]")[0]}activeContextChangedEvent(){let e=t.default.tabManager.getActiveContext();if(!e)return;e.mainNtxId&&(e=t.default.tabManager.getNoteContextById(e.mainNtxId));const n=this.getTabById(e.ntxId)[0],i=this.activeTabEl;i!==n&&(i&&i.removeAttribute("active"),n&&n.setAttribute("active",""))}newNoteContextCreatedEvent({noteContext:t}){t.mainNtxId||this.addTab(t.ntxId)}removeTab(t){const e=this.getTabById(t)[0];e&&(e.parentNode.removeChild(e),this.cleanUpPreviouslyDraggedTabs(),this.layoutTabs(),this.setupDraggabilly(),this.setVisibility())}getNtxIdsInOrder(){return this.tabEls.map((t=>t.getAttribute("data-ntx-id")))}updateTitle(t,e){t.attr("title",e),t.find(".note-tab-title").text(e)}getTabById(t){return this.$widget.find(`[data-ntx-id='${t}']`)}getTabId(t){return t.attr("data-ntx-id")}noteContextRemovedEvent({ntxIds:t}){for(const e of t)this.removeTab(e)}cleanUpPreviouslyDraggedTabs(){this.tabEls.forEach((t=>t.classList.remove("note-tab-was-just-dragged")))}setupDraggabilly(){const e=this.tabEls,{tabPositions:n}=this.getTabPositions();this.isDragging&&(this.isDragging=!1,this.$widget.removeClass("tab-row-widget-is-sorting"),this.draggabillyDragging.element.classList.remove("note-tab-is-dragging"),this.draggabillyDragging.element.style.transform="",this.draggabillyDragging.dragEnd(),this.draggabillyDragging.isDragging=!1,this.draggabillyDragging.positionDrag=t=>{},this.draggabillyDragging.destroy(),this.draggabillyDragging=null),this.draggabillies.forEach((t=>t.destroy())),e.forEach(((e,i)=>{const o=n[i],s=new A(e,{axis:"x",handle:".note-tab-drag-handle",containment:this.$tabContainer[0]});this.draggabillies.push(s),s.on("pointerDown",(n=>{t.default.tabManager.activateNoteContext(e.getAttribute("data-ntx-id"))})),s.on("dragStart",(t=>{this.isDragging=!0,this.draggabillyDragging=s,e.classList.add("note-tab-is-dragging"),this.$widget.addClass("tab-row-widget-is-sorting")})),s.on("dragEnd",(t=>{this.isDragging=!1;const n=parseFloat(e.style.left);e.style.transform="translate3d(0, 0, 0)",requestAnimationFrame((t=>{e.style.left="0",e.style.transform=`translate3d(${n}px, 0, 0)`,requestAnimationFrame((t=>{e.classList.remove("note-tab-is-dragging"),this.$widget.removeClass("tab-row-widget-is-sorting"),e.classList.add("note-tab-was-just-dragged"),requestAnimationFrame((t=>{e.style.transform="",this.layoutTabs(),this.setupDraggabilly()}))}))}))})),s.on("dragMove",((t,i,s)=>{const a=this.tabEls,r=a.indexOf(e),d=o+s.x,l=this.closest(d,n),c=Math.max(0,Math.min(a.length,l));r!==c&&this.animateTabMove(e,r,c),Math.abs(s.y)>100&&this.triggerCommand("moveTabToNewWindow",{ntxId:this.getTabId($(e))})}))}))}animateTabMove(t,e,n){if(n<e)t.parentNode.insertBefore(t,this.tabEls[n]);else{const e=this.tabEls[n+1]||this.$newTab[0];t.parentNode.insertBefore(t,e)}this.triggerEvent("tabReorder",{ntxIdsInOrder:this.getNtxIdsInOrder()}),this.layoutTabs()}setupNewButton(){this.$newTab=$('<div class="note-new-tab" data-trigger-command="openNewTab" title="添加新标签">+</div>'),this.$tabContainer.append(this.$newTab)}setupFiller(){this.$filler=$('<div class="tab-row-filler"></div>'),this.$tabContainer.append(this.$filler)}closest(t,e){let n=1/0,i=-1;return e.forEach(((e,o)=>{Math.abs(t-e)<n&&(n=Math.abs(t-e),i=o)})),i}noteSwitchedAndActivatedEvent({noteContext:t}){this.activeContextChangedEvent(),this.updateTabById(t.mainNtxId||t.ntxId)}noteSwitchedEvent({noteContext:t}){this.updateTabById(t.mainNtxId||t.ntxId)}noteContextReorderEvent({oldMainNtxId:t,newMainNtxId:e}){t&&e&&(this.getTabById(t).attr("data-ntx-id",e),this.updateTabById(e))}contextsReopenedEvent({mainNtxId:t,tabPosition:e}){if(void 0===t||void 0===e)return;const n=this.getTabById(t)[0];n.parentNode.insertBefore(n,this.tabEls[e])}updateTabById(e){const n=this.getTabById(e),i=t.default.tabManager.getNoteContextById(e);this.updateTab(n,i)}async updateTab(t,n){if(!t.length)return;for(const e of Array.from(t[0].classList))"note-tab"!==e&&t.removeClass(e);if(n){const e=a.default.getNoteFromCache(n.hoistedNoteId);e?(t.find(".note-tab-icon").removeClass().addClass("note-tab-icon").addClass(e.getWorkspaceIconClass()),t.find(".note-tab-wrapper").css("background",e.getWorkspaceTabBackgroundColor())):t.find(".note-tab-wrapper").removeAttr("style")}const{note:i}=n;if(!i)return void this.updateTitle(t,"新标签页");const o=await n.getNavigationTitle();this.updateTitle(t,o),t.addClass(i.getCssClass()),t.addClass(e.default.getNoteTypeClass(i.type)),t.addClass(e.default.getMimeTypeClass(i.mime))}async entitiesReloadedEvent({loadResults:e}){for(const n of t.default.tabManager.noteContexts)if(n.noteId&&(e.isNoteReloaded(n.noteId)||e.getAttributeRows().find((t=>["workspace","workspaceIconClass","workspaceTabBackgroundColor"].includes(t.name)&&T.isAffecting(t,n.note))))){const t=this.getTabById(n.ntxId);this.updateTab(t,n)}}frocaReloadedEvent(){for(const e of t.default.tabManager.noteContexts){const t=this.getTabById(e.ntxId);this.updateTab(t,e)}}hoistedNoteChangedEvent({ntxId:e}){const n=this.getTabById(e);if(n){const i=t.default.tabManager.getNoteContextById(e);this.updateTab(n,i)}}}class P extends v.Z{doRender(){if(!e.default.isElectron()||m.Z.is("nativeTitleBarVisible"))return this.$widget=$("<div>");this.$widget=$('\n<div class="title-bar-buttons">\n    <style>\n    .title-bar-buttons {\n        flex-shrink: 0;\n    }\n\n    .title-bar-buttons div button {\n        border: none !important;\n        border-radius: 0;\n        background: none !important;\n        font-size: 150%;\n        height: 40px;\n        width: 40px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n    \n    .title-bar-buttons div:hover button {\n        background-color: var(--accented-background-color) !important;\n    }\n\n    .title-bar-buttons div {\n        display: inline-block;\n        height: 40px;\n        width: 40px;\n    }\n    .title-bar-buttons .top-btn.active{\n        background-color:var(--accented-background-color);\n    }\n    </style>\n\n    \x3c!-- divs act as a hitbox for the buttons, making them clickable on corners --\x3e\n    <div class="top-btn" title="保持此窗口置顶. "><button class="btn bx bx-pin"></button></div>\n    <div class="minimize-btn"><button class="btn bx bx-minus"></button></div>\n    <div class="maximize-btn"><button class="btn bx bx-checkbox"></button></div>\n    <div class="close-btn"><button class="btn bx bx-x"></button></div>\n</div>'),this.contentSized();const t=this.$widget.find(".top-btn"),n=this.$widget.find(".minimize-btn"),i=this.$widget.find(".maximize-btn"),o=this.$widget.find(".close-btn");setTimeout((()=>{const n=e.default.dynamicRequire("@electron/remote");n.BrowserWindow.getFocusedWindow()?.isAlwaysOnTop()&&t.addClass("active")}),1e3),t.on("click",(()=>{t.trigger("blur");const n=e.default.dynamicRequire("@electron/remote").BrowserWindow.getFocusedWindow();n.isAlwaysOnTop()?(n.setAlwaysOnTop(!1),t.removeClass("active")):(n.setAlwaysOnTop(!0),t.addClass("active"))})),n.on("click",(()=>{n.trigger("blur"),e.default.dynamicRequire("@electron/remote").BrowserWindow.getFocusedWindow().minimize()})),i.on("click",(()=>{i.trigger("blur");const t=e.default.dynamicRequire("@electron/remote").BrowserWindow.getFocusedWindow();t.isMaximized()?t.unmaximize():t.maximize()})),o.on("click",(()=>{o.trigger("blur"),e.default.dynamicRequire("@electron/remote").BrowserWindow.getFocusedWindow().close()}))}}class _ extends y{constructor(){super("column"),this.id("left-pane"),this.css("height","100%"),this.collapsible()}isEnabled(){return super.isEnabled()&&m.Z.is("leftPaneVisible")}entitiesReloadedEvent({loadResults:e}){if(e.isOptionReloaded("leftPaneVisible")){const e=this.isEnabled();if(this.toggleInt(e),e)this.triggerEvent("focusTree");else{const e=t.default.tabManager.getActiveContext();this.triggerEvent("focusOnDetail",{ntxId:e.ntxId})}}}}var M=__webpack_require__(3968),Z=__webpack_require__(8481),L=__webpack_require__(8159),D=__webpack_require__(4264),B=__webpack_require__(2503),O=__webpack_require__(6885),W=__webpack_require__(1035),F=__webpack_require__(7336),z=__webpack_require__(7844),H=__webpack_require__(2040),U=__webpack_require__(3152);const j=100,q=t=>t.stopPropagation();class V extends B.Z{constructor(){super(),this.treeName="main"}doRender(){this.$widget=$('\n<div class="tree-wrapper">\n    <style>\n    .tree-wrapper {\n        flex-grow: 1;\n        flex-shrink: 1;\n        flex-basis: 60%;\n        font-family: var(--tree-font-family);\n        font-size: var(--tree-font-size);\n        position: relative;\n        min-height: 0;\n    }\n    \n    .tree {\n        height: 100%;\n        overflow: auto;\n        padding-bottom: 35px;\n        padding-top: 5px;\n    }\n    \n    .tree-actions {\n        background-color: var(--launcher-pane-background-color);\n        z-index: 100;\n        position: absolute;\n        bottom: 0;\n        display: flex;\n        align-items: flex-end;\n        justify-content: flex-end;\n        right: 17px;\n        border-radius: 7px;\n        border: 1px solid var(--main-border-color);\n    }\n    \n    button.tree-floating-button {\n        margin: 1px;\n        font-size: 1.5em;\n        padding: 5px;\n        max-height: 34px;\n        color: var(--launcher-pane-text-color);\n        background-color: var(--button-background-color);\n        border-radius: var(--button-border-radius);\n        border: 1px solid transparent;\n    }\n    \n    button.tree-floating-button:hover {\n        border: 1px solid var(--button-border-color);\n    }\n    \n    .collapse-tree-button {\n        right: 100px;\n    }\n    \n    .scroll-to-active-note-button {\n        right: 55px;\n    }\n    \n    .tree-settings-button {\n        right: 10px;\n    }\n    \n    .tree-settings-popup {\n        display: none; \n        position: absolute; \n        background-color: var(--accented-background-color); \n        border: 1px solid var(--main-border-color); \n        padding: 20px; \n        z-index: 1000;\n        width: 340px; \n        border-radius: 10px;\n    }\n    \n    .tree .hidden-node-is-hidden {\n        display: none;\n    }\n    </style>\n    \n    <div class="tree"></div>\n    \n    <div class="tree-actions">\n        <button class="tree-floating-button bx bx-layer-minus collapse-tree-button" \n                title="折叠笔记树" \n                data-trigger-command="collapseTree"></button>\n        \n        <button class="tree-floating-button bx bx-crosshair scroll-to-active-note-button" \n                title="滚动到活动笔记" \n                data-trigger-command="scrollToActiveNote"></button>\n        \n        <button class="tree-floating-button bx bx-cog tree-settings-button" \n                title="树设置"></button>\n    </div>\n    \n    \n    <div class="tree-settings-popup">\n        <div class="form-check">\n            <label class="form-check-label">\n                <input class="form-check-input hide-archived-notes" type="checkbox" value="">\n            \n                隐藏已归档笔记\n            </label>\n        </div>\n        <div class="form-check">\n            <label class="form-check-label">\n                <input class="form-check-input auto-collapse-note-tree" type="checkbox" value="">\n                \n                自动折叠笔记\n                <span class="bx bx-info-circle" \n                      title="一段时间不活跃的笔记会被折叠."></span>\n            </label>\n        </div>\n    \n        <br/>\n    \n        <button class="btn btn-sm btn-primary save-tree-settings-button" type="submit">保存并应用修改</button>\n    </div>\n</div>\n'),this.$tree=this.$widget.find(".tree"),this.$treeActions=this.$widget.find(".tree-actions"),this.$tree.on("mousedown",".unhoist-button",(()=>M.Z.unhoist())),this.$tree.on("mousedown",".refresh-search-button",(t=>this.refreshSearch(t))),this.$tree.on("mousedown",".add-note-button",(t=>{const e=$.ui.fancytree.getNode(t),n=Z.Z.getNotePath(e);s.Z.createNote(n,{isProtected:e.data.isProtected})})),this.$tree.on("mousedown",".enter-workspace-button",(t=>{const e=$.ui.fancytree.getNode(t);this.triggerCommand("hoistNote",{noteId:e.data.noteId})})),this.$tree.on("mousedown",".fancytree-title",(e=>{if(2===e.which){const n=$.ui.fancytree.getNode(e),i=Z.Z.getNotePath(n);i&&t.default.tabManager.openTabWithNoteWithHoisting(i),e.stopPropagation(),e.preventDefault()}})),this.$treeSettingsPopup=this.$widget.find(".tree-settings-popup"),this.$hideArchivedNotesCheckbox=this.$treeSettingsPopup.find(".hide-archived-notes"),this.$autoCollapseNoteTree=this.$treeSettingsPopup.find(".auto-collapse-note-tree"),this.$treeSettingsButton=this.$widget.find(".tree-settings-button"),this.$treeSettingsButton.on("click",(t=>{if(this.$treeSettingsPopup.is(":visible"))return void this.$treeSettingsPopup.hide();this.$hideArchivedNotesCheckbox.prop("checked",this.hideArchivedNotes),this.$autoCollapseNoteTree.prop("checked",this.autoCollapseNoteTree);const e=this.$treeActions[0].offsetTop-this.$treeSettingsPopup.outerHeight(),n=Math.max(0,this.$treeActions[0].offsetLeft-this.$treeSettingsPopup.outerWidth()+this.$treeActions.outerWidth());return this.$treeSettingsPopup.css({top:e,left:n}).show(),!1})),this.$treeSettingsPopup.on("click",(t=>{t.stopPropagation()})),$(document).on("click",(()=>this.$treeSettingsPopup.hide())),this.$saveTreeSettingsButton=this.$treeSettingsPopup.find(".save-tree-settings-button"),this.$saveTreeSettingsButton.on("click",(async()=>{await this.setHideArchivedNotes(this.$hideArchivedNotesCheckbox.prop("checked")),await this.setAutoCollapseNoteTree(this.$autoCollapseNoteTree.prop("checked")),this.$treeSettingsPopup.hide(),this.reloadTreeFromCache()})),Promise.all([m.Z.initializedPromise,a.default.initializedPromise]).then((()=>this.initFancyTree())),this.setupNoteTitleTooltip()}setupNoteTitleTooltip(){this.$tree.on("mouseenter","span.fancytree-title",(t=>{t.currentTarget.title=((t,e)=>{const n=t.offset(),i=n.top+t.outerHeight(!0),o=n.left+t.outerWidth(!0),s=e.offset(),a=s.top+e.outerHeight(!0),r=s.left+e.outerWidth(!0);return i>a&&n.top<s.top&&o>r&&n.left<s.left})(this.$tree,$(t.currentTarget))?"":t.currentTarget.innerText}))}get hideArchivedNotes(){return m.Z.is(`hideArchivedNotes_${this.treeName}`)}async setHideArchivedNotes(t){await m.Z.save(`hideArchivedNotes_${this.treeName}`,t.toString())}get autoCollapseNoteTree(){return m.Z.is("autoCollapseNoteTree")}async setAutoCollapseNoteTree(t){await m.Z.save("autoCollapseNoteTree",t.toString())}initFancyTree(){const n=[this.prepareRootNode()];this.$tree.fancytree({titlesTabbable:!0,keyboard:!0,extensions:["dnd5","clones","filter"],source:n,scrollOfs:{top:100,bottom:100},scrollParent:this.$tree,minExpandLevel:2,click:(n,i)=>{this.activityDetected();const o=i.targetType,s=i.node;if(s.isSelected()&&"icon"===o)return this.triggerCommand("openBulkActionsDialog",{selectedOrActiveNoteIds:this.getSelectedOrActiveNoteIds(s)}),!1;if("title"===o||"icon"===o){if(n.shiftKey){const a=this.getActiveNode();if(a.getParent()!==s.getParent())return;function r(t,e){for(let n=0;t&&t!==e&&n<1e4;n++)t.setSelected(!0),t=t.getNextSibling();e.setSelected()}this.clearSelectedNodes(),a.getIndex()<s.getIndex()?r(a,s):r(s,a),s.setFocus(!0)}else if(!e.default.isMac()&&n.ctrlKey||e.default.isMac()&&n.metaKey){const d=Z.Z.getNotePath(s);t.default.tabManager.openTabWithNoteWithHoisting(d)}else n.altKey?(s.setSelected(!s.isSelected()),s.setFocus(!0)):i.node.isActive()?this.tree.reactivate(!0):s.setActive();return!1}},beforeActivate:(t,{node:e})=>"_hidden"===M.Z.getHoistedNoteId()?"root"!==e.data.noteId:"_hidden"!==e.data.noteId,activate:async(e,n)=>{f.Z.hide(),this.clearSelectedNodes();const i=Z.Z.getNotePath(n.node),o=t.default.tabManager.getActiveContext();await o.setNote(i)},expand:(t,e)=>this.setExpanded(e.node.data.branchId,!0),collapse:(t,e)=>this.setExpanded(e.node.data.branchId,!1),filter:{counter:!1,mode:"hide",autoExpand:!0},dnd5:{autoExpandMS:600,preventLazyParents:!1,dragStart:(t,e)=>{if(["root","_hidden","_lbRoot","_lbAvailableLaunchers","_lbVisibleLaunchers"].includes(t.data.noteId)||t.data.noteId.startsWith("_options"))return!1;const n=this.getSelectedOrActiveNodes(t).map((t=>({noteId:t.data.noteId,branchId:t.data.branchId,title:t.title})));return 1===n.length?z.Z.createLink(n[0].noteId,{referenceLink:!0,autoConvertToImage:!0}).then((t=>e.dataTransfer.setData("text/html",t[0].outerHTML))):Promise.all(n.map((t=>z.Z.createLink(t.noteId,{referenceLink:!0,autoConvertToImage:!0})))).then((t=>{const n=$("<ul>").append(...t.map((t=>$("<li>").append(t))));e.dataTransfer.setData("text/html",n[0].outerHTML)})),e.dataTransfer.setData("text",JSON.stringify(n)),!0},dragEnter:(t,e)=>"search"!==t.data.noteType&&"_lbRoot"!==t.data.noteId&&!t.data.noteId.startsWith("_options")&&("launcher"===t.data.noteType?["before","after"]:!["_lbAvailableLaunchers","_lbVisibleLaunchers"].includes(t.data.noteId)||["over"]),dragDrop:async(t,e)=>{if("over"===e.hitMode&&"search"===t.data.noteType||["after","before"].includes(e.hitMode)&&(t.data.noteId===M.Z.getHoistedNoteId()||"search"===t.getParent().data.noteType))return void await U.Z.info("笔记不允许移动到这个地方.");const n=e.dataTransfer;if(n&&n.files&&n.files.length>0){const e=[...n.files];(await __webpack_require__.e(274).then(__webpack_require__.bind(__webpack_require__,1274))).uploadFiles("notes",t.data.noteId,e,{safeImport:!0,shrinkImages:!0,textImportedAsText:!0,codeImportedAsCode:!0,explodeArchives:!0,replaceUnderscoresWithSpaces:!0})}else{const i=n.getData("text");let o=null;try{o=JSON.parse(i)}catch(t){return void logError(`Cannot parse JSON '${i}' into notes for drop`)}const s=o.map((t=>t.branchId));if("before"===e.hitMode)L.Z.moveBeforeBranch(s,t.data.branchId);else if("after"===e.hitMode)L.Z.moveAfterBranch(s,t.data.branchId);else{if("over"!==e.hitMode)throw new Error(`Unknown hitMode '${e.hitMode}'`);L.Z.moveToParentNote(s,t.data.branchId)}}}},lazyLoad:(t,e)=>{const{noteId:n,noteType:i}=e.node.data;if("search"===i){if(Z.Z.getNotePath(e.node.getParent()).includes(n))return void(e.result=[]);e.result=a.default.loadSearchNote(n).then((()=>{const t=a.default.getNoteFromCache(n);let e=t.getChildNoteIds();return"search"===t.type&&e.length>j&&(e=e.slice(0,j)),a.default.getNotes(e)})).then((()=>{const t=a.default.getNoteFromCache(n);return this.prepareChildren(t)}))}else e.result=a.default.loadSubTree(n).then((t=>this.prepareChildren(t)))},clones:{highlightActiveClones:!0},enhanceTitle:async function(e,n){const i=n.node;if(!i.data.noteId)return;const o=await a.default.getNote(i.data.noteId,!0);if(!o)return;const s=t.default.tabManager.getActiveContext(),r=$(i.span);r.find(".tree-item-button").remove();const d=s&&s.hoistedNoteId===o.noteId&&"root"!==o.noteId;if(o.hasLabel("workspace")&&!d){const t=$('<span class="tree-item-button enter-workspace-button bx bx-door-open" title="提升这个笔记(工作区)"></span>').on("click",q);r.append(t)}if("search"===o.type){const t=$('<span class="tree-item-button refresh-search-button bx bx-refresh" title="刷新保存的搜索结果"></span>').on("click",q);r.append(t)}if(!["search","launcher"].includes(o.type)&&!o.isOptions()&&!o.isLaunchBarConfig()){const t=$('<span class="tree-item-button add-note-button bx bx-plus" title="创建子笔记"></span>').on("click",q);r.append(t)}if(d){const t=$('<span class="tree-item-button unhoist-button bx bx-door-open" title="取消提升"></span>').on("click",q);r.append(t)}},loadChildren:(t,e)=>{e.node.visit((t=>{t.isUndefined()&&t.isExpanded()&&t.load()}))},select:(t,{node:e})=>{"root"===M.Z.getHoistedNoteId()&&"_hidden"===e.data.noteId&&e.isSelected()?e.setSelected(!1):$(e.span).find(".fancytree-custom-icon").attr("title",e.isSelected()?"对选定的笔记应用批量动作":"")}}),e.default.isMobile()||this.getHotKeys().then((t=>{for(const e in t){const n=t[e];$(this.tree.$container).on("keydown",null,e,(t=>{const e=this.tree.getActiveNode();return n(e,t)}))}})),this.$tree.on("contextmenu",".fancytree-node",(t=>{const e=$.ui.fancytree.getNode(t);return a.default.getNoteFromCache(e.data.noteId).isLaunchBarConfig()?__webpack_require__.e(475).then(__webpack_require__.bind(__webpack_require__,2475)).then((({default:n})=>{new n(this,e).show(t)})):__webpack_require__.e(494).then(__webpack_require__.bind(__webpack_require__,1494)).then((({default:n})=>{new n(this,e).show(t)})),!1})),this.tree=$.ui.fancytree.getTree(this.$tree)}prepareRootNode(){return this.prepareNode(a.default.getBranch("none_root"))}prepareChildren(t){e.default.assertArguments(t);const n=[],i=this.hideArchivedNotes;let o=t.getFilteredChildBranches();"search"===t.type&&o.length>j&&(o=o.slice(0,j));for(const t of o){if(i&&t.getNoteFromCache().hasLabel("archived"))continue;const e=this.prepareNode(t);n.push(e)}return n}async updateNode(t){const n=a.default.getNoteFromCache(t.data.noteId),i=a.default.getBranch(t.data.branchId);if(!n)return void console.log(`Node update not possible because note '${t.data.noteId}' was not found.`);if(!i)return void console.log(`Node update not possible because branch '${t.data.branchId}' was not found.`);const o=`${i.prefix?`${i.prefix} - `:""}${n.title}`;t.data.isProtected=n.isProtected,t.data.noteType=n.type,t.folder=n.isFolder(),t.icon=n.getIcon(),t.extraClasses=this.getExtraClasses(n),t.title=e.default.escapeHtml(o),t.isExpanded()!==i.isExpanded&&await t.setExpanded(i.isExpanded,{noEvents:!0,noAnimation:!0}),t.renderTitle()}prepareNode(t,n=!1){const i=t.getNoteFromCache();if(!i)throw new Error(`Branch '${t.branchId}' has no child note '${t.noteId}'`);const o=`${t.prefix?`${t.prefix} - `:""}${i.title}`,s=i.isFolder(),a={noteId:i.noteId,parentNoteId:t.parentNoteId,branchId:t.branchId,isProtected:i.isProtected,noteType:i.type,title:e.default.escapeHtml(o),extraClasses:this.getExtraClasses(i),icon:i.getIcon(s),refKey:i.noteId,lazy:!0,folder:s,expanded:t.isExpanded&&"search"!==i.type,key:e.default.randomString(12)};return s&&a.expanded&&!n&&(a.children=this.prepareChildren(i)),a}getExtraClasses(t){e.default.assertArguments(t);const n=[];t.isProtected&&n.push("protected"),t.isShared()&&n.push("shared"),t.getParentNoteIds().length>1&&t.getParentNoteIds().map((t=>a.default.notes[t])).filter((t=>!!t)).filter((t=>!["_share","_lbBookmarks"].includes(t.noteId)&&"search"!==t.type)).length>1&&n.push("multiple-parents");const i=t.getCssClass();i&&n.push(i),n.push(e.default.getNoteTypeClass(t.type)),t.mime&&n.push(e.default.getMimeTypeClass(t.mime)),t.hasLabel("archived")&&n.push("archived");const o=t.getColorClass();return o&&n.push(o),n.join(" ")}getSelectedNodes(t=!1){return this.tree.getSelectedNodes(t)}getSelectedOrActiveNodes(t=null){const e=this.getSelectedNodes(!0);return t&&!e.find((e=>e.key===t.key))&&e.push(t),0===e.length&&e.push(this.getActiveNode()),e.filter((t=>"root"!==M.Z.getHoistedNoteId()||"_hidden"!==t.data.noteId))}async setExpandedStatusForSubtree(t,e){if(!t){const e=M.Z.getHoistedNoteId();t=this.getNodesByNoteId(e)[0]}const{branchIds:n}=await o.Z.put(`branches/${t.data.branchId}/expanded-subtree/${e?1:0}`);a.default.getBranches(n,!0).forEach((t=>t.isExpanded=!!e)),await this.batchUpdate((async()=>{await t.load(!0),t.data.noteId!==M.Z.getHoistedNoteId()&&await t.setExpanded(e,{noEvents:!0,noAnimation:!0})})),await this.filterHoistedBranch(!0)}async expandTree(t=null){await this.setExpandedStatusForSubtree(t,!0)}async collapseTree(t=null){await this.setExpandedStatusForSubtree(t,!1)}collapseTreeEvent(){this.collapseTree()}getActiveNode(){return this.tree.getActiveNode()}getFocusedNode(){return this.tree.getFocusNode()}clearSelectedNodes(){for(const t of this.getSelectedNodes())t.setSelected(!1)}async scrollToActiveNoteEvent(){const e=t.default.tabManager.getActiveContext();if(e&&e.notePath){this.tree.$container.focus(),this.tree.setFocus(!0);const t=await this.expandToNote(e.notePath);t&&(await t.makeVisible({scrollIntoView:!0}),t.setActive(!0,{noEvents:!0,noFocus:!1}))}}async focusTreeEvent(){this.tree.$container.focus(),this.tree.setFocus(!0)}async getNodeFromPath(t,n=!1,i=!0){e.default.assertArguments(t);let o=this.getNodesByNoteId("root")[0],s=await Z.Z.resolveNotePathToSegments(t,this.hoistedNoteId,i);if(s){s=s.slice(1);for(const e of s)if(o){o.isLoaded()||await o.load(),n&&(o.isExpanded()||await o.setExpanded(!0,{noAnimation:!0}),a.default.getBranch(o.data.branchId).isExpanded=!0),await this.updateNode(o);let s=this.findChildNode(o,e);if(!s&&(await o.load(!0),s=this.findChildNode(o,e),!s)){if(i){const n=await a.default.getNote(e);n&&"image"===n.type||D.Z.logError(`Can't find node for child node of noteId=${e} for parent of noteId=${o.data.noteId} and hoistedNoteId=${M.Z.getHoistedNoteId()}, requested path is ${t}`)}return}o=s}return o}i&&logError("找不到运行路径, 对应notePath为:",t)}findChildNode(t,e){return t.getChildren().find((t=>t.data.noteId===e))}async expandToNote(t,e=!0){return this.getNodeFromPath(t,!0,e)}getNodesByBranch(t){return e.default.assertArguments(t),this.getNodesByNoteId(t.noteId).filter((e=>e.data.branchId===t.branchId))}getNodesByNoteId(t){e.default.assertArguments(t);return this.tree.getNodesByRef(t)||[]}isEnabled(){return!!this.noteContext}async refresh(){this.toggleInt(this.isEnabled()),this.$treeSettingsPopup.hide(),this.activityDetected();const t=this.getActiveNode(),e=this.noteContext?.notePath&&(!Z.Z.isNotePathInHiddenSubtree(this.noteContext.notePath)||await M.Z.isHoistedInHiddenSubtree())&&await this.getNodeFromPath(this.noteContext.notePath);if(e!==t){let n=!1;t&&(n=t.hasFocus(),t.setActive(!1),t.setFocus(!1)),e&&(e.isVisible()||await this.expandToNote(this.noteContext.notePath),e.setActive(!0,{noEvents:!0,noFocus:!n}),e.makeVisible({scrollIntoView:!0}))}this.filterHoistedBranch(!1)}async refreshSearch(t){const e=$.ui.fancytree.getNode(t);e.load(!0),e.setExpanded(!0,{noAnimation:!0}),O.default.showMessage("保存的搜索结果已刷新.")}async batchUpdate(t){try{this.tree.enableUpdate(!1),await t()}finally{this.tree.enableUpdate(!0)}}activityDetected(){this.autoCollapseTimeoutId&&clearTimeout(this.autoCollapseTimeoutId),this.autoCollapseTimeoutId=setTimeout((()=>{if(!this.autoCollapseNoteTree)return;const e=new Set(t.default.tabManager.getNoteContexts().map((t=>t.notePathArray)).flat());let n=!0;this.tree.getRootNode().visit((t=>{t.isExpanded()&&!e.has(t.data.noteId)&&(t.setExpanded(!1),n&&(O.default.showMessage("自动折叠一段时间不活跃的笔记..."),n=!1))}),!1),this.filterHoistedBranch(!0)}),6e5)}async entitiesReloadedEvent({loadResults:t}){if(this.activityDetected(),t.isEmptyForTree())return;const e=this.#e(),n={noteIdsToUpdate:new Set,noteIdsToReload:new Set};this.#n(t.getAttributeRows(),n);const{movedActiveNode:i,parentsOfAddedNodes:o}=await this.#i(t.getBranchRows(),n);for(const e of t.getNoteIds())n.noteIdsToUpdate.add(e);await this.#o(n,t),await this.#s(e,i,o),(n.noteIdsToReload.size>0||n.noteIdsToUpdate.size>0)&&this.filterHoistedBranch(!0)}#n(t,e){for(const n of t){const t=["iconClass","cssClass","workspace","workspaceIconClass","color"];if("label"===n.type&&t.includes(n.name))n.isInheritable?e.noteIdsToReload.add(n.noteId):e.noteIdsToUpdate.add(n.noteId);else if("label"===n.type&&"archived"===n.name){const t=a.default.getNoteFromCache(n.noteId);if(t)for(const n of t.getParentNotes())e.noteIdsToReload.add(n.noteId)}else if("relation"!==n.type||"template"!==n.name&&"inherit"!==n.name){if("relation"===n.type&&"imageLink"===n.name){const t=a.default.getNoteFromCache(n.noteId);t&&t.getChildNoteIds().includes(n.value)&&e.noteIdsToReload.add(n.noteId)}}else e.noteIdsToReload.add(n.noteId)}}async#i(t,e){const n=t.every((t=>!!t.isDeleted));let i=null,o=[];for(const s of t)if("_share"===s.parentNoteId?e.noteIdsToReload.add(s.noteId):e.noteIdsToUpdate.add(s.noteId),s.isDeleted)for(const t of this.getNodesByBranch(s)){if(t.isActive())if(n){const e=t.getNextSibling()||t.getPrevSibling()||t.getParent();e&&e.setActive(!0,{noEvents:!0,noFocus:!0})}else i=t;t.getParent()&&t.remove(),e.noteIdsToUpdate.add(s.parentNoteId)}else for(const t of this.getNodesByNoteId(s.parentNoteId)){if(o.push(t),t.isFolder()&&!t.isLoaded())continue;const n=await a.default.getNote(s.noteId),i=a.default.getBranch(s.branchId),r=(t.getChildren()||[]).find((t=>t.data.noteId===s.noteId));r?s.isExpanded!==r.isExpanded()&&e.noteIdsToReload.add(i.noteId):(t.addChildren([this.prepareNode(i,!0)]),i.isExpanded&&n.hasChildren()&&e.noteIdsToReload.add(i.noteId),this.sortChildren(t),e.noteIdsToUpdate.add(s.parentNoteId))}return{movedActiveNode:i,parentsOfAddedNodes:o}}async#o(t,e){await this.batchUpdate((async()=>{for(const e of t.noteIdsToReload)for(const n of this.getNodesByNoteId(e))await n.load(!0),t.noteIdsToUpdate.add(e);for(const t of e.getNoteReorderings())for(const e of this.getNodesByNoteId(t))e.isLoaded()&&this.sortChildren(e)}));for(const e of t.noteIdsToUpdate)for(const t of this.getNodesByNoteId(e))await this.updateNode(t)}#e(){const t={activeNotePath:null,activeNodeFocused:null,nextNotePath:null},e=this.getActiveNode();t.activeNodeFocused=e?.hasFocus(),t.activeNotePath=e?Z.Z.getNotePath(e):null;const n=e?e.getNextSibling()||e.getPrevSibling()||e.getParent():null;return t.nextNotePath=n?Z.Z.getNotePath(n):null,t}async#s(e,n,i){if(n)for(const t of i){const i=(t.getChildren()||[]).find((t=>t.data.noteId===n.data.noteId));if(i){e.activeNotePath=Z.Z.getNotePath(i);break}}if(!e.activeNotePath)return;let o=await this.expandToNote(e.activeNotePath,!1);if(o&&o.data.noteId!==Z.Z.getNoteIdFromUrl(e.activeNotePath)){const t=this.getNodesByNoteId(Z.Z.getNoteIdFromUrl(e.activeNotePath));o=1===t.length?t[0]:null}o?(e.activeNodeFocused&&this.tree.$container.focus(),await o.setActive(!0,{noEvents:!0,noFocus:!e.activeNodeFocused})):(o=await this.expandToNote(e.nextNotePath,!1),o&&t.default.tabManager.getActiveContext().setNote(e.nextNotePath).then((()=>{const t=this.getActiveNode();t&&e.activeNodeFocused&&t.setFocus(!0)})))}sortChildren(t){t.sortChildren(((t,e)=>{const n=a.default.branches[t.data.branchId],i=a.default.branches[e.data.branchId];return n&&i?n.notePosition-i.notePosition:0}))}setExpanded(t,n){e.default.assertArguments(t);const i=a.default.getBranch(t,!0);if(!i)return t&&t.startsWith("virt")?void 0:void logError(`找不到 branch=${t}`);i.isExpanded=n,o.Z.put(`branches/${t}/expanded/${n?1:0}`)}async reloadTreeFromCache(){const t=this.getActiveNode(),e=null!==t?Z.Z.getNotePath(t):null,n=this.prepareRootNode();if(await this.batchUpdate((async()=>{await this.tree.reload([n])})),await this.filterHoistedBranch(!0),e){const t=await this.getNodeFromPath(e,!0);t&&await t.setActive(!0,{noEvents:!0,noFocus:!0})}}async hoistedNoteChangedEvent({ntxId:t}){this.isNoteContext(t)&&await this.filterHoistedBranch(!0)}async filterHoistedBranch(t=!1){if(!this.noteContext)return;const e=await Z.Z.resolveNotePath(this.noteContext.hoistedNoteId);(t||this.lastFilteredHoistedNotePath!==e)&&(this.lastFilteredHoistedNotePath=e,await this.getNodeFromPath(e),"root"===this.noteContext.hoistedNoteId?(this.tree.clearFilter(),this.toggleHiddenNode(!1)):(this.tree.filterBranches((t=>t.data.noteId===this.noteContext.hoistedNoteId&&Z.Z.getNotePath(t)===e)),this.toggleHiddenNode(!0)))}toggleHiddenNode(t){const e=this.getNodesByNoteId("_hidden")[0];$(e.li).toggleClass("hidden-node-is-hidden",!t)}frocaReloadedEvent(){this.reloadTreeFromCache()}async getHotKeys(){const t=await k.default.getActionsForScope("note-tree"),e={};for(const n of t)for(const t of n.effectiveShortcuts)e[p.Z.normalizeShortcut(t)]=t=>{const e=Z.Z.getNotePath(t);return this.triggerCommand(n.actionName,{node:t,notePath:e}),!1};return e}getSelectedOrActiveBranchIds(t){return this.getSelectedOrActiveNodes(t).map((t=>t.data.branchId))}getSelectedOrActiveNoteIds(t){return this.getSelectedOrActiveNodes(t).map((t=>t.data.noteId))}async deleteNotesCommand({node:t}){const e=this.getSelectedOrActiveBranchIds(t).filter((t=>!t.startsWith("virt-")));e.length&&(await L.Z.deleteNotes(e),this.clearSelectedNodes())}canBeMovedUpOrDown(t){if("root"===t.data.noteId)return!1;const e=a.default.getNoteFromCache(t.getParent().data.noteId);return!e?.hasLabel("sorted")}moveNoteUpCommand({node:t}){if(!this.canBeMovedUpOrDown(t))return;const e=t.getPrevSibling();null!==e&&L.Z.moveBeforeBranch([t.data.branchId],e.data.branchId)}moveNoteDownCommand({node:t}){if(!this.canBeMovedUpOrDown(t))return;const e=t.getNextSibling();null!==e&&L.Z.moveAfterBranch([t.data.branchId],e.data.branchId)}moveNoteUpInHierarchyCommand({node:t}){L.Z.moveNodeUpInHierarchy(t)}moveNoteDownInHierarchyCommand({node:t}){const e=t.getPrevSibling();null!==e&&L.Z.moveToParentNote([t.data.branchId],e.data.branchId)}addNoteAboveToSelectionCommand(){const t=this.getFocusedNode();if(!t)return;t.isActive()&&t.setSelected(!0);const e=t.getPrevSibling();e&&(e.setActive(!0,{noEvents:!0}),e.isSelected()&&t.setSelected(!1),e.setSelected(!0))}addNoteBelowToSelectionCommand(){const t=this.getFocusedNode();if(!t)return;t.isActive()&&t.setSelected(!0);const e=t.getNextSibling();e&&(e.setActive(!0,{noEvents:!0}),e.isSelected()&&t.setSelected(!1),e.setSelected(!0))}expandSubtreeCommand({node:t}){this.expandTree(t)}collapseSubtreeCommand({node:t}){this.collapseTree(t)}async recentChangesInSubtreeCommand({node:t}){this.triggerCommand("showRecentChanges",{ancestorNoteId:t.data.noteId})}selectAllNotesInParentCommand({node:t}){for(const e of t.getParent().getChildren())e.setSelected(!0)}copyNotesToClipboardCommand({node:t}){W.Z.copy(this.getSelectedOrActiveBranchIds(t))}cutNotesToClipboardCommand({node:t}){W.Z.cut(this.getSelectedOrActiveBranchIds(t))}pasteNotesFromClipboardCommand({node:t}){W.Z.pasteInto(t.data.branchId)}pasteNotesAfterFromClipboardCommand({node:t}){W.Z.pasteAfter(t.data.branchId)}async exportNoteCommand({node:t}){const e=Z.Z.getNotePath(t);this.triggerCommand("showExportDialog",{notePath:e,defaultType:"subtree"})}async importIntoNoteCommand({node:t}){this.triggerCommand("showImportDialog",{noteId:t.data.noteId})}editNoteTitleCommand({node:e}){t.default.triggerCommand("focusOnTitle")}protectSubtreeCommand({node:t}){F.Z.protectNote(t.data.noteId,!0,!0)}unprotectSubtreeCommand({node:t}){F.Z.protectNote(t.data.noteId,!1,!0)}duplicateSubtreeCommand({node:t}){const e=this.getSelectedOrActiveNodes(t);for(const t of e){if(a.default.getNoteFromCache(t.data.noteId).isProtected&&!H.Z.isProtectedSessionAvailable())continue;const e=a.default.getBranch(t.data.branchId);s.Z.duplicateSubtree(t.data.noteId,e.parentNoteId)}}moveShortcutToVisibleCommand({node:t,selectedOrActiveBranchIds:e}){L.Z.moveToParentNote(e,"_lbVisibleLaunchers")}moveShortcutToAvailableCommand({node:t,selectedOrActiveBranchIds:e}){L.Z.moveToParentNote(e,"_lbAvailableLaunchers")}addNoteLauncherCommand({node:t}){this.createLauncherNote(t,"note")}addScriptLauncherCommand({node:t}){this.createLauncherNote(t,"script")}addWidgetLauncherCommand({node:t}){this.createLauncherNote(t,"customWidget")}addSpacerLauncherCommand({node:t}){this.createLauncherNote(t,"spacer")}async createLauncherNote(e,n){const i=await o.Z.post(`special-notes/launchers/${e.data.noteId}/${n}`);i.success||O.default.showError(i.message),await D.Z.waitForMaxKnownEntityChangeId(),t.default.tabManager.getActiveContext().setNote(i.note.noteId)}}var K=__webpack_require__(1902);class J extends B.Z{constructor(){super(),this.spacedUpdate=new K.Z((async()=>{const t=this.$noteTitle.val();H.Z.touchProtectedSessionIfNecessary(this.note),await o.Z.put(`notes/${this.noteId}/title`,{title:t},this.componentId)})),this.deleteNoteOnEscape=!1,t.default.addBeforeUnloadListener(this)}doRender(){this.$widget=$('\n<div class="note-title-widget">\n    <style>\n    .note-title-widget {\n        flex-grow: 1000;\n        height: 100%;\n    }\n    \n    .note-title-widget input.note-title {\n        font-size: 180%;\n        border: 0;\n        min-width: 5em;\n        width: 100%;\n    }\n    \n    .note-title-widget input.note-title.protected {\n        text-shadow: 4px 4px 4px var(--muted-text-color);\n    }\n    </style>\n\n    <input autocomplete="off" value="" placeholder="输入笔记标题..." class="note-title" tabindex="100">\n</div>'),this.$noteTitle=this.$widget.find(".note-title"),this.$noteTitle.on("input",(()=>this.spacedUpdate.scheduleUpdate())),this.$noteTitle.on("blur",(()=>{this.spacedUpdate.updateNowIfNecessary(),this.deleteNoteOnEscape=!1})),p.Z.bindElShortcut(this.$noteTitle,"esc",(()=>{this.deleteNoteOnEscape&&this.noteContext.isActive()&&L.Z.deleteNotes(Object.values(this.noteContext.note.parentToBranch))})),p.Z.bindElShortcut(this.$noteTitle,"return",(()=>{this.triggerCommand("focusOnDetail",{ntxId:this.noteContext.ntxId})}))}async refreshWithNote(t){const e=t.isProtected&&!H.Z.isProtectedSessionAvailable()||["_lbRoot","_lbAvailableLaunchers","_lbVisibleLaunchers"].includes(t.noteId)||"default"!==this.noteContext.viewScope.viewMode;this.$noteTitle.val(e?await this.noteContext.getNavigationTitle():t.title),this.$noteTitle.prop("readonly",e),this.setProtectedStatus(t)}setProtectedStatus(t){this.$noteTitle.toggleClass("protected",!!t.isProtected)}async beforeNoteSwitchEvent({noteContext:t}){this.isNoteContext(t.ntxId)&&await this.spacedUpdate.updateNowIfNecessary()}async beforeNoteContextRemoveEvent({ntxIds:t}){this.isNoteContext(t)&&await this.spacedUpdate.updateNowIfNecessary()}focusOnTitleEvent(){this.noteContext&&this.noteContext.isActive()&&this.$noteTitle.trigger("focus")}focusAndSelectTitleEvent({isNewNote:t}={isNewNote:!1}){this.noteContext&&this.noteContext.isActive()&&(this.$noteTitle.trigger("focus").trigger("select"),this.deleteNoteOnEscape=t)}entitiesReloadedEvent({loadResults:t}){t.isNoteReloaded(this.noteId)&&this.setProtectedStatus(this.note),t.isNoteReloaded(this.noteId,this.componentId)&&this.refresh()}beforeUnloadEvent(){return this.spacedUpdate.isAllSavedAndTriggerUpdate()}}const G=function({$el:t,attributeType:e,open:n}){t.hasClass("aa-input")||(t.autocomplete({appendTo:document.querySelector("body"),hint:!1,openOnFocus:!0,minLength:0,tabAutocomplete:!1},[{displayKey:"name",cache:!1,source:async(t,n)=>{const i="function"==typeof e?e():e;n((await o.Z.get(`attribute-names/?type=${i}&query=${encodeURIComponent(t)}`)).map((t=>({name:t}))))}}]),t.on("autocomplete:opened",(()=>{t.attr("readonly")&&t.autocomplete("close")}))),n&&t.autocomplete("open")},Y=async function({$el:t,open:e,nameCallback:n}){t.hasClass("aa-input")&&t.autocomplete("destroy");const i=n();if(""===i.trim())return;const s=(await o.Z.get(`attribute-values/${encodeURIComponent(i)}`)).map((t=>({value:t})));0!==s.length&&(t.autocomplete({appendTo:document.querySelector("body"),hint:!1,openOnFocus:!1,minLength:0,tabAutocomplete:!1},[{displayKey:"value",cache:!1,source:async function(t,e){t=t.toLowerCase(),e(s.filter((e=>e.value.toLowerCase().includes(t))))}}]),t.on("autocomplete:opened",(()=>{t.attr("readonly")&&t.autocomplete("close")})),e&&t.autocomplete("open"))};var Q=__webpack_require__(3847);const X={label:"标签详情","label-definition":"标签定义详情",relation:"关系详情","relation-definition":"关系定义详情"},tt={label:{disableVersioning:"禁用自动版本管理. 对于很大但是不重要的笔记有用, 比如编写脚本用的JS库文件.",calendarRoot:"把笔记标记为日记的根笔记, 这个标签只能有一个笔记有.",archived:"默认情况下, 带有此标签的笔记不会在搜索结果中(在跳转到, 添加链接等对话框中也不会显示).",excludeFromExport:"笔记(及其子树)不会包含在任何笔记导出中",run:"定义哪个事件脚本应该运行. 可取的值有:\n                <ul>\n                    <li>frontendStartup - 当Trilium前端启动(或刷新)时.</li>\n                    <li>backendStartup - 当Trilium后端启动.</li>\n                    <li>hourly - 每小时一次. 可以通过 <code>runAtHour</code> 标签来指定.</li>\n                    <li>daily - 每天一次</li>\n                </ul>",runOnInstance:"定义应在哪个Trilium实例上运行. 默认是在所有实例上运行.",runAtHour:"定义在什么时候运行. 需要和 <code>#run=hourly</code> 一起使用, 可以同时定义多个来实现一天内多次运行.",disableInclusion:"父级脚本的执行过程中不会包含具有此标签的脚本.",sorted:"使子笔记按标题按字母顺序排序",sortDirection:"ASC升序(默认) 或 DESC降序",sortFoldersFirst:"目录(有子笔记的)在前",top:"将笔记放在其父笔记的顶部(仅适用于排序的父级)",hidePromotedAttributes:"隐藏此笔记中的升级属性",readOnly:"编辑器处于只读模式. 只对文本和代码笔记有效.",autoReadOnlyDisabled:"文本/代码笔记过大时, 可以自动设置为阅读模式. 你可以通过给需要的每个笔记添加这个标签来单独禁用这个功能.",appCss:"标记可以被Trilium加载用来修改Trilium的外观的CSS笔记.",appTheme:"标记可以被作为Trilium主题使用的CSS笔记, 这些笔记可以在Trilium的设置里看到.",cssClass:"这个标签的值会被当作CSS类加到对应的笔记中, 可以被用来单独设置笔记的主题. 这个标签也可以在模板笔记里使用.",iconClass:"这个标签的值作为CSS类添加到笔记上, 用来修改对应笔记的图标. 比如 bx bx-home 会使用 boxicons 相应的图标. 这个标签也可以在模板笔记里使用. ",pageSize:"笔记清单中每页的个数",customRequestHandler:'见 <a href="javascript:" data-help-page="Custom request handler">自定义请求处理器</a>',customResourceProvider:'见 <a href="javascript:" data-help-page="Custom request handler">自定义请求处理器</a>',widget:"将此笔记标记为自定义窗口小部件, 该窗口小部件会被添加到Trilium部件树中",workspace:"将此笔记标记为可简单提升的工作区",workspaceIconClass:"提升此笔记时, 笔记标签页中使用的CSS图标",workspaceTabBackgroundColor:"提升此笔记时, 笔记标签页中使用的CSS颜色",workspaceCalendarRoot:"定义每个工作空间的日历根笔记",workspaceTemplate:"这个笔记会出现在新建笔记时的可用模板选择中, 但是只有在提升笔记中包含这个笔记才有效",searchHome:"新的搜索记录将被创建为该笔记的子笔记",workspaceSearchHome:"当笔记的某些父级笔记被提升时, 新的搜索记录将被创建为该笔记的子笔记",inbox:'新笔记的默认收件箱位置 - 当你使用侧边栏的"新建笔记"按钮, 笔记会被创建为标记有<code>#inbox</code>标签的笔记的子笔记',workspaceInbox:"当笔记的某些父级笔记被提升时,  新笔记的默认收件箱位置",sqlConsoleHome:"SQL控制台笔记的默认位置",bookmarkFolder:"带有此标签的笔记将作为文件夹出现在书签中(允许访问其子笔记)",shareHiddenFromTree:"此笔记在左侧笔记树中隐藏, 但仍可通过其 URL 访问",shareExternalLink:"note will act as a link to an external website in the share tree",shareAlias:"定义一个别名,使用该别名可以在 https://服务器地址/share/[你定义的别名] 下使用该笔记",shareOmitDefaultCss:"默认共享页面 CSS 将被忽略. 当你想自定义样式时请使用这个标签.",shareRoot:"将笔记标记为 /share 访问的首页",shareDescription:"定义需要加入到HTML的meta标签的文字",shareRaw:"笔记会通过原始格式直接展示, 不会通过HTML页面封装",shareDisallowRobotIndexing:"通过 <code>X-Robots-Tag: noindex</code> 请求头来阻止爬虫机器人抓取该笔记",shareCredentials:"需要身份验证才能访问此共享笔记. 值的格式'用户名:密码'. 别忘了设置为可继承来对所有子笔记和图片生效.",shareIndex:"有这个标签的笔记会列出所有分享笔记的根笔记",displayRelations:"显示通过逗号分隔的关联关系. 其它的会被隐藏.",hideRelations:"隐藏通过逗号分隔的关联关系, 而其它的会显示出来.",titleTemplate:'当前笔记所属子笔记的默认标题. 这里的字符会被作为Javascript解析, 因此可以使用 <code>now</code> 和 <code>parentNote</code> 来生成动态标题. 例如:\n                        \n                        <ul>\n                            <li><code>${parentNote.getLabelValue(\'authorName\')}的文学作品</code></li>\n                            <li><code>${now.format(\'YYYY-MM-DD HH:mm:ss\')} 的日志</code></li>\n                        </ul>\n                        \n                        详见 <a href="https://github.com/zadam/trilium/wiki/Default-note-title">wiki</a>. <a href="https://zadam.github.io/trilium/backend_api/Note.html">parentNote</a> 和 <a href="https://day.js.org/docs/en/display/format">now</a> 的API文档.',template:"这个笔记会出现在新建笔记时的可用模板选择中",toc:"<code>#toc</code> or <code>#toc=show</code>将会强制显示目录,<code>#toc=hide</code> 会隐藏它 如果标签不存在, 会遵循全局设置的配置",color:"定义笔记树、链接等中笔记的颜色. 任何有效的CSS颜色值都可以使用, 例如 'red' 或 #a13d5f",keyboardShortcut:"定义立即跳转到此笔记的键盘快捷键.例如: 'ctrl+alt+e'. 更改需要重新加载前端才能生效.",keepCurrentHoisting:"即使该笔记在当前提升的子树中无法显示, 打开此链接也不会更改提升.",executeButton:"执行当前代码笔记的按钮的标题",executeDescription:"与执行按钮一起显示的当前代码笔记的较长描述",excludeFromNoteMap:"具有此标签的笔记将从笔记地图中隐藏",newNotesOnTop:"新笔记将创建在父笔记的顶部, 而不是底部.",hideHighlightWidget:"Hide Hightlight List widget"},relation:{runOnNoteCreation:"在后端创建笔记时执行. Use this relation if you want to run the script for all notes created under a specific subtree. In that case, create it on the subtree root note and make it inheritable. A new note created within the subtree (any depth) will trigger the script.",runOnChildNoteCreation:"executes when new note is created under the note where this relation is defined",runOnNoteTitleChange:"笔记标题修改时执行(还包括笔记创建)",runOnNoteContentChange:"executes when note content is changed (includes note creation as well).",runOnNoteChange:"修改笔记时执行(还包括笔记创建). Does not include content changes",runOnNoteDeletion:"在笔记删除时执行",runOnBranchCreation:"在分支创建时执行. 分支是父笔记和子笔记之间的连接, 会在比如克隆笔记或移动笔记时创建.",runOnBranchChange:"executes when a branch is updated.",runOnBranchDeletion:"在分支删除时执行. 分支是父笔记和子笔记之间的连接, 会在比如移动笔记(旧分支/连接删除)时删除.",runOnAttributeCreation:"executes when new attribute is created for the note which defines this relation",runOnAttributeChange:" executes when the attribute is changed of a note which defines this relation. This is triggered also when the attribute is deleted",template:"note's attributes will be inherited even without a parent-child relationship, note's content and subtree will be added to instance notes if empty. See documentation for details.",inherit:"note's attributes will be inherited even without a parent-child relationship. See template relation for a similar concept. See attribute inheritance in the documentation.",renderNote:'类型为"渲染笔记"的笔记会被作为代码笔记(HTML或脚本)显示, 并且必须指定需要渲染的笔记关系.',widget:"此关系的目标将被执行, 并在侧边栏中显示为小部件",shareCss:"会被注入到分享页面的CSS笔记. CSS笔记必须也在共享笔记的子树范围内. 请考同时使用 'shareHiddenFromTree' 和 'shareOmitDefaultCss' 标签.",shareJs:"会被注入到分享页面的JS笔记. JS笔记必须也在共享笔记的子树范围内. 请考同时使用 'shareHiddenFromTree' 标签.",shareTemplate:"Embedded JavaScript note that will be used as the template for displaying the shared note. Falls back to the default template. Consider using 'shareHiddenFromTree'.",shareFavicon:"设置为共享页面 Favicon 的笔记. 一般把它放到共享笔记的根目录, 同时让它设置为可继承的. Favicon 笔记必须也在共享笔记的子树范围内. 请考虑同时使用 'shareHiddenFromTree' 标签"}};class et extends B.Z{async refresh(){this.hide()}doRender(){this.relatedNotesSpacedUpdate=new K.Z((async()=>this.updateRelatedNotes()),1e3),this.$widget=$('\n<div class="attr-detail">\n    <style>\n        .attr-detail {\n            display: block;\n            background-color: var(--accented-background-color);\n            border: 1px solid var(--main-border-color);\n            border-radius: 4px;\n            z-index: 1000;\n            padding: 15px;\n            position: absolute;\n            width: 500px;\n            max-height: 600px;\n            overflow: auto;\n            box-shadow: 10px 10px 93px -25px black;\n        }\n        \n        .attr-help td {\n            color: var(--muted-text-color);\n            padding: 5px;\n        }\n        \n        .related-notes-list {\n            padding-left: 20px;\n            margin-top: 10px;\n            margin-bottom: 10px;\n        }\n        \n        .attr-edit-table {\n            width: 100%;\n        }\n        \n        .attr-edit-table th {\n            text-align: left;\n        }\n        \n        .attr-edit-table td input {\n            width: 100%;\n        }\n        \n        .close-attr-detail-button {\n            font-size: x-large;\n            cursor: pointer;\n            position: relative;\n            top: -2px;\n        }\n        \n        .attr-save-delete-button-container {\n            display: flex; \n            margin-top: 15px;\n        }\n        \n        .attr-detail input[readonly] {\n            background-color: var(--accented-background-color) !important;\n        }\n    </style>\n\n    <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">\n        <h5 class="attr-detail-title"></h5>\n        \n        <span class="bx bx-x close-attr-detail-button" title="取消修改并关闭"></span>\n    </div>\n\n    <div class="attr-is-owned-by"></div>\n\n    <table class="attr-edit-table">\n        <tr title="属性名称只能由字母数字字符, 冒号和下划线组成">\n            <th>名称:</th>\n            <td><input type="text" class="attr-input-name form-control" /></td>\n        </tr>\n        <tr class="attr-help"></tr>\n        <tr class="attr-row-value">\n            <th>值:</th>\n            <td><input type="text" class="attr-input-value form-control" /></td>\n        </tr>\n        <tr class="attr-row-target-note">\n            <th title="关系是源笔记和目标笔记之间的命名连接.">目标笔记:</th>\n            <td>\n                <div class="input-group">\n                    <input type="text" class="attr-input-target-note form-control" />\n                </div>\n            </td>\n        </tr>\n        <tr class="attr-row-promoted"\n            title="升级的属性在笔记上突出显示.">\n            <th>升级属性:</th>\n            <td><input type="checkbox" class="attr-input-promoted form-control form-control-sm" /></td>\n        </tr>\n        <tr class="attr-row-promoted-alias">\n            <th title="The name to be displayed in the promoted attributes UI.">Alias:</th>\n            <td>\n                <div class="input-group">\n                    <input type="text" class="attr-input-promoted-alias form-control" />\n                </div>\n            </td>\n        </tr>\n        <tr class="attr-row-multiplicity">\n            <th title="多重性定义可以创建多少个相同名称的属性 - 最大值为1或大于1.">多重性:</th>\n            <td>\n                <select class="attr-input-multiplicity form-control">\n                  <option value="single">单值</option>\n                  <option value="multi">多值</option>\n                </select>\n            </td>\n        </tr>\n        <tr class="attr-row-label-type">\n            <th title="标签的类型将帮助Trilium选择合适的界面来输入标签值.">类型:</th>\n            <td>\n                <select class="attr-input-label-type form-control">\n                  <option value="text">文本</option>\n                  <option value="number">数字</option>\n                  <option value="boolean">布尔</option>\n                  <option value="date">日期</option>\n                  <option value="datetime">Date & Time</option>\n                  <option value="url">URL</option>\n                </select>\n            </td>\n        </tr>\n        <tr class="attr-row-number-precision">\n            <th title="值设置界面中可以设置的小数点位数.">精度</th>\n            <td>\n                <div class="input-group">\n                    <input type="number" class="form-control attr-input-number-precision" style="text-align: right">\n                    <div class="input-group-append">\n                        <span class="input-group-text">位数</span>\n                    </div>\n                </div>\n            </td>\n        </tr>\n        <tr class="attr-row-inverse-relation">\n            <th title="可选设置用于定义与此相对的关系. 比如 父-子 关系是互为父子.">逆关系</th>\n            <td>\n                <div class="input-group">\n                    <input type="text" class="attr-input-inverse-relation form-control" />\n                </div>\n            </td>\n        </tr>\n        <tr title="可继承属性将被继承给该树下的所有后代.">\n            <th>可继承</th>\n            <td><input type="checkbox" class="attr-input-inheritable form-control form-control-sm" /></td>\n        </tr>\n    </table>\n\n    <div class="attr-save-delete-button-container">\n        <button class="btn btn-primary btn-sm attr-save-changes-and-close-button" \n            style="flex-grow: 1; margin-right: 20px">\n            保存并关闭 <kbd>Ctrl+回车</kbd></button>\n            \n        <button class="btn btn-secondary btn-sm attr-delete-button">\n            删除</button>\n    </div>\n\n    <div class="related-notes-container">\n        <br/>\n\n        <h5 class="related-notes-tile">其它含有这个标签的笔记</h5>\n        \n        <ul class="related-notes-list"></ul>\n        \n        <div class="related-notes-more-notes"></div>\n    </div>\n</div>'),p.Z.bindElShortcut(this.$widget,"ctrl+return",(()=>this.saveAndClose())),p.Z.bindElShortcut(this.$widget,"esc",(()=>this.cancelAndClose())),this.$title=this.$widget.find(".attr-detail-title"),this.$inputName=this.$widget.find(".attr-input-name"),this.$inputName.on("input",(t=>{t.originalEvent?.isComposing||this.userEditedAttribute()})),this.$inputName.on("change",(()=>this.userEditedAttribute())),this.$inputName.on("autocomplete:closed",(()=>this.userEditedAttribute())),this.$inputName.on("focus",(()=>{G({$el:this.$inputName,attributeType:()=>["relation","relation-definition"].includes(this.attrType)?"relation":"label",open:!0})})),this.$rowValue=this.$widget.find(".attr-row-value"),this.$inputValue=this.$widget.find(".attr-input-value"),this.$inputValue.on("input",(t=>{t.originalEvent?.isComposing||this.userEditedAttribute()})),this.$inputValue.on("change",(()=>this.userEditedAttribute())),this.$inputValue.on("autocomplete:closed",(()=>this.userEditedAttribute())),this.$inputValue.on("focus",(()=>{Y({$el:this.$inputValue,open:!0,nameCallback:()=>this.$inputName.val()})})),this.$rowPromoted=this.$widget.find(".attr-row-promoted"),this.$inputPromoted=this.$widget.find(".attr-input-promoted"),this.$inputPromoted.on("change",(()=>this.userEditedAttribute())),this.$rowPromotedAlias=this.$widget.find(".attr-row-promoted-alias"),this.$inputPromotedAlias=this.$widget.find(".attr-input-promoted-alias"),this.$inputPromotedAlias.on("change",(()=>this.userEditedAttribute())),this.$rowMultiplicity=this.$widget.find(".attr-row-multiplicity"),this.$inputMultiplicity=this.$widget.find(".attr-input-multiplicity"),this.$inputMultiplicity.on("change",(()=>this.userEditedAttribute())),this.$rowLabelType=this.$widget.find(".attr-row-label-type"),this.$inputLabelType=this.$widget.find(".attr-input-label-type"),this.$inputLabelType.on("change",(()=>this.userEditedAttribute())),this.$rowNumberPrecision=this.$widget.find(".attr-row-number-precision"),this.$inputNumberPrecision=this.$widget.find(".attr-input-number-precision"),this.$inputNumberPrecision.on("change",(()=>this.userEditedAttribute())),this.$rowInverseRelation=this.$widget.find(".attr-row-inverse-relation"),this.$inputInverseRelation=this.$widget.find(".attr-input-inverse-relation"),this.$inputInverseRelation.on("input",(t=>{t.originalEvent?.isComposing||this.userEditedAttribute()})),this.$rowTargetNote=this.$widget.find(".attr-row-target-note"),this.$inputTargetNote=this.$widget.find(".attr-input-target-note"),h.initNoteAutocomplete(this.$inputTargetNote,{allowCreatingNotes:!0}).on("autocomplete:noteselected",((t,e,n)=>{if(!e.notePath)return!1;const i=e.notePath.split("/");this.attribute.value=i[i.length-1],this.triggerCommand("updateAttributeList",{attributes:this.allAttributes}),this.updateRelatedNotes()})),this.$inputInheritable=this.$widget.find(".attr-input-inheritable"),this.$inputInheritable.on("change",(()=>this.userEditedAttribute())),this.$closeAttrDetailButton=this.$widget.find(".close-attr-detail-button"),this.$closeAttrDetailButton.on("click",(()=>this.cancelAndClose())),this.$attrIsOwnedBy=this.$widget.find(".attr-is-owned-by"),this.$attrSaveDeleteButtonContainer=this.$widget.find(".attr-save-delete-button-container"),this.$saveAndCloseButton=this.$widget.find(".attr-save-changes-and-close-button"),this.$saveAndCloseButton.on("click",(()=>this.saveAndClose())),this.$deleteButton=this.$widget.find(".attr-delete-button"),this.$deleteButton.on("click",(async()=>{await this.triggerCommand("updateAttributeList",{attributes:this.allAttributes.filter((t=>t!==this.attribute))}),await this.triggerCommand("saveAttributes"),this.hide()})),this.$attrHelp=this.$widget.find(".attr-help"),this.$relatedNotesContainer=this.$widget.find(".related-notes-container"),this.$relatedNotesTitle=this.$relatedNotesContainer.find(".related-notes-tile"),this.$relatedNotesList=this.$relatedNotesContainer.find(".related-notes-list"),this.$relatedNotesMoreNotes=this.$relatedNotesContainer.find(".related-notes-more-notes"),$(window).on("mousedown",(t=>{$(t.target).closest(this.$widget[0]).length||$(t.target).closest(".algolia-autocomplete").length||$(t.target).closest("#context-menu-container").length||this.hide()}))}async showAttributeDetail({allAttributes:t,attribute:n,isOwned:i,x:o,y:s,focus:r}){if(!n)return void this.hide();e.default.saveFocusedElement(),this.attrType=this.getAttrType(n);const d="label-definition"===this.attrType?n.name.substr(6):"relation-definition"===this.attrType?n.name.substr(9):n.name,l=this.attrType.endsWith("-definition")?Q.Z.parse(n.value):{};if(this.$title.text(X[this.attrType]),this.allAttributes=t,this.attribute=n,this.updateRelatedNotes(),this.$attrSaveDeleteButtonContainer.toggle(!!i),i?this.$attrIsOwnedBy.hide():this.$attrIsOwnedBy.show().empty().append("label"===n.type?"Label":"Relation").append(" is owned by note ").append(await z.Z.createLink(n.noteId)),this.$inputName.val(d).attr("readonly",(()=>!i)),this.$rowValue.toggle("label"===this.attrType),this.$rowTargetNote.toggle("relation"===this.attrType),this.$rowPromoted.toggle(["label-definition","relation-definition"].includes(this.attrType)),this.$inputPromoted.prop("checked",!!l.isPromoted).attr("disabled",(()=>!i)),this.$rowPromotedAlias.toggle(!!l.isPromoted),this.$inputPromotedAlias.val(l.promotedAlias).attr("disabled",(()=>!i)),this.$rowMultiplicity.toggle(["label-definition","relation-definition"].includes(this.attrType)),this.$inputMultiplicity.val(l.multiplicity).attr("disabled",(()=>!i)),this.$rowLabelType.toggle("label-definition"===this.attrType),this.$inputLabelType.val(l.labelType).attr("disabled",(()=>!i)),this.$rowNumberPrecision.toggle("label-definition"===this.attrType&&"number"===l.labelType),this.$inputNumberPrecision.val(l.numberPrecision).attr("disabled",(()=>!i)),this.$rowInverseRelation.toggle("relation-definition"===this.attrType),this.$inputInverseRelation.val(l.inverseRelation).attr("disabled",(()=>!i)),"label"===n.type)this.$inputValue.val(n.value).attr("readonly",(()=>!i));else if("relation"===n.type&&(this.$inputTargetNote.attr("readonly",(()=>!i)).val("").setSelectedNotePath(""),n.value)){const t=await a.default.getNote(n.value);t&&this.$inputTargetNote.val(t?t.title:"").setSelectedNotePath(n.value)}this.$inputInheritable.prop("checked",!!n.isInheritable).attr("disabled",(()=>!i)),this.updateHelp(),this.toggleInt(!0);const c=this.parent.$widget.offset(),h=this.getDetailPosition(o,c);this.$widget.css("left",h.left).css("right",h.right).css("top",s-c.top+70).css("max-height",this.$widget.outerHeight()+s>$(window).height()-50?$(window).height()-s-50:1e4),"name"===r&&this.$inputName.trigger("focus").trigger("select")}getDetailPosition(t,e){let n=t-e.left-this.$widget.outerWidth()/2,i="";return n<0?n=10:n+this.$widget.outerWidth()>this.parent.$widget.outerWidth()-10&&(n="",i=10),{left:n,right:i}}async saveAndClose(){await this.triggerCommand("saveAttributes"),this.hide(),e.default.focusSavedElement()}async cancelAndClose(){await this.triggerCommand("reloadAttributes"),this.hide(),e.default.focusSavedElement()}userEditedAttribute(){this.updateAttributeInEditor(),this.updateHelp(),this.relatedNotesSpacedUpdate.scheduleUpdate()}updateHelp(){const t=this.$inputName.val();this.attrType in tt&&t in tt[this.attrType]?this.$attrHelp.empty().append($("<td colspan=2>").append($("<strong>").text(t)).append(" - ").append(tt[this.attrType][t])).show():this.$attrHelp.empty().hide()}async updateRelatedNotes(){let{results:e,count:n}=await o.Z.post("search-related",this.attribute);for(const t of e)t.noteId=t.notePathArray[t.notePathArray.length-1];if(e=e.filter((({noteId:t})=>t!==this.noteId)),0===e.length)this.$relatedNotesContainer.hide();else{this.$relatedNotesContainer.show(),this.$relatedNotesTitle.text(`其它含有${this.attribute.type}名为"${this.attribute.name}"的笔记`),this.$relatedNotesList.empty();const i=e.length<=10?e:e.slice(0,10),o=await a.default.getNotes(i.map((t=>t.noteId))),s=t.default.tabManager.getActiveContext()?.hoistedNoteId;for(const t of o){const e=t.getBestNotePathString(s),n=await z.Z.createLink(e,{showNotePath:!0});this.$relatedNotesList.append($("<li>").append(n))}e.length>10?this.$relatedNotesMoreNotes.show().text(`... and ${n-10} more.`):this.$relatedNotesMoreNotes.hide()}}getAttrType(t){return"label"===t.type?t.name.startsWith("label:")?"label-definition":t.name.startsWith("relation:")?"relation-definition":"label":"relation"===t.type?"relation":void this.$title.text("")}updateAttributeInEditor(){let t=this.$inputName.val();e.default.isValidAttributeName(t)||(t=e.default.filterAttributeName(t),this.$inputName.val(t)),"label-definition"===this.attrType?t=`label:${t}`:"relation-definition"===this.attrType&&(t=`relation:${t}`),this.attribute.name=t,this.attribute.isInheritable=this.$inputInheritable.is(":checked"),this.attrType.endsWith("-definition")?this.attribute.value=this.buildDefinitionValue():"relation"===this.attrType?this.attribute.value=this.$inputTargetNote.getSelectedNoteId():this.attribute.value=this.$inputValue.val(),this.triggerCommand("updateAttributeList",{attributes:this.allAttributes})}buildDefinitionValue(){const t=[];if(this.$inputPromoted.is(":checked")&&(t.push("promoted"),""!==this.$inputPromotedAlias.val()&&t.push(`alias=${this.$inputPromotedAlias.val()}`)),t.push(this.$inputMultiplicity.val()),"label-definition"===this.attrType)t.push(this.$inputLabelType.val()),"number"===this.$inputLabelType.val()&&""!==this.$inputNumberPrecision.val()&&t.push(`precision=${this.$inputNumberPrecision.val()}`);else if("relation-definition"===this.attrType&&this.$inputInverseRelation.val().trim().length>0){const n=this.$inputInverseRelation.val();t.push(`inverse=${e.default.filterAttributeName(n)}`)}return this.$rowNumberPrecision.toggle("label-definition"===this.attrType&&"number"===this.$inputLabelType.val()),this.$rowPromotedAlias.toggle(this.$inputPromoted.is(":checked")),t.join(",")}hide(){this.toggleInt(!1)}createLink(t){return $("<a>",{href:`#root/${t}`,class:"reference-link"})}async noteSwitched(){this.hide()}}function nt(t){t=t.trim();const e=[];let n=!1,i="";function o(t){return["=","*",">","<","!"].includes(t)}function s(){return 0!==i.length&&o(i[i.length-1])}function a(t){""!==i&&(e.push({text:i,startIndex:t-i.length+1,endIndex:t}),i="")}for(let e=0;e<t.length;e++){const r=t[e];if("\\"!==r)if(['"',"'","`"].includes(r))n?n===r?(n=!1,a(e-1)):i+=r:(s()&&a(e-1),n=r);else{if(!n){if(0===i.length&&("#"===r||"~"===r)){i=r;continue}if(" "===r){a(e-1);continue}if(["(",")"].includes(r)){a(e-1),i=r,a(e);continue}if(s()!==o(r)){a(e-1),i+=r;continue}}i+=r}else e+1<t.length?(e++,i+=t[e]):i+=r}return a(t.length-1),e}function it(t){if(0===t.length)throw new Error("属性名称为空, 请输入属性名称");if(!e.default.isValidAttributeName(t))throw new Error(`属性名称 "${t}" 含有不允许的字符, 属性名称只能由字母数字字符组成.`)}function ot(t,e,n=!1){const i=[];function o(n){let{startIndex:i,endIndex:o}=t[n];return i=Math.max(0,i-20),o=Math.min(e.length,o+20),`"${0!==i?"...":""}${e.substr(i,o-i)}${o!==e.length?"...":""}"`}for(let s=0;s<t.length;s++){const{text:a,startIndex:r}=t[s];function d(){return t.length>s+3&&"("===t[s+1].text&&"可继承的"===t[s+2].text&&")"===t[s+3].text&&(s+=3,!0)}if(a.startsWith("#")){const l=a.substr(1);it(l);const c={type:"label",name:l,isInheritable:d(),startIndex:r,endIndex:t[s].endIndex};if(s+1<t.length&&"="===t[s+1].text){if(s+2>=t.length)throw new Error(`${o(s)}里缺少标签 "${a}" 的值`);s+=2,c.value=t[s].text,c.endIndex=t[s].endIndex}i.push(c)}else{if(!a.startsWith("~"))throw new Error(`${o(s)} 含有无效的属性 "${a}"`);{const h=a.substr(1);it(h);const p={type:"relation",name:h,isInheritable:d(),startIndex:r,endIndex:t[s].endIndex};if(i.push(p),s+2>=t.length||"="!==t[s+1].text){if(n)break;throw new Error(`${o(s)} 里的关系 "${a}" 应该指向一个笔记.`)}s+=2;let u=t[s].text;u.startsWith("#")&&(u=u.substr(1));const g=u.split("/").pop();p.value=g,p.endIndex=t[s].endIndex}}}return i}const st=function(t,e=!1){return ot(nt(t),t,e)};var at=__webpack_require__(6707),rt=__webpack_require__(1375);const dt={removePlugins:["Heading","Link","Autoformat","Bold","Italic","Underline","Strikethrough","Code","Superscript","Subscript","BlockQuote","Image","ImageCaption","ImageStyle","ImageToolbar","ImageUpload","ImageResize","List","TodoList","PasteFromOffice","Table","TableToolbar","TableProperties","TableCellProperties","Indent","IndentBlock","BlockToolbar","ParagraphButtonUI","HeadingButtonsUI","UploadimagePlugin","InternalLinkPlugin","MarkdownImportPlugin","CuttonotePlugin","TextTransformation","Font","FontColor","FontBackgroundColor","CodeBlock","SelectAll","IncludeNote","CutToNote","Mathematics","AutoformatMath","indentBlockShortcutPlugin","removeFormatLinksPlugin"],toolbar:{items:[]},placeholder:"在这里输入标签和关系",mention:{feeds:[{marker:"@",feed:t=>h.autocompleteSourceForCKEditor(t),itemRenderer:t=>{const e=document.createElement("button");return e.innerHTML=`${t.highlightedNotePathTitle} `,e},minimumCharacters:0},{marker:"#",feed:async t=>(await o.Z.get(`attribute-names/?type=label&query=${encodeURIComponent(t)}`)).map((t=>({id:`#${t}`,name:t}))),minimumCharacters:0},{marker:"~",feed:async t=>(await o.Z.get(`attribute-names/?type=relation&query=${encodeURIComponent(t)}`)).map((t=>({id:`~${t}`,name:t}))),minimumCharacters:0}]}};class lt extends B.Z{constructor(t){super(),this.attributeDetailWidget=t}doRender(){this.$widget=$('\n<div style="position: relative; padding-top: 10px; padding-bottom: 10px">\n    <style>\n    .attribute-list-editor {\n        border: 0 !important;\n        outline: 0 !important;\n        box-shadow: none !important;\n        padding: 0 0 0 5px !important;\n        margin: 0 !important;\n        max-height: 100px;\n        overflow: auto;\n        transition: opacity .1s linear;\n    }\n    \n    .attribute-list-editor.ck-content .mention {\n        color: var(--muted-text-color) !important;\n        background: transparent !important;\n    }\n        \n    .save-attributes-button {\n        color: var(--muted-text-color);\n        position: absolute; \n        bottom: 14px;\n        right: 25px;\n        cursor: pointer;\n        border: 1px solid transparent;\n        font-size: 130%;\n    }\n    \n    .add-new-attribute-button {\n        color: var(--muted-text-color);\n        position: absolute; \n        bottom: 13px;\n        right: 0; \n        cursor: pointer;\n        border: 1px solid transparent;\n        font-size: 130%;\n    }\n    \n    .add-new-attribute-button:hover, .save-attributes-button:hover {\n        border: 1px solid var(--button-border-color);\n        border-radius: var(--button-border-radius);\n        background: var(--button-background-color);\n        color: var(--button-text-color);\n    }\n    \n    .attribute-errors {\n        color: red;\n        padding: 5px 50px 0px 5px; /* large right padding to avoid buttons */\n    }\n    </style>\n    \n    <div class="attribute-list-editor" tabindex="200"></div>\n\n    <div class="bx bx-save save-attributes-button" title="保存属性<回车>"></div>\n    <div class="bx bx-plus add-new-attribute-button" title="添加新属性"></div>\n    \n    <div class="attribute-errors" style="display: none;"></div>\n</div>\n'),this.$editor=this.$widget.find(".attribute-list-editor"),this.initialized=this.initEditor(),this.$editor.on("keydown",(async t=>{13===t.which&&setTimeout((()=>this.save()),100),this.attributeDetailWidget.hide()})),this.$editor.on("blur",(()=>this.save())),this.$addNewAttributeButton=this.$widget.find(".add-new-attribute-button"),this.$addNewAttributeButton.on("click",(t=>this.addNewAttribute(t))),this.$saveAttributesButton=this.$widget.find(".save-attributes-button"),this.$saveAttributesButton.on("click",(()=>this.save())),this.$errors=this.$widget.find(".attribute-errors")}addNewAttribute(t){f.Z.show({x:t.pageX,y:t.pageY,orientation:"left",items:[{title:'添加新标签 <kbd data-command="addNewLabel"></kbd>',command:"addNewLabel",uiIcon:"bx bx-hash"},{title:'添加新关系 <kbd data-command="addNewRelation"></kbd>',command:"addNewRelation",uiIcon:"bx bx-transfer"},{title:"----"},{title:"添加新标签定义",command:"addNewLabelDefinition",uiIcon:"bx bx-empty"},{title:"添加新关系定义",command:"addNewRelationDefinition",uiIcon:"bx bx-empty"}],selectMenuItemHandler:({command:t})=>this.handleAddNewAttributeCommand(t)})}async addNewLabelEvent({ntxId:t}){this.isNoteContext(t)&&(await this.refresh(),this.handleAddNewAttributeCommand("addNewLabel"))}async addNewRelationEvent({ntxId:t}){this.isNoteContext(t)&&(await this.refresh(),this.handleAddNewAttributeCommand("addNewRelation"))}async handleAddNewAttributeCommand(t){const e=this.parseAttributes();if(!e)return;let n,i,o;if("addNewLabel"===t)n="label",i="myLabel",o="";else if("addNewRelation"===t)n="relation",i="myRelation",o="";else if("addNewLabelDefinition"===t)n="label",i="label:myLabel",o="promoted,single,text";else{if("addNewRelationDefinition"!==t)return;n="label",i="relation:myRelation",o="promoted,single"}e.push({type:n,name:i,value:o,isInheritable:!1}),await this.renderOwnedAttributes(e,!1),this.$editor.scrollTop(this.$editor[0].scrollHeight);const s=this.$editor[0].getBoundingClientRect();setTimeout((()=>{this.attributeDetailWidget.showAttributeDetail({allAttributes:e,attribute:e[e.length-1],isOwned:!0,x:(s.left+s.right)/2,y:s.bottom,focus:"name"})}),100)}async save(){if(this.lastUpdatedNoteId!==this.noteId)return void console.warn("Ignoring blur event because a different note is loaded.");const t=this.parseAttributes();t&&(await o.Z.put(`notes/${this.noteId}/attributes`,t,this.componentId),this.$saveAttributesButton.fadeOut(),this.$editor.css("opacity",0),setTimeout((()=>this.$editor.css("opacity",1)),100))}parseAttributes(){try{return st(this.getPreprocessedData())}catch(t){this.$errors.text(t.message).slideDown()}}getPreprocessedData(){const t=this.textEditor.getData().replace(/<a[^>]+href="(#[A-Za-z0-9_/]*)"[^>]*>[^<]*<\/a>/g,"$1").replace(/&nbsp;/g," ");return $("<div>").html(t).text()}async initEditor(){await at.Z.requireLibrary(at.Z.CKEDITOR),this.$widget.show(),this.$editor.on("click",(t=>this.handleEditorClick(t))),this.textEditor=await BalloonEditor.create(this.$editor[0],dt),this.textEditor.model.document.on("change:data",(()=>this.dataChanged())),this.textEditor.editing.view.document.on("enter",((t,e)=>{e.preventDefault(),t.stop()}),{priority:"high"}),this.textEditor.editing.view.change((t=>t.setAttribute("spellcheck","false",this.textEditor.editing.view.document.getRoot())))}dataChanged(){this.lastUpdatedNoteId=this.noteId,this.lastSavedContent===this.textEditor.getData()?this.$saveAttributesButton.fadeOut():this.$saveAttributesButton.fadeIn(),this.$errors.is(":visible")&&this.$errors.hide()}async handleEditorClick(t){const e=this.textEditor.model.document.selection.getFirstPosition();if(e&&e.textNode&&e.textNode.data){const n=this.getClickIndex(e);let i;try{i=st(this.getPreprocessedData(),!0)}catch(t){return null}let o=null;for(const t of i)if(n>t.startIndex&&n<=t.endIndex){o=t;break}setTimeout((()=>{o?(this.$editor.tooltip("hide"),this.attributeDetailWidget.showAttributeDetail({allAttributes:i,attribute:o,isOwned:!0,x:t.pageX,y:t.pageY})):this.showHelpTooltip()}),100)}else this.showHelpTooltip()}showHelpTooltip(){this.attributeDetailWidget.hide(),this.$editor.tooltip({trigger:"focus",html:!0,title:"\n<p>要添加标签,只需输入 <code>#rock</code> 或者如果你想设置一个值可以用 <code>#year = 2020</code></p> \n\n<p>添加关系则是类似 <code>~author = @</code>, 自动补全会帮你找到的想要的笔记.</p>\n\n<p>或者可以用右侧的<code>+</code>按钮添加标签和关系.</p>",placement:"bottom",offset:"0,30"}),this.$editor.tooltip("show")}getClickIndex(t){let e=t.offset-t.textNode.startOffset,n=t.textNode;for(;n.previousSibling;)n=n.previousSibling,"reference"===n.name?e+=n._attrs.get("notePath").length+1:e+=n.data.length;return e}async loadReferenceLinkTitle(t,e){const{noteId:n}=z.Z.parseNavigationStateFromUrl(e),i=await a.default.getNote(n,!0),o=i?i.title:"[missing]";t.text(o)}async refreshWithNote(t){await this.renderOwnedAttributes(t.getOwnedAttributes(),!0)}async renderOwnedAttributes(t,e){t.sort(((t,e)=>t.position-e.position));let n=(await rt.Z.renderAttributes(t,!0)).html();n.length>0&&(n+="&nbsp;"),this.textEditor.setData(n),e&&(this.lastSavedContent=this.textEditor.getData(),this.$saveAttributesButton.fadeOut(0))}async createNoteForReferenceLink(t){const{note:e}=await s.Z.createNoteWithTypePrompt(this.notePath,{activate:!1,title:t});return e.getBestNotePathString()}async updateAttributeList(t){await this.renderOwnedAttributes(t,!1)}focus(){this.$editor.trigger("focus"),this.textEditor.model.change((t=>{const e=t.createPositionAt(this.textEditor.model.document.getRoot(),"end");t.setSelection(e)}))}entitiesReloadedEvent({loadResults:t}){t.getAttributeRows(this.componentId).find((t=>T.isAffecting(t,this.note)))&&this.refresh()}}class ct extends B.Z{get name(){return"ownedAttributes"}get toggleCommand(){return"toggleRibbonTabOwnedAttributes"}constructor(){super(),this.attributeDetailWidget=(new et).contentSized().setParent(this),this.attributeEditorWidget=new lt(this.attributeDetailWidget).contentSized().setParent(this),this.child(this.attributeEditorWidget,this.attributeDetailWidget)}getTitle(){return{show:!this.note.isLaunchBarConfig(),title:"拥有的属性",icon:"bx bx-list-check"}}doRender(){this.$widget=$('\n<div class="attribute-list">\n    <style>\n        .attribute-list {\n            margin-left: 7px;\n            margin-right: 7px;\n            margin-top: 5px;\n            margin-bottom: 2px;\n            position: relative;\n        }\n        \n        .attribute-list-editor p {\n            margin: 0 !important;\n        }\n    </style>\n   \n    <div class="attr-editor-placeholder"></div>\n</div>\n'),this.contentSized(),this.$widget.find(".attr-editor-placeholder").replaceWith(this.attributeEditorWidget.render()),this.$widget.append(this.attributeDetailWidget.render()),this.$title=$("<div>")}async saveAttributesCommand(){await this.attributeEditorWidget.save()}async reloadAttributesCommand(){await this.attributeEditorWidget.refresh()}async updateAttributeListCommand({attributes:t}){await this.attributeEditorWidget.updateAttributeList(t)}focus(){this.attributeEditorWidget.focus()}}class ht extends B.Z{isEnabled(){return"launcher"!==this.note?.type}doRender(){this.$widget=$('\n<div class="dropdown note-actions">\n    <style>\n    .note-actions {\n        width: 35px;\n        height: 35px;\n    }  \n    \n    .note-actions .dropdown-menu {\n        width: 15em;\n    }\n    \n    .note-actions .dropdown-item[disabled], .note-actions .dropdown-item[disabled]:hover {\n        color: var(--muted-text-color) !important;\n        background-color: transparent !important;\n        pointer-events: none; /* makes it unclickable */\n    }\n    </style>\n\n    <button type="button" data-toggle="dropdown" aria-haspopup="true" \n        aria-expanded="false" class="icon-action bx bx-dots-vertical-rounded"></button>\n\n    <div class="dropdown-menu dropdown-menu-right">\n        <a data-trigger-command="convertNoteIntoAttachment" class="dropdown-item">转换为附件</a>\n        <a data-trigger-command="renderActiveNote" class="dropdown-item render-note-button"><kbd data-command="renderActiveNote"></kbd>重新渲染笔记</a>\n        <a data-trigger-command="findInText" class="dropdown-item find-in-text-button">在笔记中搜索<kbd data-command="findInText"></a>\n        <a data-trigger-command="showNoteSource" class="dropdown-item show-source-button"><kbd data-command="showNoteSource"></kbd>笔记源代码</a>\n        <a data-trigger-command="showAttachments" class="dropdown-item"><kbd data-command="showAttachments"></kbd>笔记附件</a>\n        <a data-trigger-command="openNoteExternally" class="dropdown-item open-note-externally-button"\n           title="文件将在外部应用程序中打开并监视更改, 然后您可以将修改后的版本上传回Trilium">\n            <kbd data-command="openNoteExternally"></kbd> \n            用外部程序打开笔记\n        </a>\n        <a data-trigger-command="openNoteCustom" class="dropdown-item open-note-custom-button"><kbd data-command="openNoteCustom"></kbd> 使用自定义程序打开笔记</a>\n        <a class="dropdown-item import-files-button">导入文件</a>\n        <a class="dropdown-item export-note-button">导出笔记</a>\n        <a class="dropdown-item delete-note-button">删除笔记</a>\n        <a data-trigger-command="printActiveNote" class="dropdown-item print-active-note-button"><kbd data-command="printActiveNote"></kbd>打印笔记</a>\n        <a data-trigger-command="forceSaveRevision" class="dropdown-item save-revision-button"><kbd data-command="forceSaveRevision"></kbd>保存笔记历史</a>\n    </div>\n</div>'),this.$widget.on("show.bs.dropdown",(()=>this.refreshVisibility(this.note))),this.$convertNoteIntoAttachmentButton=this.$widget.find("[data-trigger-command='convertNoteIntoAttachment']"),this.$findInTextButton=this.$widget.find(".find-in-text-button"),this.$printActiveNoteButton=this.$widget.find(".print-active-note-button"),this.$showSourceButton=this.$widget.find(".show-source-button"),this.$renderNoteButton=this.$widget.find(".render-note-button"),this.$exportNoteButton=this.$widget.find(".export-note-button"),this.$exportNoteButton.on("click",(()=>{this.$exportNoteButton.hasClass("disabled")||this.triggerCommand("showExportDialog",{notePath:this.noteContext.notePath,defaultType:"single"})})),this.$importNoteButton=this.$widget.find(".import-files-button"),this.$importNoteButton.on("click",(()=>this.triggerCommand("showImportDialog",{noteId:this.noteId}))),this.$widget.on("click",".dropdown-item",(()=>this.$widget.find("[data-toggle='dropdown']").dropdown("toggle"))),this.$openNoteExternallyButton=this.$widget.find(".open-note-externally-button"),this.$openNoteCustomButton=this.$widget.find(".open-note-custom-button"),this.$deleteNoteButton=this.$widget.find(".delete-note-button"),this.$deleteNoteButton.on("click",(()=>{"root"!==this.note.noteId&&L.Z.deleteNotes([this.note.getParentBranches()[0].branchId],!0)}))}async refreshVisibility(t){this.$convertNoteIntoAttachmentButton.toggle(t.isEligibleForConversionToAttachment()),this.toggleDisabled(this.$findInTextButton,["text","code","book"].includes(t.type)),this.toggleDisabled(this.$showSourceButton,["text","code","relationMap","mermaid","canvas"].includes(t.type)),this.toggleDisabled(this.$printActiveNoteButton,["text","code"].includes(t.type)),this.$renderNoteButton.toggle("render"===t.type),this.toggleDisabled(this.$openNoteExternallyButton,e.default.isElectron()&&!["search","book"].includes(t.type)),this.toggleDisabled(this.$openNoteCustomButton,e.default.isElectron()&&!e.default.isMac()&&!["search","book"].includes(t.type)),this.toggleDisabled(this.$exportNoteButton,!["_backendLog"].includes(t.noteId)),this.toggleDisabled(this.$importNoteButton,!["search"].includes(t.type))}async convertNoteIntoAttachmentCommand(){if(!await U.Z.confirm(`Are you sure you want to convert note '${this.note.title}' into an attachment of the parent note?`))return;const{attachment:e}=await o.Z.post(`notes/${this.noteId}/convert-to-attachment`);e?(O.default.showMessage(`Note '${e.title}' has been converted to attachment.`),await D.Z.waitForMaxKnownEntityChangeId(),await t.default.tabManager.getActiveContext().setNote(e.ownerId,{viewScope:{viewMode:"attachments",attachmentId:e.attachmentId}})):O.default.showMessage(`Converting note '${this.note.title}' failed.`)}toggleDisabled(t,e){e?t.removeAttr("disabled"):t.attr("disabled","disabled")}entitiesReloadedEvent({loadResults:t}){t.isNoteReloaded(this.noteId)&&this.refresh()}}class pt extends B.Z{static getType(){}doRender(){return this.contentSized(),super.doRender()}async doRefresh(t){}async refresh(){this.constructor.getType()!==await this.parent.getWidgetType()?(this.toggleInt(!1),this.cleanup()):(this.toggleInt(!0),await this.doRefresh(this.note),this.triggerEvent("noteDetailRefreshed",{ntxId:this.noteContext.ntxId}))}isActive(){return this.$widget.is(":visible")&&this.noteContext?.ntxId===t.default.tabManager.activeNtxId}getData(){}focus(){}async readOnlyTemporarilyDisabledEvent({noteContext:t}){this.isNoteContext(t.ntxId)&&(await this.refresh(),this.focus())}handleEventInChildren(t,e){return["activeContextChanged","setNoteContext"].includes(t)?super.handleEventInChildren("setNoteContext",e):"entitiesReloaded"===t?super.handleEventInChildren(t,e):Promise.resolve()}}var ut=__webpack_require__(9692);const gt=[{default:!0,title:"纯文本",mime:"text/plain"},{title:"APL",mime:"text/apl"},{title:"ASN.1",mime:"text/x-ttcn-asn"},{title:"ASP.NET",mime:"application/x-aspx"},{title:"Asterisk",mime:"text/x-asterisk"},{title:"Brainfuck",mime:"text/x-brainfuck"},{default:!0,title:"C",mime:"text/x-csrc"},{default:!0,title:"C#",mime:"text/x-csharp"},{default:!0,title:"C++",mime:"text/x-c++src"},{title:"Clojure",mime:"text/x-clojure"},{title:"ClojureScript",mime:"text/x-clojurescript"},{title:"Closure Stylesheets (GSS)",mime:"text/x-gss"},{title:"CMake",mime:"text/x-cmake"},{title:"Cobol",mime:"text/x-cobol"},{title:"CoffeeScript",mime:"text/coffeescript"},{title:"Common Lisp",mime:"text/x-common-lisp"},{title:"CQL",mime:"text/x-cassandra"},{title:"Crystal",mime:"text/x-crystal"},{default:!0,title:"CSS",mime:"text/css"},{title:"Cypher",mime:"application/x-cypher-query"},{title:"Cython",mime:"text/x-cython"},{title:"D",mime:"text/x-d"},{title:"Dart",mime:"application/dart"},{title:"diff",mime:"text/x-diff"},{title:"Django",mime:"text/x-django"},{title:"Dockerfile",mime:"text/x-dockerfile"},{title:"DTD",mime:"application/xml-dtd"},{title:"Dylan",mime:"text/x-dylan"},{title:"EBNF",mime:"text/x-ebnf"},{title:"ECL",mime:"text/x-ecl"},{title:"edn",mime:"application/edn"},{title:"Eiffel",mime:"text/x-eiffel"},{title:"Elm",mime:"text/x-elm"},{title:"Embedded Javascript",mime:"application/x-ejs"},{title:"Embedded Ruby",mime:"application/x-erb"},{title:"Erlang",mime:"text/x-erlang"},{title:"Esper",mime:"text/x-esper"},{title:"F#",mime:"text/x-fsharp"},{title:"Factor",mime:"text/x-factor"},{title:"FCL",mime:"text/x-fcl"},{title:"Forth",mime:"text/x-forth"},{title:"Fortran",mime:"text/x-fortran"},{title:"Gas",mime:"text/x-gas"},{title:"Gherkin",mime:"text/x-feature"},{title:"GitHub风格的Markdown",mime:"text/x-gfm"},{default:!0,title:"Go",mime:"text/x-go"},{default:!0,title:"Groovy",mime:"text/x-groovy"},{title:"HAML",mime:"text/x-haml"},{default:!0,title:"Haskell",mime:"text/x-haskell"},{title:"Haskell (Literate)",mime:"text/x-literate-haskell"},{title:"Haxe",mime:"text/x-haxe"},{default:!0,title:"HTML",mime:"text/html"},{default:!0,title:"HTTP",mime:"message/http"},{title:"HXML",mime:"text/x-hxml"},{title:"IDL",mime:"text/x-idl"},{default:!0,title:"Java",mime:"text/x-java"},{title:"Java服务器页面",mime:"application/x-jsp"},{title:"Jinja2",mime:"text/jinja2"},{default:!0,title:"JS backend",mime:"application/javascript;env=backend"},{default:!0,title:"JS frontend",mime:"application/javascript;env=frontend"},{default:!0,title:"JSON",mime:"application/json"},{title:"JSON-LD",mime:"application/ld+json"},{title:"JSX",mime:"text/jsx"},{title:"Julia",mime:"text/x-julia"},{default:!0,title:"Kotlin",mime:"text/x-kotlin"},{title:"LaTeX",mime:"text/x-latex"},{title:"LESS",mime:"text/x-less"},{title:"LiveScript",mime:"text/x-livescript"},{title:"Lua",mime:"text/x-lua"},{title:"MariaDB SQL",mime:"text/x-mariadb"},{default:!0,title:"Markdown",mime:"text/x-markdown"},{title:"Mathematica",mime:"text/x-mathematica"},{title:"mbox",mime:"application/mbox"},{title:"mIRC",mime:"text/mirc"},{title:"Modelica",mime:"text/x-modelica"},{title:"MS SQL",mime:"text/x-mssql"},{title:"mscgen",mime:"text/x-mscgen"},{title:"msgenny",mime:"text/x-msgenny"},{title:"MUMPS",mime:"text/x-mumps"},{title:"MySQL",mime:"text/x-mysql"},{title:"Nginx",mime:"text/x-nginx-conf"},{title:"NSIS",mime:"text/x-nsis"},{title:"NTriples",mime:"application/n-triples"},{title:"Objective-C",mime:"text/x-objectivec"},{title:"OCaml",mime:"text/x-ocaml"},{title:"Octave",mime:"text/x-octave"},{title:"Oz",mime:"text/x-oz"},{title:"Pascal",mime:"text/x-pascal"},{title:"PEG.js",mime:"null"},{default:!0,title:"Perl",mime:"text/x-perl"},{title:"PGP",mime:"application/pgp"},{default:!0,title:"PHP",mime:"text/x-php"},{title:"Pig",mime:"text/x-pig"},{title:"PLSQL",mime:"text/x-plsql"},{title:"PostgreSQL",mime:"text/x-pgsql"},{title:"PowerShell",mime:"application/x-powershell"},{title:"属性文件",mime:"text/x-properties"},{title:"ProtoBuf",mime:"text/x-protobuf"},{title:"Pug",mime:"text/x-pug"},{title:"Puppet",mime:"text/x-puppet"},{default:!0,title:"Python",mime:"text/x-python"},{title:"Q",mime:"text/x-q"},{title:"R",mime:"text/x-rsrc"},{title:"reStructuredText",mime:"text/x-rst"},{title:"RPM Changes",mime:"text/x-rpm-changes"},{title:"RPM Spec",mime:"text/x-rpm-spec"},{default:!0,title:"Ruby",mime:"text/x-ruby"},{title:"Rust",mime:"text/x-rustsrc"},{title:"SAS",mime:"text/x-sas"},{title:"Sass",mime:"text/x-sass"},{title:"Scala",mime:"text/x-scala"},{title:"Scheme",mime:"text/x-scheme"},{title:"SCSS",mime:"text/x-scss"},{default:!0,title:"Shell (bash)",mime:"text/x-sh"},{title:"Sieve",mime:"application/sieve"},{title:"Slim",mime:"text/x-slim"},{title:"Smalltalk",mime:"text/x-stsrc"},{title:"Smarty",mime:"text/x-smarty"},{title:"SML",mime:"text/x-sml"},{title:"Solr",mime:"text/x-solr"},{title:"Soy",mime:"text/x-soy"},{title:"SPARQL",mime:"application/sparql-query"},{title:"Spreadsheet",mime:"text/x-spreadsheet"},{default:!0,title:"SQL",mime:"text/x-sql"},{title:"SQLite",mime:"text/x-sqlite"},{default:!0,title:"SQLite (Trilium)",mime:"text/x-sqlite;schema=trilium"},{title:"Squirrel",mime:"text/x-squirrel"},{title:"sTeX",mime:"text/x-stex"},{title:"Stylus",mime:"text/x-styl"},{default:!0,title:"Swift",mime:"text/x-swift"},{title:"SystemVerilog",mime:"text/x-systemverilog"},{title:"Tcl",mime:"text/x-tcl"},{title:"Textile",mime:"text/x-textile"},{title:"TiddlyWiki ",mime:"text/x-tiddlywiki"},{title:"Tiki wiki",mime:"text/tiki"},{title:"TOML",mime:"text/x-toml"},{title:"Tornado",mime:"text/x-tornado"},{title:"troff",mime:"text/troff"},{title:"TTCN",mime:"text/x-ttcn"},{title:"TTCN_CFG",mime:"text/x-ttcn-cfg"},{title:"Turtle",mime:"text/turtle"},{title:"Twig",mime:"text/x-twig"},{title:"TypeScript",mime:"application/typescript"},{title:"TypeScript-JSX",mime:"text/typescript-jsx"},{title:"VB.NET",mime:"text/x-vb"},{title:"VBScript",mime:"text/vbscript"},{title:"Velocity",mime:"text/velocity"},{title:"Verilog",mime:"text/x-verilog"},{title:"VHDL",mime:"text/x-vhdl"},{title:"Vue.js部件",mime:"text/x-vue"},{title:"Web IDL",mime:"text/x-webidl"},{default:!0,title:"XML",mime:"text/xml"},{title:"XQuery",mime:"application/xquery"},{title:"xu",mime:"text/x-xu"},{title:"Yacas",mime:"text/x-yacas"},{default:!0,title:"YAML",mime:"text/x-yaml"},{title:"Z80",mime:"text/x-z80"}];let mt=null;function bt(){mt=JSON.parse(JSON.stringify(gt));const t=m.Z.getJson("codeNotesMimeTypes")||gt.filter((t=>t.default)).map((t=>t.mime));for(const e of mt)e.enabled=t.includes(e.mime)||"text/plain"===e.mime}const ft={getMimeTypes:async function(){return null===mt&&bt(),mt},loadMimeTypes:bt};var wt=__webpack_require__(5913);class vt extends pt{setupImageOpening(t){this.$widget.on("dblclick","img",(t=>this.openImageInCurrentTab($(t.target)))),this.$widget.on("click","img",(n=>{const i=1===n.which,o=2===n.which,s=e.default.isCtrlKey(n);i&&s||o?this.openImageInNewTab($(n.target)):i&&t&&this.openImageInCurrentTab($(n.target))}))}async openImageInCurrentTab(e){const{noteId:n,viewScope:i}=await this.parseFromImage(e);n?t.default.tabManager.getActiveContext().setNote(n,{viewScope:i}):window.open(e.prop("src"),"_blank")}openImageInNewTab(e){const{noteId:n,viewScope:i}=this.parseFromImage(e);n?t.default.tabManager.openTabWithNoteWithHoisting(n,{viewScope:i}):window.open(e.prop("src"),"_blank")}async parseFromImage(t){const e=t.prop("src"),n=e.match(/\/api\/images\/([A-Za-z0-9_]+)\//);if(n)return{noteId:n[1],viewScope:{}};const i=e.match(/\/api\/attachments\/([A-Za-z0-9_]+)\/image\//);if(i){const t=i[1];return{noteId:(await a.default.getAttachment(t)).ownerId,viewScope:{viewMode:"attachments",attachmentId:t}}}return null}async loadIncludedNote(t,e){const n=await a.default.getNote(t);if(n){const t=$('<div class="include-note-wrapper">'),i=await z.Z.createLink(n.noteId,{showTooltip:!1});t.empty().append($('<h4 class="include-note-title">').append(i));const{$renderedContent:o,type:s}=await wt.Z.getRenderedContent(n);t.append($(`<div class="include-note-content type-${s}">`).append(o)),e.empty().append(t)}}async loadReferenceLinkTitle(t,e=null){await z.Z.loadReferenceLinkTitle(t,e)}refreshIncludedNote(t,e){t&&t.find(`section[data-note-id="${e}"]`).each(((t,n)=>{this.loadIncludedNote(e,$(n))}))}}const xt={feeds:[{marker:"@",feed:t=>h.autocompleteSourceForCKEditor(t),itemRenderer:t=>{const e=document.createElement("button");return e.innerHTML=`${t.highlightedNotePathTitle} `,e},minimumCharacters:0}]};var yt=__webpack_require__(5489);const $t=function(t){try{t.attr("contenteditable","true"),function(t){const e=window.getSelection(),n=document.createRange();n.selectNodeContents(t),e.removeAllRanges(),e.addRange(n)}(t.get(0)),document.execCommand("copy")?O.default.showMessage("Image copied to the clipboard"):O.default.showAndLogError("Could not copy the image to clipboard.")}finally{window.getSelection().removeAllRanges(),t.removeAttr("contenteditable")}};var It=__webpack_require__(5437);const Ct=[["Arrow",{location:1,id:"arrow",length:14,foldback:.8}],["Label",{label:"",id:"label",cssClass:"connection-label"}]],Nt=[["Arrow",{location:1,id:"arrow",length:14,foldback:.8}],["Label",{label:"",id:"label",cssClass:"connection-label"}],["Arrow",{location:0,id:"arrow2",length:14,direction:-1,foldback:.8}]],kt=[["Arrow",{location:1,id:"arrow",length:14,foldback:.8}],["Label",{label:"",location:.2,id:"label-source",cssClass:"connection-label"}],["Label",{label:"",location:.8,id:"label-target",cssClass:"connection-label"}],["Arrow",{location:0,id:"arrow2",length:14,direction:-1,foldback:.8}]],Tt=[["Arrow",{location:1,id:"arrow",length:14,foldback:.8}]];let St=1;function Et(t,e,n=!1){let i,o,s,a,r;function d(){const l=Date.now()-a;l<e&&l>=0?i=setTimeout(d,e-l):(i=null,n||(r=t.apply(s,o),s=o=null))}null==e&&(e=100);const l=function(){s=this,o=arguments,a=Date.now();const l=n&&!i;return i||(i=setTimeout(d,e)),l&&(r=t.apply(s,o),s=o=null),r};return l.clear=function(){i&&(clearTimeout(i),i=null)},l.flush=function(){i&&(r=t.apply(s,o),s=o=null,clearTimeout(i),i=null)},l}Et.debounce=Et;const At=Et,{sleep:Rt}=e.default;var Pt=__webpack_require__(592);const _t=e.default.escapeHtml;class Mt extends B.Z{constructor(t){super(),this.widgetMode=t}doRender(){this.$widget=$('<div class="note-map-widget" style="position: relative;">\n    <style>\n        .note-detail-note-map {\n            height: 100%;\n            overflow: hidden;\n        }\n        \n        .map-type-switcher {\n            position: absolute; \n            top: 10px; \n            left: 10px; \n            z-index: 10; /* should be below dropdown (note actions) */\n        }\n        \n        .map-type-switcher button.bx {\n            font-size: 130%;\n            padding: 1px 10px 1px 10px;\n        }\n    </style>\n    \n    <div class="btn-group btn-group-sm map-type-switcher" role="group">\n      <button type="button" class="btn bx bx-network-chart" title="链接地图" data-type="link"></button>\n      <button type="button" class="btn bx bx-sitemap" title="树形图" data-type="tree"></button>\n    </div>\n\n    <div class="style-resolver"></div>\n\n    <div class="note-map-container"></div>\n</div>');const t=window.getComputedStyle(document.documentElement);this.themeStyle=t.getPropertyValue("--theme-style")?.trim(),this.$container=this.$widget.find(".note-map-container"),this.$styleResolver=this.$widget.find(".style-resolver"),new ResizeObserver((()=>this.setDimensions())).observe(this.$container[0]),this.$widget.find(".map-type-switcher button").on("click",(async t=>{const e=$(t.target).closest("button").attr("data-type");await T.setLabel(this.noteId,"mapType",e)})),super.doRender()}setDimensions(){if(!this.graph)return;const t=this.$widget.parent();this.graph.height(t.height()).width(t.width())}async refreshWithNote(e){this.$widget.show(),this.css={fontFamily:this.$container.css("font-family"),textColor:this.rgb2hex(this.$container.css("color")),mutedTextColor:this.rgb2hex(this.$styleResolver.css("color"))},this.mapType="tree"===this.note.getLabelValue("mapType")?"tree":"link",await at.Z.requireLibrary(at.Z.FORCE_GRAPH),this.graph=ForceGraph()(this.$container[0]).width(this.$container.width()).height(this.$container.height()).onZoom((t=>this.setZoomLevel(t.k))).d3AlphaDecay(.01).d3VelocityDecay(.08).nodeCanvasObject(((t,e)=>this.paintNode(t,this.getColorForNode(t),e))).nodePointerAreaPaint(((t,e)=>this.paintNode(t,this.getColorForNode(t),e))).nodePointerAreaPaint(((t,e,n)=>{n.fillStyle=e,n.beginPath(),n.arc(t.x,t.y,this.noteIdToSizeMap[t.id],0,2*Math.PI,!1),n.fill()})).nodeLabel((t=>_t(t.name))).maxZoom(7).warmupTicks(30).linkDirectionalArrowLength(5).linkDirectionalArrowRelPos(1).linkWidth(1).linkColor((()=>this.css.mutedTextColor)).onNodeClick((e=>t.default.tabManager.getActiveContext().setNote(e.id))).onNodeRightClick(((t,e)=>Pt.Z.openContextMenu(t.id,e))),"link"===this.mapType&&this.graph.linkLabel((t=>`${_t(t.source.name)} - <strong>${_t(t.name)}</strong> - ${_t(t.target.name)}`)).linkCanvasObject(((t,e)=>this.paintLink(t,e))).linkCanvasObjectMode((()=>"after"));const n=this.getMapRootNoteId(),i=await this.loadNotesAndRelations(n),o=i.nodes.length/i.links.length,s=-20/Math.pow(o,1.5),a=Math.min(-3,s);this.graph.d3Force("link").distance(40),this.graph.d3Force("center").strength(.2),this.graph.d3Force("charge").strength(a),this.graph.d3Force("charge").distanceMax(1e3),this.renderData(i)}getMapRootNoteId(){if("ribbon"===this.widgetMode)return this.noteId;let e=this.note.getLabelValue("mapRootNoteId");return"hoisted"===e?e=M.Z.getHoistedNoteId():e||(e=t.default.tabManager.getActiveContext().parentNoteId),e}getColorForNode(t){return t.color?t.color:"ribbon"===this.widgetMode&&t.id===this.noteId?"red":this.generateColorFromString(t.type)}generateColorFromString(t){"dark"===this.themeStyle&&(t=`0${t}`);let e=0;for(let n=0;n<t.length;n++)e=t.charCodeAt(n)+((e<<5)-e);let n="#";for(let t=0;t<3;t++)n+=`00${(e>>8*t&255).toString(16)}`.substr(-2);return n}rgb2hex(t){return`#${t.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/).slice(1).map((t=>parseInt(t,10).toString(16).padStart(2,"0"))).join("")}`}setZoomLevel(t){this.zoomLevel=t}paintNode(t,e,n){const{x:i,y:o}=t,s=this.noteIdToSizeMap[t.id];if(n.fillStyle=e,n.beginPath(),n.arc(i,o,s,0,2*Math.PI,!1),n.fill(),!(this.zoomLevel>2||this.zoomLevel>1&&s>6||this.zoomLevel>.3&&s>10))return;n.fillStyle=this.css.textColor,n.font=`${s}px ${this.css.fontFamily}`,n.textAlign="center",n.textBaseline="middle";let a=t.name;a.length>15&&(a=`${a.substr(0,15)}...`),n.fillText(a,i,o+Math.round(1.5*s))}paintLink(t,e){if(this.zoomLevel<5)return;e.font=`3px ${this.css.fontFamily}`,e.textAlign="center",e.textBaseline="middle",e.fillStyle=this.css.mutedTextColor;const{source:n,target:i}=t,o=(n.x+i.x)/2,s=(n.y+i.y)/2;e.save(),e.translate(o,s);const a=n.y-i.y,r=n.x-i.x;let d=Math.atan2(a,r),l=2;(d<-Math.PI/2||d>Math.PI/2)&&(d+=Math.PI,l=-2),e.rotate(d),e.fillText(t.name,0,l),e.restore()}async loadNotesAndRelations(t){const e=await o.Z.post(`note-map/${t}/${this.mapType}`);this.calculateNodeSizes(e);const n=this.getGroupedLinks(e.links);return this.nodes=e.notes.map((([t,e,n,i])=>({id:t,name:e,type:n,color:i}))),{nodes:this.nodes,links:n.map((t=>({id:`${t.sourceNoteId}-${t.targetNoteId}`,source:t.sourceNoteId,target:t.targetNoteId,name:t.names.join(", ")})))}}getGroupedLinks(t){const e={};for(const n of t){const t=`${n.sourceNoteId}-${n.targetNoteId}`;t in e?e[t].names.includes(n.name)||e[t].names.push(n.name):e[t]={id:t,sourceNoteId:n.sourceNoteId,targetNoteId:n.targetNoteId,names:[n.name]}}return Object.values(e)}calculateNodeSizes(t){if(this.noteIdToSizeMap={},"tree"===this.mapType){const{noteIdToDescendantCountMap:e}=t;for(const t in e){this.noteIdToSizeMap[t]=4;const n=e[t];n>0&&(this.noteIdToSizeMap[t]+=1+Math.round(Math.log(n)/Math.log(1.5)))}}else if("link"===this.mapType){const e={};for(const n of t.links)e[n.targetNoteId]=1+(e[n.targetNoteId]||0);for(const[n]of t.notes)this.noteIdToSizeMap[n]=4,n in e&&(this.noteIdToSizeMap[n]+=Math.min(Math.pow(e[n],.5),15))}}renderData(t){this.graph.graphData(t),"ribbon"===this.widgetMode&&"search"!==this.note?.type?setTimeout((()=>{this.setDimensions();const e=this.getSubGraphConnectedToCurrentNote(t);this.graph.zoomToFit(400,50,(t=>e.has(t.id))),e.size<30&&this.graph.d3VelocityDecay(.4)}),1e3):t.nodes.length>1&&setTimeout((()=>{this.setDimensions();const e=this.getNoteIdsWithLinks(t);e.size>0&&this.graph.zoomToFit(400,30,(t=>e.has(t.id))),e.size<30&&this.graph.d3VelocityDecay(.4)}),1e3)}getNoteIdsWithLinks(t){const e=new Set;for(const n of t.links)e.add(n.source.id),e.add(n.target.id);return e}getSubGraphConnectedToCurrentNote(t){function e(t,e){const n={};for(const i of t){const t=i[e].id;n[t]=n[t]||[],n[t].push(i)}return n}const n=e(t.links,"source"),i=e(t.links,"target"),o=new Set;return function t(e){if(!o.has(e)){o.add(e);for(const i of n[e]||[])t(i.target.id);for(const n of i[e]||[])t(n.source.id)}}(this.noteId),o}cleanup(){this.$container.html("")}entitiesReloadedEvent({loadResults:t}){t.getAttributeRows(this.componentId).find((t=>"label"===t.type&&["mapType","mapRootNoteId"].includes(t.name)&&T.isAffecting(t,this.note)))&&this.refresh()}}class Zt extends B.Z{constructor(){super(),this.contentSized()}async updateOption(t,e){const n={[t]:e};await this.updateMultipleOptions(n)}async updateMultipleOptions(t){await o.Z.put("options",t),this.showUpdateNotification()}showUpdateNotification(){O.default.showPersistent({id:"options-change-saved",title:"选项状态",message:"选项更改已保存.",icon:"slider",closeAfter:2e3})}async updateCheckboxOption(t,e){const n=e.prop("checked");return await this.updateOption(t,n?"true":"false")}setCheckboxState(t,e){t.prop("checked","true"===e)}optionsLoaded(t){}async refreshWithNote(t){const e=await o.Z.get("options");this.optionsLoaded(e)}async entitiesReloadedEvent({loadResults:t}){t.getOptionNames().length>0&&this.refresh()}}const Lt=[{value:"theme",label:"Theme defined"},{value:"serif",label:"Serif"},{value:"sans-serif",label:"Sans Serif"},{value:"monospace",label:"Monospace"},{value:"Arial",label:"Arial"},{value:"Verdana",label:"Verdana"},{value:"Helvetica",label:"Helvetica"},{value:"Tahoma",label:"Tahoma"},{value:"Trebuchet MS",label:"Trebuchet MS"},{value:"Times New Roman",label:"Times New Roman"},{value:"Georgia",label:"Georgia"},{value:"Garamond",label:"Garamond"},{value:"Courier New",label:"Courier New"},{value:"Brush Script MT",label:"Brush Script MT"},{value:"Impact",label:"Impact"},{value:"American Typewriter",label:"American Typewriter"},{value:"Andalé Mono",label:"Andalé Mono"},{value:"Lucida Console",label:"Lucida Console"},{value:"Monaco",label:"Monaco"},{value:"Bradley Hand",label:"Bradley Hand"},{value:"Luminari",label:"Luminari"},{value:"Comic Sans MS",label:"Comic Sans MS"},{value:"Microsoft YaHei",label:"Microsoft YaHei"}];let Dt,Bt=1;const Ot={Bing:"https://www.bing.com/search?q={keyword}",Baidu:"https://www.baidu.com/s?wd={keyword}",DuckDuckGo:"https://duckduckgo.com/?q={keyword}",Google:"https://www.google.com/search?q={keyword}"};class Wt extends B.Z{doRender(){this.$widget=$('<div style="height: 100%; display: flex; flex-direction: column;">\n    <style>\n        .backend-log-textarea {\n            flex-grow: 1; \n            width: 100%;\n            border: none;\n        }   \n    </style>\n\n    <textarea class="backend-log-textarea" readonly="readonly"></textarea>\n    \n    <div style="display: flex; justify-content: space-around; margin-top: 10px;">\n        <button class="refresh-backend-log-button btn btn-primary">刷新</button>\n    </div>\n</div>'),this.$backendLogTextArea=this.$widget.find(".backend-log-textarea"),this.$refreshBackendLog=this.$widget.find(".refresh-backend-log-button"),this.$refreshBackendLog.on("click",(()=>this.load()))}scrollToBottom(){this.$backendLogTextArea.scrollTop(this.$backendLogTextArea[0].scrollHeight)}async refresh(){await this.load()}async load(){const t=await o.Z.get("backend-log");this.$backendLogTextArea.text(t),this.scrollToBottom()}}const Ft={_optionsAppearance:[class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>主题</h4>\n    \n    <div class="form-group row">\n        <div class="col-6">\n            <label>主题</label>\n            <select class="theme-select form-control"></select>\n        </div>\n        \n        <div class="col-6">\n            <label>覆盖主题字体</label>\n            <input type="checkbox" class="override-theme-fonts form-control">\n        </div>\n    </div>\n</div>'),this.$themeSelect=this.$widget.find(".theme-select"),this.$overrideThemeFonts=this.$widget.find(".override-theme-fonts"),this.$themeSelect.on("change",(async()=>{const t=this.$themeSelect.val();await o.Z.put(`options/theme/${t}`),e.default.reloadFrontendApp("theme change")})),this.$overrideThemeFonts.on("change",(()=>this.updateCheckboxOption("overrideThemeFonts",this.$overrideThemeFonts)))}async optionsLoaded(t){const e=[{val:"light",title:"明亮"},{val:"dark",title:"深色"}].concat(await o.Z.get("options/user-themes"));this.$themeSelect.empty();for(const t of e)this.$themeSelect.append($("<option>").attr("value",t.val).attr("data-note-id",t.noteId).text(t.title));this.$themeSelect.val(t.theme),this.setCheckboxState(this.$overrideThemeFonts,t.overrideThemeFonts)}},class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>字体</h4>\n    \n    <h5>主字体</h5>\n    \n    <div class="form-group row">\n        <div class="col-6">\n            <label>字体系列</label>\n            <select class="main-font-family form-control"></select>\n        </div>\n    \n        <div class="col-6">\n            <label>大小</label>\n\n            <div class="input-group">\n                <input type="number" class="main-font-size form-control options-number-input" min="50" max="200" step="10"/>\n                <div class="input-group-append">\n                    <span class="input-group-text">%</span>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <h5>笔记树字体</h5>\n\n    <div class="form-group row">\n        <div class="col-4">\n            <label>字体系列</label>\n            <select class="tree-font-family form-control"></select>\n        </div>\n    \n        <div class="col-4">\n            <label>大小</label>\n\n            <div class="input-group">\n                <input type="number" class="tree-font-size form-control options-number-input" min="50" max="200" step="10"/>\n                <div class="input-group-append">\n                    <span class="input-group-text">%</span>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <h5>笔记详情字体</h5>\n    \n    <div class="form-group row">\n        <div class="col-4">\n            <label>字体系列</label>\n            <select class="detail-font-family form-control"></select>\n        </div>\n        \n        <div class="col-4">\n            <label>大小</label>\n\n            <div class="input-group">\n                <input type="number" class="detail-font-size form-control options-number-input" min="50" max="200" step="10"/>\n                <div class="input-group-append">\n                    <span class="input-group-text">%</span>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <h5>等宽字体 (代码)</h5>\n    \n    <div class="form-group row">\n        <div class="col-4">\n            <label>字体系列</label>\n            <select class="monospace-font-family form-control"></select>\n        </div>\n    \n        <div class="col-4">\n            <label>大小</label>\n\n            <div class="input-group">\n                <input type="number" class="monospace-font-size form-control options-number-input" min="50" max="200" step="10"/>\n                <div class="input-group-append">\n                    <span class="input-group-text">%</span>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <p>注意树和详情字体的大小和主字体大小有关.</p>\n\n    <p>并非所有列出的字体都可以在您的系统上使用.</p>\n    \n    <p>\n        应用字体修改, 请点击 \n        <button class="btn btn-micro reload-frontend-button">重新加载前端</button>\n    </p>\n</div>'),this.$mainFontSize=this.$widget.find(".main-font-size"),this.$mainFontFamily=this.$widget.find(".main-font-family"),this.$treeFontSize=this.$widget.find(".tree-font-size"),this.$treeFontFamily=this.$widget.find(".tree-font-family"),this.$detailFontSize=this.$widget.find(".detail-font-size"),this.$detailFontFamily=this.$widget.find(".detail-font-family"),this.$monospaceFontSize=this.$widget.find(".monospace-font-size"),this.$monospaceFontFamily=this.$widget.find(".monospace-font-family"),this.$widget.find(".reload-frontend-button").on("click",(()=>e.default.reloadFrontendApp("changes from appearance options")))}async optionsLoaded(t){if("true"!==t.overrideThemeFonts)return void this.toggleInt(!1);this.toggleInt(!0),this.$mainFontSize.val(t.mainFontSize),this.fillFontFamilyOptions(this.$mainFontFamily,t.mainFontFamily),this.$treeFontSize.val(t.treeFontSize),this.fillFontFamilyOptions(this.$treeFontFamily,t.treeFontFamily),this.$detailFontSize.val(t.detailFontSize),this.fillFontFamilyOptions(this.$detailFontFamily,t.detailFontFamily),this.$monospaceFontSize.val(t.monospaceFontSize),this.fillFontFamilyOptions(this.$monospaceFontFamily,t.monospaceFontFamily);const e=["mainFontFamily","mainFontSize","treeFontFamily","treeFontSize","detailFontFamily","detailFontSize","monospaceFontFamily","monospaceFontSize"];for(const t of e)this[`$${t}`].on("change",(()=>this.updateOption(t,this[`$${t}`].val())))}fillFontFamilyOptions(t,e){t.empty();for(const{value:n,label:i}of Lt)t.append($("<option>").attr("value",n).prop("selected",n===e).text(i))}},class extends Zt{isEnabled(){return super.isEnabled()&&e.default.isElectron()}doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>缩放系数(仅桌面客户端有效)</h4>\n\n    <input type="number" class="zoom-factor-select form-control options-number-input" min="0.3" max="2.0" step="0.1"/>\n    <p>缩放可以通过 ctrl+- 和 ctrl+= 来控制.</p>\n</div>'),this.$zoomFactorSelect=this.$widget.find(".zoom-factor-select"),this.$zoomFactorSelect.on("change",(()=>{t.default.triggerCommand("setZoomFactorAndSave",{zoomFactor:this.$zoomFactorSelect.val()})}))}async optionsLoaded(t){this.$zoomFactorSelect.val(t.zoomFactor)}},class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>原生标题栏(需要重启)</h4>\n    \n    <select class="native-title-bar-select form-control">\n        <option value="show">启用</option>\n        <option value="hide">禁用</option>\n    </select>\n</div>'),this.$nativeTitleBarSelect=this.$widget.find(".native-title-bar-select"),this.$nativeTitleBarSelect.on("change",(()=>{const t="show"===this.$nativeTitleBarSelect.val()?"true":"false";this.updateOption("nativeTitleBarVisible",t)}))}async optionsLoaded(t){this.$nativeTitleBarSelect.val("true"===t.nativeTitleBarVisible?"show":"hide")}},class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>内容宽度</h4>\n    \n    <p>Trilium默认会限制内容的最大宽度以提高在宽屏中全屏时的可读性.</p>\n    \n    <div class="form-group row">\n        <div class="col-4">\n            <label>内容最大宽度(像素)</label>\n            <input type="number" min="200" step="10" class="max-content-width form-control options-number-input">\n        </div>\n    </div>\n    \n    <p>\n        应用内容宽度修改, 请点击 \n        <button class="btn btn-micro reload-frontend-button">重新加载前端</button>\n    </p>\n</div>'),this.$maxContentWidth=this.$widget.find(".max-content-width"),this.$maxContentWidth.on("change",(async()=>this.updateOption("maxContentWidth",this.$maxContentWidth.val()))),this.$widget.find(".reload-frontend-button").on("click",(()=>e.default.reloadFrontendApp("changes from appearance options")))}async optionsLoaded(t){this.$maxContentWidth.val(t.maxContentWidth)}},class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>功能选项组件</h4>\n    <label>\n        <input type="checkbox" class="promoted-attributes-open-in-ribbon">\n        如果笔记中存在升级属性，升级属性功能选项卡将自动打开\n    </label>\n    \n    <label>\n        <input type="checkbox" class="edited-notes-open-in-ribbon">\n        日记笔记自动打开编辑过的笔记选项\n    </label>\n</div>'),this.$promotedAttributesOpenInRibbon=this.$widget.find(".promoted-attributes-open-in-ribbon"),this.$promotedAttributesOpenInRibbon.on("change",(()=>this.updateCheckboxOption("promotedAttributesOpenInRibbon",this.$promotedAttributesOpenInRibbon))),this.$editedNotesOpenInRibbon=this.$widget.find(".edited-notes-open-in-ribbon"),this.$editedNotesOpenInRibbon.on("change",(()=>this.updateCheckboxOption("editedNotesOpenInRibbon",this.$editedNotesOpenInRibbon)))}async optionsLoaded(t){this.setCheckboxState(this.$promotedAttributesOpenInRibbon,t.promotedAttributesOpenInRibbon),this.setCheckboxState(this.$editedNotesOpenInRibbon,t.editedNotesOpenInRibbon)}}],_optionsShortcuts:[class extends Zt{doRender(){this.$widget=$('\n<div class="options-section shortcuts-options-section">\n    <style>\n        .shortcuts-options-section {\n            display: flex; \n            flex-direction: column; \n            height: 100%;\n        }\n    \n        .shortcuts-table-container {\n            overflow: auto; \n            flex-grow: 1; \n            flex-shrink: 1; \n        }    \n        \n        .shortcuts-options-buttons {\n            display: flex; \n            justify-content: space-between;\n            margin: 15px 15px 0 15px;\n        }\n    </style>\n\n    <h4>快捷键</h4>\n    \n    <p>\n      同一操作的多个快捷方式可以用逗号隔开.\n      更多快捷键设置请查看<a href="https://www.electronjs.org/docs/latest/api/accelerator">Electron 文档</a>.\n    </p>\n    \n    <div class="form-group">\n        <input type="text" class="keyboard-shortcut-filter form-control" placeholder="输入关键字过滤快捷键...">\n    </div>\n    \n    <div class="shortcuts-table-container">\n        <table class="keyboard-shortcut-table" cellpadding="10">\n        <thead>\n            <tr>\n                <th>动作名称</th>\n                <th>快捷键</th>\n                <th>默认快捷键</th>\n                <th>描述</th>\n            </tr>\n        </thead>\n        <tbody></tbody>\n        </table>\n    </div>\n    \n    <div class="shortcuts-options-buttons">\n        <button class="options-keyboard-shortcuts-reload-app btn btn-primary">重新加载应用程序以应用更改</button>\n        \n        <button class="options-keyboard-shortcuts-set-all-to-default btn">重置所有快捷键</button>\n    </div>\n</div>'),this.$widget.find(".options-keyboard-shortcuts-reload-app").on("click",(()=>e.default.reloadFrontendApp()));const t=this.$widget.find(".keyboard-shortcut-table tbody");o.Z.get("keyboard-actions").then((e=>{Dt=e;for(const n of e){const e=$("<tr>");n.separator?e.append($('<td colspan="4">').attr("style","background-color: var(--accented-background-color); font-weight: bold;").text(n.separator)):e.append($("<td>").text(n.actionName)).append($("<td>").append($('<input type="text" class="form-control">').val(n.effectiveShortcuts.join(", ")).attr("data-keyboard-action-name",n.actionName).attr("data-default-keyboard-shortcuts",n.defaultShortcuts.join(", ")))).append($("<td>").text(n.defaultShortcuts.join(", "))).append($("<td>").text(n.description)),t.append(e)}})),t.on("change","input.form-control",(t=>{const e=this.$widget.find(t.target),n=e.attr("data-keyboard-action-name"),i=e.val().replace("+,","+Comma").split(",").map((t=>t.replace("+Comma","+,"))).filter((t=>!!t)),o=`keyboardShortcuts${n.substr(0,1).toUpperCase()}${n.substr(1)}`;this.updateOption(o,JSON.stringify(i))})),this.$widget.find(".options-keyboard-shortcuts-set-all-to-default").on("click",(async()=>{await U.Z.confirm("确定要重置所有快捷键吗？")&&t.find("input.form-control").each(((t,e)=>{const n=this.$widget.find(e).attr("data-default-keyboard-shortcuts");this.$widget.find(e).val()!==n&&this.$widget.find(e).val(n).trigger("change")}))}));const n=this.$widget.find(".keyboard-shortcut-filter");n.on("keyup",(()=>{const e=n.val().trim().toLowerCase();t.find("tr").each(((t,n)=>{if(!e)return void this.$widget.find(n).show();const i=this.$widget.find(n).find("input").attr("data-keyboard-action-name");if(!i)return void this.$widget.find(n).hide();const o=Dt.find((t=>t.actionName===i));o?this.$widget.find(n).toggle(!!(o.actionName.toLowerCase().includes(e)||o.defaultShortcuts.some((t=>t.toLowerCase().includes(e)))||o.effectiveShortcuts.some((t=>t.toLowerCase().includes(e)))||o.description&&o.description.toLowerCase().includes(e))):this.$widget.find(n).hide()}))}))}}],_optionsTextNotes:[class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>标题风格</h4>\n    \n    <select class="heading-style form-control">\n        <option value="plain">纯文本</option>\n        <option value="underline">下划线</option>\n        <option value="markdown">Markdown风格</option>\n    </select>\n</div>'),this.$body=$("body"),this.$headingStyle=this.$widget.find(".heading-style"),this.$headingStyle.on("change",(()=>{const t=this.$headingStyle.val();this.toggleBodyClass("heading-style-",t),this.updateOption("headingStyle",t)}))}async optionsLoaded(t){this.$headingStyle.val(t.headingStyle)}toggleBodyClass(t,e){for(const e of Array.from(this.$body[0].classList))e.startsWith(t)&&this.$body.removeClass(e);this.$body.addClass(t+e)}},class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>目录</h4>\n    \n    当笔记具有超过定义数量的标题时, 目录将出现在文本笔记中. 你可以自定义这个数值:\n    \n    <div class="form-group">\n        <input type="number" class="min-toc-headings form-control options-number-input options-number-input" min="0" max="9999999999999999" step="1" />\n    </div>\n    \n    <p>您可以设置一个非常大的数来禁用目录.</p>\n</div>'),this.$minTocHeadings=this.$widget.find(".min-toc-headings"),this.$minTocHeadings.on("change",(()=>this.updateOption("minTocHeadings",this.$minTocHeadings.val())))}async optionsLoaded(t){this.$minTocHeadings.val(t.minTocHeadings)}},class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>高亮列表</h4>\n\n    <p>您可以自定义在右侧面板显示的高亮列表:</p>\n\n    </div>\n        <label><input type="checkbox" class="highlights-list-check" value="bold"> 粗体字 &nbsp;</label>\n        <label><input type="checkbox" class="highlights-list-check" value="italic"> 斜体字 &nbsp;</label>\n        <label><input type="checkbox" class="highlights-list-check" value="underline"> 下划线字体 &nbsp;</label>\n        <label><input type="checkbox" class="highlights-list-check" value="color"> 彩色字体 &nbsp;</label>\n        <label><input type="checkbox" class="highlights-list-check" value="bgColor"> 带有背景色的字体 &nbsp;</label>\n    </div>\n\n    <br/><br/>\n    <h5>Highlists List visibility</h5>\n\n    <p>您可以通过添加 <code>#hideHighlightWidget</code> 标签来在每个笔记中隐藏高亮小部件。</p>\n</div>'),this.$hlt=this.$widget.find("input.highlights-list-check"),this.$hlt.on("change",(()=>{const t=this.$widget.find('input.highlights-list-check[type="checkbox"]:checked').map((function(){return this.value})).get();this.updateOption("highlightsList",JSON.stringify(t))}))}async optionsLoaded(t){const e=JSON.parse(t.highlightsList);this.$widget.find('input.highlights-list-check[type="checkbox"]').each((function(){-1!==$.inArray($(this).val(),e)?$(this).prop("checked",!0):$(this).prop("checked",!1)}))}},class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>自动只读大小</h4>\n\n    <p>自动只读大小是指笔记超过设置的大小后自动设置为只读模式(为性能考虑)</p>\n\n    <div class="form-group">\n        <label>自动只读大小 (文字笔记)</label>\n        <input class="auto-readonly-size-text form-control options-number-input" type="number" min="0">\n    </div>\n</div>'),this.$autoReadonlySizeText=this.$widget.find(".auto-readonly-size-text"),this.$autoReadonlySizeText.on("change",(()=>this.updateOption("autoReadonlySizeText",this.$autoReadonlySizeText.val())))}async optionsLoaded(t){this.$autoReadonlySizeText.val(t.autoReadonlySizeText)}}],_optionsCodeNotes:[class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>在代码笔记中使用vim按键绑定(无ex模式)</h4>\n    <label>\n        <input type="checkbox" class="vim-keymap-enabled">\n        启用vim按键绑定\n    </label>\n</div>'),this.$vimKeymapEnabled=this.$widget.find(".vim-keymap-enabled"),this.$vimKeymapEnabled.on("change",(()=>this.updateCheckboxOption("vimKeymapEnabled",this.$vimKeymapEnabled)))}async optionsLoaded(t){this.setCheckboxState(this.$vimKeymapEnabled,t.vimKeymapEnabled)}},class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>代码笔记自动换行</h4>\n    <label>\n        <input type="checkbox" class="line-wrap-enabled">\n        启用自动换行(需要重新加载前端才会生效)\n    </label>\n</div>'),this.$codeLineWrapEnabled=this.$widget.find(".line-wrap-enabled"),this.$codeLineWrapEnabled.on("change",(()=>this.updateCheckboxOption("codeLineWrapEnabled",this.$codeLineWrapEnabled)))}async optionsLoaded(t){this.setCheckboxState(this.$codeLineWrapEnabled,t.codeLineWrapEnabled)}},class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>自动只读大小</h4>\n\n    <p>自动只读大小是指笔记超过设置的大小后自动设置为只读模式(为性能考虑)</p>\n\n    <div class="form-group">\n        <label>自动只读大小 (代码笔记)</label>\n        <input class="auto-readonly-size-code form-control options-number-input" type="number" min="0">\n    </div>\n</div>'),this.$autoReadonlySizeCode=this.$widget.find(".auto-readonly-size-code"),this.$autoReadonlySizeCode.on("change",(()=>this.updateOption("autoReadonlySizeCode",this.$autoReadonlySizeCode.val())))}async optionsLoaded(t){this.$autoReadonlySizeCode.val(t.autoReadonlySizeCode)}},class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>下拉菜单可用的MIME文件类型</h4>\n    \n    <ul class="options-mime-types" style="list-style-type: none;"></ul>\n</div>'),this.$mimeTypes=this.$widget.find(".options-mime-types")}async optionsLoaded(t){this.$mimeTypes.empty();for(const t of await ft.getMimeTypes()){const e="code-mime-type-"+Bt++;this.$mimeTypes.append($("<li>").append($('<input type="checkbox">').attr("id",e).attr("data-mime-type",t.mime).prop("checked",t.enabled)).on("change",(()=>this.save())).append(" &nbsp; ").append($("<label>").attr("for",e).text(t.title)))}}async save(){const t=[];this.$mimeTypes.find("input:checked").each(((e,n)=>t.push(this.$widget.find(n).attr("data-mime-type")))),await this.updateOption("codeNotesMimeTypes",JSON.stringify(t)),ft.loadMimeTypes()}}],_optionsImages:[class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <style>\n        .options-section .disabled-field {\n            opacity: 0.5;\n            pointer-events: none;\n        }\n    </style>\n\n    <h4>图片</h4>\n    \n    <label>\n        <input class="download-images-automatically" type="checkbox" name="download-images-automatically">\n        自动下载图片以便于离线使用.\n    </label>\n    \n    <p>(粘贴的HTML可能包含在线图片的引用, Trilium会找到并下载这些图片用于离线使用)</p>\n    \n    <label>\n        <input class="image-compresion-enabled" type="checkbox" name="image-compression-enabled">\n        启用图像压缩\n    </label>\n\n    <div class="image-compression-enabled-wraper">\n        <div class="form-group">\n            <label>图片的最大像素宽度和高度(超过限制会缩放).</label>\n            <input class="image-max-width-height form-control options-number-input" type="number" min="1">\n        </div>\n    \n        <div class="form-group">\n            <label>JPEG质量 (10最低, 100最好, 推荐设置为50-85之间)</label>\n            <input class="image-jpeg-quality form-control options-number-input" min="10" max="100" type="number">\n        </div>\n    </div>\n</div>\n'),this.$imageMaxWidthHeight=this.$widget.find(".image-max-width-height"),this.$imageJpegQuality=this.$widget.find(".image-jpeg-quality"),this.$imageMaxWidthHeight.on("change",(()=>this.updateOption("imageMaxWidthHeight",this.$imageMaxWidthHeight.val()))),this.$imageJpegQuality.on("change",(()=>this.updateOption("imageJpegQuality",this.$imageJpegQuality.val().trim()||"75"))),this.$downloadImagesAutomatically=this.$widget.find(".download-images-automatically"),this.$downloadImagesAutomatically.on("change",(()=>this.updateCheckboxOption("downloadImagesAutomatically",this.$downloadImagesAutomatically))),this.$enableImageCompression=this.$widget.find(".image-compresion-enabled"),this.$imageCompressionWrapper=this.$widget.find(".image-compression-enabled-wraper"),this.$enableImageCompression.on("change",(()=>{this.updateCheckboxOption("compressImages",this.$enableImageCompression),this.setImageCompression()}))}optionsLoaded(t){this.$imageMaxWidthHeight.val(t.imageMaxWidthHeight),this.$imageJpegQuality.val(t.imageJpegQuality),this.setCheckboxState(this.$downloadImagesAutomatically,t.downloadImagesAutomatically),this.setCheckboxState(this.$enableImageCompression,t.compressImages),this.setImageCompression()}setImageCompression(){this.$enableImageCompression.prop("checked")?this.$imageCompressionWrapper.removeClass("disabled-field"):this.$imageCompressionWrapper.addClass("disabled-field")}}],_optionsSpellcheck:[class extends Zt{doRender(){if(this.$widget=$('\n<div class="options-section">\n    <h4>拼写检查</h4>\n\n    <p>这些选项只在桌面客户端有效, 浏览器会使用浏览器的拼写检查. 修改设置后需要重启应用.</p>\n\n    <label>\n        <input type="checkbox" class="spell-check-enabled">\n        开启拼写检查\n    </label>\n\n    <br/>\n\n    <div class="form-group">\n        <label>语言码</label>\n        <input type="text" class="spell-check-language-code form-control" placeholder="for example &quot;en-US&quot;, &quot;de-AT&quot;">\n    </div>\n\n    <p>多个语言可以用逗号分隔, 例如: <code>en-US, de-DE, cs</code>. 拼写检查选项的修改将在应用程序重新启动后生效.</p>\n    \n    <p><strong>可用的语言代码</strong> <span class="available-language-codes"></span></p>\n</div>'),this.$spellCheckEnabled=this.$widget.find(".spell-check-enabled"),this.$spellCheckLanguageCode=this.$widget.find(".spell-check-language-code"),this.$spellCheckEnabled.on("change",(()=>this.updateCheckboxOption("spellCheckEnabled",this.$spellCheckEnabled))),this.$spellCheckLanguageCode.on("change",(()=>this.updateOption("spellCheckLanguageCode",this.$spellCheckLanguageCode.val()))),this.$availableLanguageCodes=this.$widget.find(".available-language-codes"),e.default.isElectron()){const{webContents:t}=e.default.dynamicRequire("@electron/remote").getCurrentWindow();this.$availableLanguageCodes.text(t.session.availableSpellCheckerLanguages.join(", "))}}optionsLoaded(t){this.setCheckboxState(this.$spellCheckEnabled,t.spellCheckEnabled),this.$spellCheckLanguageCode.val(t.spellCheckLanguageCode)}}],_optionsPassword:[class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4 class="password-heading"></h4>\n    \n    <div class="alert alert-warning" role="alert" style="font-weight: bold; color: red !important;">\n      请一定要记住你的新密码. 密码被用来登录和加密笔记. 如果你忘记了密码, 所有受保护的笔记将永远丢失. \n      如果你忘记了密码, <a class="reset-password-button" href="javascript:">点击这里来重置它</a>.\n    </div>\n    \n    <form class="change-password-form">\n        <div class="old-password-form-group form-group">\n            <label>旧密码</label>\n            <input class="old-password form-control" type="password">\n        </div>\n    \n        <div class="form-group">\n            <label>新密码</label>\n            <input class="new-password1 form-control" type="password">\n        </div>\n    \n        <div class="form-group">\n            <label>新密码确认</label>\n            <input class="new-password2 form-control" type="password">\n        </div>\n    \n        <button class="save-password-button btn btn-primary">修改密码</button>\n    </form>\n</div>\n\n<div class="options-section">\n    <h4>保护会话超时</h4>\n\n    <p>保护会话超时是从浏览器内存里清理保护会话的间隔, 这个时间从最后一次编辑保护的笔记开始计算. 详见 <a href="https://github.com/zadam/trilium/wiki/Protected-notes" class="external">wiki</a> 以获取更多信息</p>\n\n    <div class="form-group">\n        <label>保护会话超时(单位:秒)</label>\n        <input class="protected-session-timeout-in-seconds form-control options-number-input" type="number" min="60">\n    </div>\n</div>'),this.$passwordHeading=this.$widget.find(".password-heading"),this.$changePasswordForm=this.$widget.find(".change-password-form"),this.$oldPassword=this.$widget.find(".old-password"),this.$newPassword1=this.$widget.find(".new-password1"),this.$newPassword2=this.$widget.find(".new-password2"),this.$savePasswordButton=this.$widget.find(".save-password-button"),this.$resetPasswordButton=this.$widget.find(".reset-password-button"),this.$resetPasswordButton.on("click",(async()=>{if(confirm("重置密码会永远丢失所有受保护的笔记. 确定要重置密码吗?")){await o.Z.post("password/reset?really=yesIReallyWantToResetPasswordAndLoseAccessToMyProtectedNotes");const t=await o.Z.get("options");this.optionsLoaded(t),O.default.showError("Password has been reset. Please set new password")}})),this.$changePasswordForm.on("submit",(()=>this.save())),this.$protectedSessionTimeout=this.$widget.find(".protected-session-timeout-in-seconds"),this.$protectedSessionTimeout.on("change",(()=>this.updateOption("protectedSessionTimeout",this.$protectedSessionTimeout.val())))}optionsLoaded(t){const e="true"===t.isPasswordSet;this.$widget.find(".old-password-form-group").toggle(e),this.$passwordHeading.text(e?"修改密码":"设置密码"),this.$savePasswordButton.text(e?"修改密码":"设置密码"),this.$protectedSessionTimeout.val(t.protectedSessionTimeout)}save(){const t=this.$oldPassword.val(),e=this.$newPassword1.val(),n=this.$newPassword2.val();return this.$oldPassword.val(""),this.$newPassword1.val(""),this.$newPassword2.val(""),e!==n?(O.default.showError("New passwords are not the same."),!1):(o.Z.post("password/change",{current_password:t,new_password:e}).then((t=>{t.success?(O.default.showError("Password has been changed. Trilium will be reloaded after you press OK."),H.Z.resetProtectedSession()):O.default.showError(t.message)})),!1)}}],_optionsEtapi:[class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>ETAPI</h4>\n    \n    <p>ETAPI 是一个 REST API, 用于以编程方式访问 Trilium 实例, 无需 UI. <br/>\n       更多信息请访问 <a href="https://github.com/zadam/trilium/wiki/ETAPI">wiki</a> 和 <a onclick="window.open(\'etapi/etapi.openapi.yaml\')" href="etapi/etapi.openapi.yaml">ETAPI OpenAPI 文档</a>.</p>\n    \n    <button type="button" class="create-etapi-token btn btn-sm">创建新的 ETAPI 令牌</button>\n\n    <h5>已有令牌</h5>\n    \n    <div class="no-tokens-yet">暂无令牌. 点击上方按钮来创建令牌.</div>\n    \n    <div style="overflow: auto; height: 500px;">\n        <table class="tokens-table table table-stripped">\n        <thead>\n            <tr>\n                <th>令牌名称</th>\n                <th>创建</th>\n                <th>动作</th>\n            </tr>\n        </thead>\n        <tbody></tbody>\n        </table>\n    </div>\n</div>\n\n<style>\n    .token-table-button {\n        display: inline-block;\n        cursor: pointer;\n        padding: 3px;\n        margin-right: 20px;\n        font-size: large;\n        border: 1px solid transparent;\n        border-radius: var(--button-border-radius);\n    }\n    \n    .token-table-button:hover {\n        border: 1px solid var(--button-border-color);\n    }\n</style>'),this.$widget.find(".create-etapi-token").on("click",(async()=>{const t=await U.Z.prompt({title:"新的 ETAPI 令牌",message:"请输入新令牌的名称",defaultValue:"新令牌"});if(!t.trim())return void O.default.showError("令牌名称不能为空");const{authToken:e}=await o.Z.post("etapi-tokens",{tokenName:t});await U.Z.prompt({title:"ETAPI 令牌已创建",message:"复制新令牌到剪贴板. Trilium会保存令牌的哈希值, 请注意这将是你最后一次看到这个令牌.",defaultValue:e}),this.refreshTokens()})),this.refreshTokens()}async refreshTokens(){const t=this.$widget.find(".no-tokens-yet"),e=this.$widget.find(".tokens-table"),n=await o.Z.get("etapi-tokens");t.toggle(0===n.length),e.toggle(n.length>0);const i=e.find("tbody");i.empty();for(const t of n)i.append($("<tr>").append($("<td>").text(t.name)).append($("<td>").text(t.utcDateCreated)).append($("<td>").append($('<span class="bx bx-pen token-table-button" title="重命名此令牌"></span>').on("click",(()=>this.renameToken(t.etapiTokenId,t.name))),$('<span class="bx bx-trash token-table-button" title="删除/停用此令牌"></span>').on("click",(()=>this.deleteToken(t.etapiTokenId,t.name))))))}async renameToken(t,e){const n=await U.Z.prompt({title:"重命名令牌",message:"请输入新令牌的名称",defaultValue:e});n?.trim()&&(await o.Z.patch(`etapi-tokens/${t}`,{name:n}),this.refreshTokens())}async deleteToken(t,e){await U.Z.confirm(`你确认要删除ETAPI令牌 "${e}"?`)&&(await o.Z.remove(`etapi-tokens/${t}`),this.refreshTokens())}}],_optionsBackup:[class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>自动备份</h4>\n    \n    <p>Trilium 可以自动备份数据库:</p>\n    \n    <ul style="list-style: none">\n        <li>\n            <label>\n                <input type="checkbox" class="daily-backup-enabled">\n                启用每日备份\n            </label>\n        </li>\n        <li>    \n            <label>\n                <input type="checkbox" class="weekly-backup-enabled">\n                启用每周备份\n            </label>\n        </li>\n        <li>\n        <label>\n            <input type="checkbox" class="monthly-backup-enabled">\n            启用每月备份\n            </label>\n        </li>\n    </ul>\n    \n    <p>建议打开备份功能, 但这可能会使大型数据库和/或慢速存储设备的应用程序启动变慢.</p>\n</div>\n\n<div class="options-section">\n    <h4>立即备份</h4>\n    \n    <button class="backup-database-button btn">立即备份数据库</button>\n</div>\n\n<div class="options-section">\n    <h4>已有备份</h4>\n    \n    <ul class="existing-backup-list"></ul>\n</div>\n'),this.$backupDatabaseButton=this.$widget.find(".backup-database-button"),this.$backupDatabaseButton.on("click",(async()=>{const{backupFile:t}=await o.Z.post("database/backup-database");O.default.showMessage(`数据库已备份至${t}`,1e4),this.refresh()})),this.$dailyBackupEnabled=this.$widget.find(".daily-backup-enabled"),this.$weeklyBackupEnabled=this.$widget.find(".weekly-backup-enabled"),this.$monthlyBackupEnabled=this.$widget.find(".monthly-backup-enabled"),this.$dailyBackupEnabled.on("change",(()=>this.updateCheckboxOption("dailyBackupEnabled",this.$dailyBackupEnabled))),this.$weeklyBackupEnabled.on("change",(()=>this.updateCheckboxOption("weeklyBackupEnabled",this.$weeklyBackupEnabled))),this.$monthlyBackupEnabled.on("change",(()=>this.updateCheckboxOption("monthlyBackupEnabled",this.$monthlyBackupEnabled))),this.$existingBackupList=this.$widget.find(".existing-backup-list")}optionsLoaded(t){this.setCheckboxState(this.$dailyBackupEnabled,t.dailyBackupEnabled),this.setCheckboxState(this.$weeklyBackupEnabled,t.weeklyBackupEnabled),this.setCheckboxState(this.$monthlyBackupEnabled,t.monthlyBackupEnabled),o.Z.get("database/backups").then((t=>{this.$existingBackupList.empty(),t.length||(t=[{filePath:"还没有备份",mtime:""}]);for(const{filePath:e,mtime:n}of t)this.$existingBackupList.append($("<li>").text(`${e} ${n?` - ${n}`:""}`))}))}}],_optionsSync:[class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4 style="margin-top: 0px;">同步设置</h4>\n    \n    <form class="sync-setup-form">\n        <div class="form-group">\n            <label>服务器地址</label>\n            <input class="sync-server-host form-control" placeholder="https://<host>:<port>">\n        </div>\n    \n        <div class="form-group">\n            <label>同步超时(单位:毫秒)</label>\n            <input class="sync-server-timeout form-control" min="1" max="10000000" type="number" style="text-align: left;">\n        </div>\n    \n        <div class="form-group">\n            <label>同步代理服务器(可选)</label>\n            <input class="sync-proxy form-control" placeholder="https://<host>:<port>">\n    \n            <p><strong>备注:</strong> 代理设置留空则使用系统代理(仅桌面客户端有效).</p>\n            <p>另一个特殊值是<code>noproxy</code>，它会强制忽略代理，即使是系统代理也会忽略，并且会遵从<code>NODE_TLS_REJECT_UNAUTHORIZED</code>.</p>\n        </div>\n    \n        <div style="display: flex; justify-content: space-between;">\n            <button class="btn btn-primary">保存</button>\n    \n            <button class="btn" type="button" data-help-page="Synchronization">帮助</button>\n        </div>\n    </form>\n</div>\n\n<div class="options-section">\n    <h4>同步测试</h4>\n    \n    <p>测试和同步服务器之间的连接. 如果同步服务器没有初始化, 会将本地文档同步到同步服务器上.</p>\n    \n    <button class="test-sync-button btn">测试同步</button>\n</div>'),this.$form=this.$widget.find(".sync-setup-form"),this.$syncServerHost=this.$widget.find(".sync-server-host"),this.$syncServerTimeout=this.$widget.find(".sync-server-timeout"),this.$syncProxy=this.$widget.find(".sync-proxy"),this.$testSyncButton=this.$widget.find(".test-sync-button"),this.$form.on("submit",(()=>this.save())),this.$testSyncButton.on("click",(async()=>{const t=await o.Z.post("sync/test");t.success?O.default.showMessage(t.message):O.default.showError(`Sync server handshake failed, error: ${t.message}`)}))}optionsLoaded(t){this.$syncServerHost.val(t.syncServerHost),this.$syncServerTimeout.val(t.syncServerTimeout),this.$syncProxy.val(t.syncProxy)}save(){return this.updateMultipleOptions({syncServerHost:this.$syncServerHost.val(),syncServerTimeout:this.$syncServerTimeout.val(),syncProxy:this.$syncProxy.val()}),!1}}],_optionsOther:[class extends Zt{isEnabled(){return super.isEnabled()&&e.default.isElectron()}doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>搜索引擎</h4>\n    \n    <p>自定义搜索引擎需要设置名称和URL。如果其中任何一个未设置，将使用DuckDuckGo作为默认搜索引擎。</p>\n    \n    <form class="sync-setup-form">\n        <div class="form-group">\n            <label>预定义的搜索引擎模板</label>\n            <select class="predefined-search-engine-select form-control">\n                <option value="Bing">必应</option>\n                <option value="Baidu">百度</option>\n                <option value="DuckDuckGo">DuckDuckGo</option>\n                <option value="Google">谷歌</option>\n            </select>\n        </div>\n        \n        <div class="form-group">\n            <label>自定义搜索引擎名称</label>\n            <input type="text" class="custom-search-engine-name form-control" placeholder="Customize search engine name">\n        </div>\n        \n        <div class="form-group">\n            <label>自定义搜索引擎的URL应该包含<code>{keyword}</code>作为搜索词的占位符。</label>\n            <input type="text" class="custom-search-engine-url form-control" placeholder="Customize search engine url">\n        </div>\n        \n        <div style="display: flex; justify-content: space-between;">\n            <button class="btn btn-primary">保存</button>\n        </div>\n    </form>\n</div>'),this.$form=this.$widget.find(".sync-setup-form"),this.$predefinedSearchEngineSelect=this.$widget.find(".predefined-search-engine-select"),this.$customSearchEngineName=this.$widget.find(".custom-search-engine-name"),this.$customSearchEngineUrl=this.$widget.find(".custom-search-engine-url"),this.$predefinedSearchEngineSelect.on("change",(()=>{const t=this.$predefinedSearchEngineSelect.val();this.$customSearchEngineName[0].value=t,this.$customSearchEngineUrl[0].value=Ot[t]})),this.$form.on("submit",(()=>{this.updateMultipleOptions({customSearchEngineName:this.$customSearchEngineName.val(),customSearchEngineUrl:this.$customSearchEngineUrl.val()})}))}async optionsLoaded(t){this.$predefinedSearchEngineSelect.val(""),this.$customSearchEngineName[0].value=t.customSearchEngineName,this.$customSearchEngineUrl[0].value=t.customSearchEngineUrl}},class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>托盘</h4>\n\n    <label>\n        <input type="checkbox" class="tray-enabled">\n        启用托盘图标(修改需要重启生效)\n    </label>\n</div>'),this.$trayEnabled=this.$widget.find(".tray-enabled"),this.$trayEnabled.on("change",(()=>this.updateOption("disableTray",this.$trayEnabled.is(":checked")?"false":"true")))}async optionsLoaded(t){this.$trayEnabled.prop("checked","true"!==t.disableTray)}},class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>笔记清理超时</h4>\n\n    <p>被删除的笔记(属性, 修改版本等)只是被标记为"删除", 是可以从"最近笔记"还原的. 过了一段时间这些笔记会被"清理", 被清理的笔记就无法还原了. 这个设置可以用来调整从"删除"到被"清理"的时间间隔</p>\n\n    <div class="form-group">\n        <label>超过X秒后清理笔记</label>\n        <input class="erase-entities-after-time-in-seconds form-control options-number-input" type="number" min="0">\n    </div>\n    \n    <p>您也可以手动触发清理（而不考虑上述定义的超时时间）:</p>\n    \n    <button class="erase-deleted-notes-now-button btn">清理已删除的笔记</button>\n</div>'),this.$eraseEntitiesAfterTimeInSeconds=this.$widget.find(".erase-entities-after-time-in-seconds"),this.$eraseEntitiesAfterTimeInSeconds.on("change",(()=>this.updateOption("eraseEntitiesAfterTimeInSeconds",this.$eraseEntitiesAfterTimeInSeconds.val()))),this.$eraseDeletedNotesButton=this.$widget.find(".erase-deleted-notes-now-button"),this.$eraseDeletedNotesButton.on("click",(()=>{o.Z.post("notes/erase-deleted-notes-now").then((()=>{O.default.showMessage("删除的笔记已被清理.")}))}))}async optionsLoaded(t){this.$eraseEntitiesAfterTimeInSeconds.val(t.eraseEntitiesAfterTimeInSeconds)}},class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>附件清理超时</h4>\n\n    <p>如果附件在一段时间后不再被笔记引用，它们将自动被删除(并被清理)。</p>\n\n    <div class="form-group">\n        <label>在附件在笔记中未被使用 X 秒后清理附件</label>\n        <input class="erase-unused-attachments-after-time-in-seconds form-control options-number-input" type="number" min="0">\n    </div>\n    \n    <p>您也可以手动触发清理（而不考虑上述定义的超时时间）:</p>\n    \n    <button class="erase-unused-attachments-now-button btn">立即清理未使用的附件</button>\n</div>'),this.$eraseUnusedAttachmentsAfterTimeInSeconds=this.$widget.find(".erase-unused-attachments-after-time-in-seconds"),this.$eraseUnusedAttachmentsAfterTimeInSeconds.on("change",(()=>this.updateOption("eraseUnusedAttachmentsAfterSeconds",this.$eraseUnusedAttachmentsAfterTimeInSeconds.val()))),this.$eraseUnusedAttachmentsNowButton=this.$widget.find(".erase-unused-attachments-now-button"),this.$eraseUnusedAttachmentsNowButton.on("click",(()=>{o.Z.post("notes/erase-unused-attachments-now").then((()=>{O.default.showMessage("未使用的附件已被删除.")}))}))}async optionsLoaded(t){this.$eraseUnusedAttachmentsAfterTimeInSeconds.val(t.eraseUnusedAttachmentsAfterSeconds)}},class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>笔记修改快照间隔</h4>\n\n    <p>这个是笔记修改后创建快照的时间. 详见:<a href="https://github.com/zadam/trilium/wiki/Note-revisions" class="external">wiki</a> 以获取更多信息</p>\n\n    <div class="form-group">\n        <label>笔记修改快照间隔(单位:秒)</label>\n        <input class="revision-snapshot-time-interval-in-seconds form-control options-number-input" type="number" min="10">\n    </div>\n</div>'),this.$revisionsTimeInterval=this.$widget.find(".revision-snapshot-time-interval-in-seconds"),this.$revisionsTimeInterval.on("change",(()=>this.updateOption("revisionSnapshotTimeInterval",this.$revisionsTimeInterval.val())))}async optionsLoaded(t){this.$revisionsTimeInterval.val(t.revisionSnapshotTimeInterval)}},class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>网络连接</h4>\n        \n    <label>\n        <input class="check-for-updates" type="checkbox" name="check-for-updates">\n        自动检查更新\n    </label>\n</div>'),this.$checkForUpdates=this.$widget.find(".check-for-updates"),this.$checkForUpdates.on("change",(()=>this.updateCheckboxOption("checkForUpdates",this.$checkForUpdates)))}async optionsLoaded(t){this.setCheckboxState(this.$checkForUpdates,t.checkForUpdates)}}],_optionsAdvanced:[class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>数据库完整性检查</h4>\n    \n    <p>检查SQLite数据库是否损坏. 根据数据库大小, 可能会需要一些时间.</p>\n    \n    <button class="check-integrity-button btn">检查数据库完整性</button>\n</div>'),this.$checkIntegrityButton=this.$widget.find(".check-integrity-button"),this.$checkIntegrityButton.on("click",(async()=>{O.default.showMessage("正在检查数据库完整性...");const{results:t}=await o.Z.get("database/check-integrity");1===t.length&&"ok"===t[0].integrity_check?O.default.showMessage("完整性检查成功 - 未发现问题."):O.default.showMessage(`Integrity check failed: ${JSON.stringify(t,null,2)}`,15e3)}))}},class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>一致性检查</h4>\n    \n    <button class="find-and-fix-consistency-issues-button btn">查找并解决一致性问题</button>\n</div>'),this.$findAndFixConsistencyIssuesButton=this.$widget.find(".find-and-fix-consistency-issues-button"),this.$findAndFixConsistencyIssuesButton.on("click",(async()=>{O.default.showMessage("查找并修复一致性问题..."),await o.Z.post("database/find-and-fix-consistency-issues"),O.default.showMessage("一致性问题应该已经解决了.")}))}},class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>数据库匿名化</h4>\n    \n    <h5>完全匿名化</h5>\n    \n    <p>这会创建一个数据库的副本并匿名化处理(删除所有笔记内容, 仅保留结构和一些非敏感的元数据信息)用来分享到网上做调试而不用担心泄漏你的个人资料.</p>\n    \n    <button class="anonymize-full-button btn">保存完全匿名化的数据库</button>\n\n    <h5>轻度匿名化</h5>\n    \n    <p>此操作将创建数据库的新副本并对其进行轻度匿名化 - 仅删除所有笔记的内容,但标题和属性将保留. 另外, 自定义前端和后端JS代码以及自定义部件会保留. 这会给查找bug提供更完整的环境.</p>\n    \n    <p>您可以自行决定是否要提供完全或轻度匿名化的数据库. 完全匿名化的数据库会对解决问题有帮助, 在一些情况下, 如果能提供轻度匿名化的数据库能加快定位bug和修复的过程.</p>\n    \n    <button class="anonymize-light-button btn">保存轻度匿名化的数据库</button>\n    \n    <h5>已有匿名化数据库</h5>\n    \n    <ul class="existing-anonymized-databases"></ul>\n</div>'),this.$anonymizeFullButton=this.$widget.find(".anonymize-full-button"),this.$anonymizeLightButton=this.$widget.find(".anonymize-light-button"),this.$anonymizeFullButton.on("click",(async()=>{O.default.showMessage("创建完全匿名的数据库...");const t=await o.Z.post("database/anonymize/full");t.success?O.default.showMessage(`Created fully anonymized database in ${t.anonymizedFilePath}`,1e4):O.default.showError("无法创建匿名化数据库, 详情请检查后台日志."),this.refresh()})),this.$anonymizeLightButton.on("click",(async()=>{O.default.showMessage("创建轻度匿名数据库...");const t=await o.Z.post("database/anonymize/light");t.success?O.default.showMessage(`Created lightly anonymized database in ${t.anonymizedFilePath}`,1e4):O.default.showError("无法创建匿名化数据库, 详情请检查后台日志."),this.refresh()})),this.$existingAnonymizedDatabases=this.$widget.find(".existing-anonymized-databases")}optionsLoaded(t){o.Z.get("database/anonymized-databases").then((t=>{this.$existingAnonymizedDatabases.empty(),t.length||(t=[{filePath:"还没有匿名化的数据库"}]);for(const{filePath:e}of t)this.$existingAnonymizedDatabases.append($("<li>").text(e))}))}},class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>同步</h4>\n    <button class="force-full-sync-button btn">强制完全同步</button> \n    \n    <button class="fill-entity-changes-button btn">填充变化记录</button>\n</div>'),this.$forceFullSyncButton=this.$widget.find(".force-full-sync-button"),this.$fillEntityChangesButton=this.$widget.find(".fill-entity-changes-button"),this.$forceFullSyncButton.on("click",(async()=>{await o.Z.post("sync/force-full-sync"),O.default.showMessage("完全同步已触发")})),this.$fillEntityChangesButton.on("click",(async()=>{O.default.showMessage("填充实体修改数据..."),await o.Z.post("sync/fill-entity-changes"),O.default.showMessage("同步行已成功填充")}))}async optionsLoaded(t){}},class extends Zt{doRender(){this.$widget=$('\n<div class="options-section">\n    <h4>整理数据库</h4>\n    \n    <p>这会重建数据库, 通常会减少占用空间, 不会删除数据.</p>\n    \n    <button class="vacuum-database-button btn">整理数据库</button>\n</div>'),this.$vacuumDatabaseButton=this.$widget.find(".vacuum-database-button"),this.$vacuumDatabaseButton.on("click",(async()=>{O.default.showMessage("整理数据库..."),await o.Z.post("database/vacuum-database"),O.default.showMessage("数据库已整理")}))}}],_backendLog:[Wt]};class zt extends v.Z{constructor(t,e){super(),this.attachment=t,this.isFullDetail=e}get attachmentId(){return this.attachment.attachmentId}doRender(){this.$widget=$('\n<div class="dropdown attachment-actions">\n    <style>\n    .attachment-actions {\n        width: 35px;\n        height: 35px;\n    }\n    \n    .attachment-actions .dropdown-menu {\n        width: 20em;\n    }\n    \n    .attachment-actions .dropdown-item[disabled], .attachment-actions .dropdown-item[disabled]:hover {\n        color: var(--muted-text-color) !important;\n        background-color: transparent !important;\n        pointer-events: none; /* makes it unclickable */\n    }\n    </style>\n\n    <button type="button" data-toggle="dropdown" aria-haspopup="true" \n        aria-expanded="false" class="icon-action icon-action-always-border bx bx-dots-vertical-rounded"\n        style="position: relative; top: 3px;"></button>\n\n    <div class="dropdown-menu dropdown-menu-right">\n        <a data-trigger-command="openAttachment" class="dropdown-item"\n            title="文件将在外部应用程序中打开并监视更改, 然后您可以将修改后的版本上传回Trilium">用外部程序打开</a>\n        <a data-trigger-command="openAttachmentCustom" class="dropdown-item"\n            title="文件将在外部应用程序中打开并监视更改, 然后您可以将修改后的版本上传回Trilium">使用自定义程序打开</a>\n        <a data-trigger-command="downloadAttachment" class="dropdown-item">下载</a>\n        <a data-trigger-command="renameAttachment" class="dropdown-item">重命名附件</a>\n        <a data-trigger-command="uploadNewAttachmentRevision" class="dropdown-item">上传新的修改</a>\n        <a data-trigger-command="copyAttachmentLinkToClipboard" class="dropdown-item">复制链接到剪贴板</a>\n        <a data-trigger-command="convertAttachmentIntoNote" class="dropdown-item">将附件转换为笔记</a>\n        <a data-trigger-command="deleteAttachment" class="dropdown-item">删除附件</a>\n    </div>\n    \n    <input type="file" class="attachment-upload-new-revision-input" style="display: none">\n</div>'),this.$widget.on("click",".dropdown-item",(()=>this.$widget.find("[data-toggle='dropdown']").dropdown("toggle"))),this.$uploadNewRevisionInput=this.$widget.find(".attachment-upload-new-revision-input"),this.$uploadNewRevisionInput.on("change",(async()=>{const t=this.$uploadNewRevisionInput[0].files[0];this.$uploadNewRevisionInput.val(""),(await o.Z.upload(`attachments/${this.attachmentId}/file`,t)).uploaded?O.default.showMessage("已上传新附件版本。"):O.default.showError("Upload of a new attachment revision failed.")})),this.isFullDetail||(this.$widget.find("[data-trigger-command='openAttachment']").addClass("disabled").append($('<span class="disabled-tooltip"> (?)</span>').attr("title","用外部程序打开附件仅在详细页面使用, 请先单击附件详情并重复操作")),this.$widget.find("[data-trigger-command='openAttachmentCustom']").addClass("disabled").append($('<span class="disabled-tooltip"> (?)</span>').attr("title","用外部程序打开附件仅在详细页面使用, 请先单击附件详情并重复操作"))),e.default.isElectron()||this.$widget.find("[data-trigger-command='openAttachmentCustom']").addClass("disabled").append($('<span class="disabled-tooltip"> (?)</span>').attr("title","Custom opening of attachments can only be done from the client."))}async openAttachmentCommand(){await yt.Z.openAttachmentExternally(this.attachmentId,this.attachment.mime)}async openAttachmentCustomCommand(){await yt.Z.openAttachmentCustom(this.attachmentId,this.attachment.mime)}async downloadAttachmentCommand(){await yt.Z.downloadAttachment(this.attachmentId)}async uploadNewAttachmentRevisionCommand(){this.$uploadNewRevisionInput.trigger("click")}async copyAttachmentLinkToClipboardCommand(){this.parent.copyAttachmentLinkToClipboard()}async deleteAttachmentCommand(){await U.Z.confirm(`您确定要删除附件吗 '${this.attachment.title}'?`)&&(await o.Z.remove(`attachments/${this.attachmentId}`),O.default.showMessage(`已删除附件 '${this.attachment.title}'`))}async convertAttachmentIntoNoteCommand(){if(!await U.Z.confirm(`Are you sure you want to convert attachment '${this.attachment.title}' into a separate note?`))return;const{note:e}=await o.Z.post(`attachments/${this.attachmentId}/convert-to-note`);O.default.showMessage(`附件 '${this.attachment.title}' 已转换为笔记`),await D.Z.waitForMaxKnownEntityChangeId(),await t.default.tabManager.getActiveContext().setNote(e.noteId)}async renameAttachmentCommand(){const t=await U.Z.prompt({title:"重命名附件",message:"请输入新附件的名称",defaultValue:this.attachment.title});t?.trim()&&await o.Z.put(`attachments/${this.attachmentId}/rename`,{title:t})}}const Ht='\n<div class="attachment-detail-widget">\n    <style>\n        .attachment-detail-widget {\n            height: 100%;\n        }\n    \n        .attachment-detail-wrapper {\n            margin-bottom: 20px;\n            display: flex;\n            flex-direction: column;\n        }\n        \n        .attachment-title-line {\n            display: flex;\n            align-items: baseline;\n            gap: 1em;\n        }\n        \n        .attachment-details {\n            margin-left: 10px;\n        }\n        \n        .attachment-content-wrapper {\n            flex-grow: 1;\n        }\n        \n        .attachment-content-wrapper .rendered-content {\n            height: 100%;\n        }\n        \n        .attachment-content-wrapper pre {\n            background: var(--accented-background-color);\n            padding: 10px;\n            margin-top: 10px;\n            margin-bottom: 10px;\n        }\n        \n        .attachment-detail-wrapper.list-view .attachment-content-wrapper {\n            max-height: 300px;\n        }\n\n        .attachment-detail-wrapper.full-detail {\n            height: 100%;\n        }\n\n        .attachment-detail-wrapper.full-detail .attachment-content-wrapper {\n            height: 100%;\n        }\n        \n        .attachment-detail-wrapper.list-view .attachment-content-wrapper pre {\n            max-height: 400px;\n        }\n        \n        .attachment-content-wrapper img {\n            margin: 10px;\n        }\n        \n        .attachment-detail-wrapper.list-view .attachment-content-wrapper img, .attachment-detail-wrapper.list-view .attachment-content-wrapper video {\n            max-height: 300px; \n            max-width: 90%; \n            object-fit: contain;\n        }\n        \n        .attachment-detail-wrapper.full-detail .attachment-content-wrapper img {\n            max-width: 90%; \n            object-fit: contain;\n        }\n        \n        .attachment-detail-wrapper.scheduled-for-deletion .attachment-content-wrapper img {\n            filter: contrast(10%);\n        }\n    </style>\n\n    <div class="attachment-detail-wrapper">\n        <div class="attachment-title-line">\n            <div class="attachment-actions-container"></div>\n            <h4 class="attachment-title"></h4>                \n            <div class="attachment-details"></div>\n            <div style="flex: 1 1;"></div>\n        </div>\n        \n        <div class="attachment-deletion-warning alert alert-info" style="margin-top: 15px;"></div>\n        \n        <div class="attachment-content-wrapper"></div>\n    </div>\n</div>';class Ut extends v.Z{constructor(t,e){super(),this.contentSized(),this.attachment=t,this.attachmentActionsWidget=new zt(t,e),this.isFullDetail=e,this.child(this.attachmentActionsWidget)}doRender(){this.$widget=$(Ht),this.refresh(),super.doRender()}async refresh(){this.$widget.find(".attachment-detail-wrapper").empty().append($(Ht).find(".attachment-detail-wrapper").html()),this.$wrapper=this.$widget.find(".attachment-detail-wrapper"),this.$wrapper.addClass(this.isFullDetail?"full-detail":"list-view"),this.isFullDetail?this.$wrapper.find(".attachment-title").text(this.attachment.title):this.$wrapper.find(".attachment-title").append(await z.Z.createLink(this.attachment.ownerId,{title:this.attachment.title,viewScope:{viewMode:"attachments",attachmentId:this.attachment.attachmentId}}));const t=this.$wrapper.find(".attachment-deletion-warning"),{utcDateScheduledForErasureSince:n}=this.attachment;if(n){this.$wrapper.addClass("scheduled-for-deletion");const i=e.default.parseDate(n)?.getTime(),o=i+1e3*m.Z.getInt("eraseUnusedAttachmentsAfterSeconds")-Date.now();t.show(),o>=6e4?t.text(`此附件将在 ${e.default.formatTimeInterval(o)} 后自动删除。`):t.text("此附件将很快被自动删除"),t.append(", 因为附件未在笔记内容中链接。为防止被删除，请将附件链接添加回内容中或将附件转换为笔记。")}else this.$wrapper.removeClass("scheduled-for-deletion"),t.hide();this.$wrapper.find(".attachment-details").text(`角色：${this.attachment.role}，大小：${e.default.formatSize(this.attachment.contentLength)}`),this.$wrapper.find(".attachment-actions-container").append(this.attachmentActionsWidget.render());const{$renderedContent:i}=await wt.Z.getRenderedContent(this.attachment,{imageHasZoom:this.isFullDetail});this.$wrapper.find(".attachment-content-wrapper").append(i)}async copyAttachmentLinkToClipboard(){if("image"===this.attachment.role)$t(this.$wrapper.find(".attachment-content-wrapper"));else{if("file"!==this.attachment.role)throw new Error(`Unrecognized attachment role '${this.attachment.role}'.`);{const t=await z.Z.createLink(this.attachment.ownerId,{referenceLink:!0,viewScope:{viewMode:"attachments",attachmentId:this.attachment.attachmentId}});e.default.copyHtmlToClipboard(t[0].outerHTML),O.default.showMessage("附件链接已复制到剪贴板.")}}}async entitiesReloadedEvent({loadResults:t}){const e=t.getAttachmentRows().find((t=>t.attachmentId===this.attachment.attachmentId));e&&(e.isDeleted?this.toggleInt(!1):this.refresh())}}const jt={empty:class extends pt{static getType(){return"empty"}doRender(){this.$widget=$('\n<div class="note-detail-empty note-detail-printable">\n    <style>\n        .workspace-notes {\n            display: flex;\n            flex-direction: row;\n            flex-wrap: wrap;\n            justify-content: space-evenly;\n        }\n        \n        .workspace-notes .workspace-note {\n            width: 130px;\n            text-align: center;\n            margin: 10px;\n            padding; 10px;\n            border: 1px transparent solid;\n        }\n        \n        .workspace-notes .workspace-note:hover {\n            cursor: pointer;\n            border: 1px solid var(--main-border-color);\n        }\n        \n        .workspace-icon {\n            text-align: center;\n            font-size: 500%;\n        }\n    </style>\n\n    <div class="form-group">\n        <label>在下方输入笔记名称或者点树形图来打开笔记.</label>\n        <div class="input-group">\n            <input class="form-control note-autocomplete" placeholder="根据名称搜索笔记">\n        </div>\n    </div>\n    \n    <div class="workspace-notes"></div>\n</div>'),this.$autoComplete=this.$widget.find(".note-autocomplete"),h.initNoteAutocomplete(this.$autoComplete,{hideGoToSelectedNoteButton:!0,allowCreatingNotes:!0}).on("autocomplete:noteselected",(function(e,n,i){if(!n.notePath)return!1;t.default.tabManager.getActiveContext().setNote(n.notePath)})),this.$workspaceNotes=this.$widget.find(".workspace-notes"),super.doRender()}async doRefresh(t){const e=await ut.Z.searchForNotes("#workspace #!template");this.$workspaceNotes.empty();for(const t of e)this.$workspaceNotes.append($('<div class="workspace-note">').append($("<div>").addClass(`${t.getIcon()} workspace-icon`)).append($("<div>").text(t.title)).attr("title",`进入工作空间 ${t.title}`).on("click",(()=>this.triggerCommand("hoistNote",{noteId:t.noteId}))));this.$autoComplete.trigger("focus").trigger("select")}},editableText:class extends vt{static getType(){return"editableText"}doRender(){this.$widget=$('\n<div class="note-detail-editable-text note-detail-printable">\n    <style>\n    .note-detail-editable-text {\n        font-family: var(--detail-font-family);\n        padding-left: 14px;\n        padding-top: 10px;\n        height: 100%;\n    }\n    \n    body.mobile .note-detail-editable-text {\n        padding-left: 4px;\n    }\n    \n    .note-detail-editable-text a:hover {\n        cursor: pointer;\n    }\n    \n    .note-detail-editable-text a[href^="http://"], .note-detail-editable-text a[href^="https://"] {\n        cursor: text !important;\n    }\n    \n    .note-detail-editable-text *:not(figure,.include-note):first-child {\n        margin-top: 0 !important;\n    }\n         \n    .note-detail-editable-text h2 { font-size: 1.6em; } \n    .note-detail-editable-text h3 { font-size: 1.4em; }\n    .note-detail-editable-text h4 { font-size: 1.2em; }\n    .note-detail-editable-text h5 { font-size: 1.1em; }\n    .note-detail-editable-text h6 { font-size: 1.0em; }\n    \n    body.heading-style-markdown .note-detail-editable-text h2::before { content: "##\\2004"; color: var(--muted-text-color); }\n    body.heading-style-markdown .note-detail-editable-text h3::before { content: "###\\2004"; color: var(--muted-text-color); }\n    body.heading-style-markdown .note-detail-editable-text h4:not(.include-note-title)::before { content: "####\\2004"; color: var(--muted-text-color); }\n    body.heading-style-markdown .note-detail-editable-text h5::before { content: "#####\\2004"; color: var(--muted-text-color); }\n    body.heading-style-markdown .note-detail-editable-text h6::before { content: "######\\2004"; color: var(--muted-text-color); }\n    \n    body.heading-style-underline .note-detail-editable-text h2 { border-bottom: 1px solid var(--main-border-color); }\n    body.heading-style-underline .note-detail-editable-text h3 { border-bottom: 1px solid var(--main-border-color); }\n    body.heading-style-underline .note-detail-editable-text h4:not(.include-note-title) { border-bottom: 1px solid var(--main-border-color); }\n    body.heading-style-underline .note-detail-editable-text h5 { border-bottom: 1px solid var(--main-border-color); }\n    body.heading-style-underline .note-detail-editable-text h6 { border-bottom: 1px solid var(--main-border-color); }\n    \n    .note-detail-editable-text-editor {\n        padding-top: 10px;\n        border: 0 !important;\n        box-shadow: none !important;\n        min-height: 50px;\n        height: 100%;\n    }\n    </style>\n\n    <div class="note-detail-editable-text-editor" tabindex="300"></div>\n</div>\n'),this.$editor=this.$widget.find(".note-detail-editable-text-editor"),this.initialized=this.initEditor(),k.default.setupActionsForElement("text-detail",this.$widget,this),this.setupImageOpening(!1),super.doRender()}async initEditor(){await at.Z.requireLibrary(at.Z.CKEDITOR);const t=(await ft.getMimeTypes()).filter((t=>t.enabled)).map((t=>({language:t.mime.toLowerCase().replace(/[\W_]+/g,"-"),label:t.title})));this.$widget.show(),this.watchdog=new EditorWatchdog(BalloonEditor,{minimumNonErrorTimePeriod:5e3,crashNumberLimit:3,saveInterval:5e3}),this.watchdog.on("stateChange",(()=>{const t=this.watchdog.state;["crashed","crashedPermanently"].includes(t)&&(console.log(`CKEditor changed to ${t}`),this.watchdog.crashes.forEach((t=>console.log(t))),"crashedPermanently"===t&&(U.Z.info("Editing component keeps crashing. Please try restarting Trilium. If problem persists, consider creating a bug report."),this.watchdog.editor.enableReadOnlyMode("crashed-editor")))})),this.watchdog.setCreator((async(t,e)=>{const n=await BalloonEditor.create(t,e);return n.model.document.on("change:data",(()=>this.spacedUpdate.scheduleUpdate())),glob.isDev,n})),await this.watchdog.create(this.$editor[0],{placeholder:"在这里输入笔记内容",mention:xt,codeBlock:{languages:t},math:{engine:"katex",outputType:"span",lazyLoad:async()=>await at.Z.requireLibrary(at.Z.KATEX),forceOutputType:!1,enablePreview:!0}})}async doRefresh(t){const e=await t.getBlob();await this.spacedUpdate.allowUpdateWithoutChange((()=>this.watchdog.editor.setData(e.content||"")))}getData(){const t=this.watchdog.editor.getData();return{content:e.default.isHtmlEmpty(t)?"":t}}focus(){this.$editor.trigger("focus")}scrollToEnd(){this.watchdog?.editor.model.change((t=>{t.setSelection(t.createPositionAt(this.watchdog?.editor.model.document.getRoot(),"end"))})),this.watchdog?.editor.editing.view.focus()}show(){}getEditor(){return this.watchdog?.editor}cleanup(){this.watchdog?.editor&&this.spacedUpdate.allowUpdateWithoutChange((()=>{this.watchdog.editor.setData("")}))}insertDateTimeToTextCommand(){const t=new Date,n=e.default.formatDateTime(t);this.addTextToEditor(n)}async addLinkToEditor(t,e){await this.initialized,this.watchdog.editor.model.change((n=>{const i=this.watchdog.editor.model.document.selection.getFirstPosition();n.insertText(e,{linkHref:t},i)}))}async addTextToEditor(t){await this.initialized,this.watchdog.editor.model.change((e=>{const n=this.watchdog.editor.model.document.selection.getLastPosition();e.insertText(t,n)}))}addTextToActiveEditorEvent({text:t}){this.isActive()&&this.addTextToEditor(t)}async addLink(t,e){await this.initialized,e?this.hasSelection()?this.watchdog.editor.execute("link",`#${t}`):await this.addLinkToEditor(`#${t}`,e):this.watchdog.editor.execute("referenceLink",{href:"#"+t}),this.watchdog.editor.editing.view.focus()}hasSelection(){return!this.watchdog.editor.model.document.selection.isCollapsed}async executeWithTextEditorEvent({callback:t,resolve:e,ntxId:n}){this.isNoteContext(n)&&(await this.initialized,t&&t(this.watchdog.editor),e(this.watchdog.editor))}addLinkToTextCommand(){const t=this.getSelectedText();this.triggerCommand("showAddLinkDialog",{textTypeWidget:this,text:t})}getSelectedText(){const t=this.watchdog.editor.model.document.selection.getFirstRange();let e="";for(const n of t.getItems())n.data&&(e+=n.data);return e}async followLinkUnderCursorCommand(){await this.initialized;const e=this.watchdog.editor.model.document.selection,n=e.getSelectedElement();if("reference"===n?.name){const e=n.getAttribute("notePath");if(e)return void await t.default.tabManager.getActiveContext().setNote(e)}if(!e.hasAttribute("linkHref"))return;const i=e.getAttribute("linkHref"),o=z.Z.getNotePathFromUrl(i);o?await t.default.tabManager.getActiveContext().setNote(o):window.open(i,"_blank")}addIncludeNoteToTextCommand(){this.triggerCommand("showIncludeNoteDialog",{textTypeWidget:this})}addIncludeNote(t,e){this.watchdog.editor.model.change((n=>{this.watchdog.editor.model.insertContent(n.createElement("includeNote",{noteId:t,boxSize:e}))}))}async addImage(t){const e=await a.default.getNote(t);this.watchdog.editor.model.change((t=>{const n=encodeURIComponent(e.title),i=`api/images/${e.noteId}/${n}`;this.watchdog.editor.execute("insertImage",{source:i})}))}async createNoteForReferenceLink(t){const e=await s.Z.createNoteWithTypePrompt(this.notePath,{activate:!1,title:t});if(e)return e.note.getBestNotePathString()}async refreshIncludedNoteEvent({noteId:t}){this.refreshIncludedNote(this.$editor,t)}},readOnlyText:class extends vt{static getType(){return"readOnlyText"}doRender(){this.$widget=$('\n<div class="note-detail-readonly-text note-detail-printable">\n    <style>\n    /* h1 should not be used at all since semantically that\'s a note title */\n    .note-detail-readonly-text h1 { font-size: 1.8em; }\n    .note-detail-readonly-text h2 { font-size: 1.6em; }\n    .note-detail-readonly-text h3 { font-size: 1.4em; }\n    .note-detail-readonly-text h4 { font-size: 1.2em; }\n    .note-detail-readonly-text h5 { font-size: 1.1em; }\n    .note-detail-readonly-text h6 { font-size: 1.0em; }\n    \n    body.heading-style-markdown .note-detail-readonly-text h1::before { content: "#\\2004"; color: var(--muted-text-color); }\n    body.heading-style-markdown .note-detail-readonly-text h2::before { content: "##\\2004"; color: var(--muted-text-color); }\n    body.heading-style-markdown .note-detail-readonly-text h3::before { content: "###\\2004"; color: var(--muted-text-color); }\n    body.heading-style-markdown .note-detail-readonly-text h4:not(.include-note-title)::before { content: "####\\2004"; color: var(--muted-text-color); }\n    body.heading-style-markdown .note-detail-readonly-text h5::before { content: "#####\\2004"; color: var(--muted-text-color); }\n    body.heading-style-markdown .note-detail-readonly-text h6::before { content: "######\\2004"; color: var(--muted-text-color); }\n\n    body.heading-style-underline .note-detail-readonly-text h1 { border-bottom: 1px solid var(--main-border-color); }\n    body.heading-style-underline .note-detail-readonly-text h2 { border-bottom: 1px solid var(--main-border-color); }\n    body.heading-style-underline .note-detail-readonly-text h3 { border-bottom: 1px solid var(--main-border-color); }\n    body.heading-style-underline .note-detail-readonly-text h4:not(.include-note-title) { border-bottom: 1px solid var(--main-border-color); }\n    body.heading-style-underline .note-detail-readonly-text h5 { border-bottom: 1px solid var(--main-border-color); }\n    body.heading-style-underline .note-detail-readonly-text h6 { border-bottom: 1px solid var(--main-border-color); }\n    \n    .note-detail-readonly-text {\n        padding-left: 24px;\n        padding-top: 10px;\n        font-family: var(--detail-font-family);\n        min-height: 50px;\n        position: relative;\n    }\n    \n    body.mobile .note-detail-readonly-text {\n        padding-left: 10px;\n    }\n        \n    .note-detail-readonly-text p:first-child, .note-detail-readonly-text::before {\n        margin-top: 0;\n    }\n    \n    .note-detail-readonly-text img {\n        max-width: 100%;\n        cursor: pointer;\n    }\n    \n    .edit-text-note-button {\n        position: absolute; \n        top: 5px;\n        right: 10px;\n        font-size: 150%;\n        padding: 5px;\n        cursor: pointer;\n        border: 1px solid transparent;\n        border-radius: var(--button-border-radius);\n        color: var(--button-text-color);\n    }\n    \n    .edit-text-note-button:hover {\n        border-color: var(--button-border-color);\n    }\n    </style>\n\n    <div class="note-detail-readonly-text-content ck-content"></div>\n</div>\n'),this.$content=this.$widget.find(".note-detail-readonly-text-content"),this.setupImageOpening(!0),super.doRender()}cleanup(){this.$content.html("")}async doRefresh(t){await at.Z.requireLibrary(at.Z.CKEDITOR);const e=await t.getBlob();this.$content.html(e.content),this.$content.find("a.reference-link").each((async(t,e)=>{this.loadReferenceLinkTitle($(e))})),this.$content.find("section").each((async(t,e)=>{const n=$(e).attr("data-note-id");this.loadIncludedNote(n,$(e))})),this.$content.find("span.math-tex").length>0&&(await at.Z.requireLibrary(at.Z.KATEX),renderMathInElement(this.$content[0],{trust:!0}))}async refreshIncludedNoteEvent({noteId:t}){this.refreshIncludedNote(this.$content,t)}async executeWithContentElementEvent({resolve:t,ntxId:e}){this.isNoteContext(e)&&(await this.initialized,t(this.$content))}},editableCode:class extends pt{static getType(){return"editableCode"}doRender(){this.$widget=$('\n<div class="note-detail-code note-detail-printable">\n    <style>\n    .note-detail-code {\n        position: relative;\n        height: 100%;\n    }\n    \n    .note-detail-code-editor {\n        min-height: 50px;\n        height: 100%;\n    }\n    </style>\n\n    <div class="note-detail-code-editor"></div>\n</div>'),this.$editor=this.$widget.find(".note-detail-code-editor"),k.default.setupActionsForElement("code-detail",this.$widget,this),super.doRender(),this.initialized=this.initEditor()}async initEditor(){await at.Z.requireLibrary(at.Z.CODE_MIRROR),CodeMirror.keyMap.default["Shift-Tab"]="indentLess",CodeMirror.keyMap.default.Tab="indentMore",delete CodeMirror.keyMap.default["Alt-Left"],delete CodeMirror.keyMap.default["Alt-Right"],CodeMirror.modeURL=`${window.glob.assetPath}/libraries/codemirror/mode/%N/%N.js`,this.codeEditor=CodeMirror(this.$editor[0],{value:"",viewportMargin:1/0,indentUnit:4,matchBrackets:!0,keyMap:m.Z.is("vimKeymapEnabled")?"vim":"default",matchTags:{bothTags:!0},highlightSelectionMatches:{showToken:!1,annotateScrollbar:!1},lint:!0,gutters:["CodeMirror-lint-markers"],lineNumbers:!0,tabindex:300,lineWrapping:m.Z.is("codeLineWrapEnabled"),dragDrop:!1,placeholder:"在此处输入代码笔记的内容..."}),this.codeEditor.on("change",(()=>this.spacedUpdate.scheduleUpdate()))}async doRefresh(t){const e=await this.note.getBlob();await this.spacedUpdate.allowUpdateWithoutChange((()=>{this.codeEditor.setValue(e.content||""),this.codeEditor.clearHistory();let n=CodeMirror.findModeByMIME(t.mime);n||(n=CodeMirror.findModeByMIME("text/plain")),this.codeEditor.setOption("mode",n.mime),CodeMirror.autoLoadMode(this.codeEditor,n.mode)})),this.show()}show(){this.$widget.show(),this.codeEditor&&this.codeEditor.refresh()}getData(){return{content:this.codeEditor.getValue()}}focus(){this.$editor.focus(),this.codeEditor.focus()}scrollToEnd(){this.codeEditor.setCursor(this.codeEditor.lineCount(),0),this.codeEditor.focus()}cleanup(){this.codeEditor&&this.spacedUpdate.allowUpdateWithoutChange((()=>{this.codeEditor.setValue("")}))}async executeWithCodeEditorEvent({resolve:t,ntxId:e}){this.isNoteContext(e)&&(await this.initialized,t(this.codeEditor))}},readOnlyCode:class extends pt{static getType(){return"readOnlyCode"}doRender(){this.$widget=$('\n<div class="note-detail-readonly-code note-detail-printable">\n    <style>\n    .note-detail-readonly-code {\n        min-height: 50px;\n        position: relative;\n    }\n    \n    .note-detail-readonly-code-content {\n        padding: 10px;\n    }\n    </style>\n\n    <pre class="note-detail-readonly-code-content"></pre>\n</div>'),this.$content=this.$widget.find(".note-detail-readonly-code-content"),super.doRender()}async doRefresh(t){let{content:e}=await this.note.getBlob();"text"===t.type&&"source"===this.noteContext?.viewScope?.viewMode&&(e=this.format(e)),this.$content.text(e)}async executeWithContentElementEvent({resolve:t,ntxId:e}){this.isNoteContext(e)&&(await this.initialized,t(this.$content))}format(t){let e="\n",n=0,i=[];for(t=t.replace(new RegExp("<pre>((.|\\t|\\n|\\r)+)?</pre>"),(function(t){return i.push({indent:"",tag:t}),"<--TEMPPRE"+n+++"/--\x3e"})).replace(new RegExp("<[^<>]+>[^<]?","g"),(function(t){let n,o=/<\/?([^\s/>]+)/.exec(t)[1],s=new RegExp("<--TEMPPRE(\\d+)/--\x3e").exec(t);return s&&(i[s[1]].indent=e),["area","base","br","col","command","embed","hr","img","input","keygen","link","menuitem","meta","param","source","track","wbr"].indexOf(o)>=0?n=e+t:t.indexOf("</")<0?(n=">"!==t.charAt(t.length-1)?e+t.substr(0,t.length-1)+e+"\t"+t.substr(t.length-1,t.length):e+t,!s&&(e+="\t")):(e=e.substr(0,e.length-1),n=">"!==t.charAt(t.length-1)?e+t.substr(0,t.length-1)+e+t.substr(t.length-1,t.length):e+t),n})),n=i.length;n--;)t=t.replace("<--TEMPPRE"+n+"/--\x3e",i[n].tag.replace("<pre>","<pre>\n").replace("</pre>",i[n].indent+"</pre>"));return"\n"===t.charAt(0)?t.substr(1,t.length-1):t}},file:class extends pt{static getType(){return"file"}doRender(){this.$widget=$('\n<div class="note-detail-file note-detail-printable">\n    <style>\n        .type-file .note-detail {\n            height: 100%;\n        }\n        \n        .note-detail-file {\n            padding: 10px;\n            height: 100%;\n        }\n\n        .file-preview-content {\n            background-color: var(--accented-background-color);\n            padding: 15px;\n            height: 100%;\n            overflow: auto;\n            margin: 10px;\n        }\n    </style>\n    \n    <pre class="file-preview-content"></pre>\n    \n    <div class="file-preview-not-available alert alert-info">\n        这种文件格式不支持预览.\n    </div>\n    \n    <iframe class="pdf-preview" style="width: 100%; height: 100%; flex-grow: 100;"></iframe>\n    \n    <video class="video-preview" controls></video>\n    \n    <audio class="audio-preview" controls></audio>\n</div>'),this.$previewContent=this.$widget.find(".file-preview-content"),this.$previewNotAvailable=this.$widget.find(".file-preview-not-available"),this.$pdfPreview=this.$widget.find(".pdf-preview"),this.$videoPreview=this.$widget.find(".video-preview"),this.$audioPreview=this.$widget.find(".audio-preview"),super.doRender()}async doRefresh(t){this.$widget.show();const e=await this.note.getBlob();this.$previewContent.empty().hide(),this.$pdfPreview.attr("src","").empty().hide(),this.$previewNotAvailable.hide(),this.$videoPreview.hide(),this.$audioPreview.hide(),e.content?(this.$previewContent.show().scrollTop(0),this.$previewContent.text(e.content)):"application/pdf"===t.mime?this.$pdfPreview.show().attr("src",yt.Z.getUrlForDownload(`api/notes/${this.noteId}/open`)):t.mime.startsWith("video/")?this.$videoPreview.show().attr("src",yt.Z.getUrlForDownload(`api/notes/${this.noteId}/open-partial`)).attr("type",this.note.mime).css("width",this.$widget.width()):t.mime.startsWith("audio/")?this.$audioPreview.show().attr("src",yt.Z.getUrlForDownload(`api/notes/${this.noteId}/open-partial`)).attr("type",this.note.mime).css("width",this.$widget.width()):this.$previewNotAvailable.show()}async entitiesReloadedEvent({loadResults:t}){t.isNoteReloaded(this.noteId)&&this.refresh()}},image:class extends pt{static getType(){return"image"}doRender(){this.$widget=$('\n<div class="note-detail-image note-detail-printable">\n    <style>\n        .type-image .note-detail {\n            height: 100%;\n        }\n    \n        .note-detail-image {\n            height: 100%; \n        }\n        \n        .note-detail-image-wrapper {\n            position: relative;\n            display: flex;\n            align-items: center;\n            overflow: hidden;\n            justify-content: center;\n            height: 100%;\n        }\n        \n        .note-detail-image-view {\n            display: block;\n            width: auto;\n            height: auto;\n            align-self: center;\n            flex-shrink: 0;\n        }\n    </style>\n\n    <div class="note-detail-image-wrapper">\n        <img class="note-detail-image-view" />\n    </div>\n</div>'),this.$imageWrapper=this.$widget.find(".note-detail-image-wrapper"),this.$imageView=this.$widget.find(".note-detail-image-view").attr("id",`image-view-${e.default.randomString(10)}`),at.Z.requireLibrary(at.Z.WHEEL_ZOOM).then((()=>{WZoom.create(`#${this.$imageView.attr("id")}`,{maxScale:50,speed:1.3,zoomOnClick:!1})})),e.default.isElectron()&&this.$imageView.on("contextmenu",(t=>{t.preventDefault(),f.Z.show({x:t.pageX,y:t.pageY,items:[{title:"复制引用到剪贴板",command:"copyImageReferenceToClipboard",uiIcon:"bx bx-empty"},{title:"复制图片到剪贴板",command:"copyImageToClipboard",uiIcon:"bx bx-empty"}],selectMenuItemHandler:({command:n})=>{if("copyImageReferenceToClipboard"===n)$t(this.$imageWrapper);else{if("copyImageToClipboard"!==n)throw new Error(`未识别的命令 '${n}'`);{const n=e.default.dynamicRequire("@electron/remote").getCurrentWebContents();e.default.dynamicRequire("electron"),n.copyImageAt(t.pageX,t.pageY)}}}})})),super.doRender()}async doRefresh(t){this.$imageView.prop("src",e.default.createImageSrcUrl(t))}copyImageReferenceToClipboardEvent({ntxId:t}){this.isNoteContext(t)&&$t(this.$imageWrapper)}async entitiesReloadedEvent({loadResults:t}){t.isNoteReloaded(this.noteId)&&this.refresh()}},search:class extends pt{static getType(){return"none"}doRender(){this.$widget=$('<div class="note-detail-none note-detail-printable"></div>'),super.doRender()}},render:class extends pt{static getType(){return"render"}doRender(){this.$widget=$('\n<div class="note-detail-render note-detail-printable">\n    <style>\n        .note-detail-render {\n            position: relative;\n        }\n    </style>\n\n    <div class="note-detail-render-help alert alert-warning" style="margin: 50px; padding: 20px;">\n        <p><strong>之所以显示此帮助说明, 是因为该类型的渲染HTML没有设置好必须的关联关系.</strong></p>\n\n        <p>笔记类型: 渲染HTML 是用来<a class="external" href="https://github.com/zadam/trilium/wiki/Scripts">编写脚本</a>用的. 简单说就是你可以写HTML代码(或者加上一些JavaScript代码), 然后这个笔记会把页面渲染出来. 你得定义一个叫"renderNote"的<a class="external" href="https://github.com/zadam/trilium/wiki/Attributes">关系</a>来指向要渲染的HTML笔记.</p>\n    </div>\n\n    <div class="note-detail-render-content"></div>\n</div>'),this.$noteDetailRenderHelp=this.$widget.find(".note-detail-render-help"),this.$noteDetailRenderContent=this.$widget.find(".note-detail-render-content"),super.doRender()}async doRefresh(t){this.$widget.show(),this.$noteDetailRenderHelp.hide(),await It.Z.render(t,this.$noteDetailRenderContent)||this.$noteDetailRenderHelp.show()}cleanup(){this.$noteDetailRenderContent.empty()}renderActiveNoteEvent(){this.noteContext.isActive()&&this.refresh()}async executeWithContentElementEvent({resolve:t,ntxId:e}){this.isNoteContext(e)&&(await this.initialized,t(this.$noteDetailRenderContent))}},relationMap:class extends pt{static getType(){return"relationMap"}doRender(){this.$widget=$('\n<div class="note-detail-relation-map note-detail-printable">\n    <div class="relation-map-wrapper">\n       <div class="relation-map-container"></div>\n    </div>\n</div>'),this.$relationMapContainer=this.$widget.find(".relation-map-container"),this.mapData=null,this.jsPlumbInstance=null,this.relations=null,this.pzInstance=null,this.$relationMapWrapper=this.$widget.find(".relation-map-wrapper"),this.$relationMapWrapper.on("click",(t=>{if(this.clipboard){let{x:e,y:n}=this.getMousePosition(t);e-=80,n-=15,this.createNoteBox(this.clipboard.noteId,this.clipboard.title,e,n),this.mapData.notes.push({noteId:this.clipboard.noteId,x:e,y:n}),this.saveData(),this.clipboard=null}return!0})),this.$relationMapContainer.attr("id","relation-map-container-"+St++),this.$relationMapContainer.on("contextmenu",".note-box",(t=>(f.Z.show({x:t.pageX,y:t.pageY,items:[{title:"在新标签页中打开",command:"openInNewTab",uiIcon:"bx bx-empty"},{title:"删除笔记",command:"remove",uiIcon:"bx bx-trash"},{title:"编辑标题",command:"editTitle",uiIcon:"bx bx-pencil"}],selectMenuItemHandler:({command:e})=>this.contextMenuHandler(e,t.target)}),!1))),this.clipboard=null,this.$widget.on("drop",(t=>this.dropNoteOntoRelationMapHandler(t))),this.$widget.on("dragover",(t=>t.preventDefault())),this.initialized=new Promise((async t=>{await at.Z.requireLibrary(at.Z.RELATION_MAP),jsPlumb.ready(t)})),super.doRender()}async contextMenuHandler(n,i){const s=$(i).closest(".note-box"),a=s.find(".title a"),r=this.idToNoteId(s.prop("id"));if("openInNewTab"===n)t.default.tabManager.openTabWithNoteWithHoisting(r);else if("remove"===n){const t=await U.Z.confirmDeleteNoteBoxWithNote(a.text());if(!t.confirmed)return;if(this.jsPlumbInstance.remove(this.noteIdToId(r)),t.isDeleteNoteChecked){const t=e.default.randomString(10);await o.Z.remove(`notes/${r}?taskId=${t}&last=true`)}this.mapData.notes=this.mapData.notes.filter((t=>t.noteId!==r)),this.relations=this.relations.filter((t=>t.sourceNoteId!==r&&t.targetNoteId!==r)),this.saveData()}else if("editTitle"===n){const t=await U.Z.prompt({title:"重命名笔记",message:"输入新的笔记标题:",defaultValue:a.text()});if(!t)return;await o.Z.put(`notes/${r}/title`,{title:t}),a.text(t)}}async loadMapData(){this.mapData={notes:[],transform:{x:0,y:0,scale:1}};const t=await this.note.getBlob();if(t.content)try{this.mapData=JSON.parse(t.content)}catch(t){console.log("Could not parse content: ",t)}}noteIdToId(t){return`rel-map-note-${t}`}idToNoteId(t){return t.substr(13)}async doRefresh(t){await this.loadMapData(),this.initJsPlumbInstance(),this.initPanZoom(),this.loadNotesAndRelations()}clearMap(){this.jsPlumbInstance.deleteEveryEndpoint(),this.$relationMapContainer.empty()}async loadNotesAndRelations(){const t=this.mapData.notes.map((t=>t.noteId)),e=await o.Z.post("relation-map",{noteIds:t,relationMapNoteId:this.noteId});this.relations=[];for(const t of e.relations){const n=this.relations.find((n=>n.name===e.inverseRelations[t.name]&&(n.sourceNoteId===t.sourceNoteId&&n.targetNoteId===t.targetNoteId||n.sourceNoteId===t.targetNoteId&&n.targetNoteId===t.sourceNoteId)));n?(n.type=t.type=t.name===e.inverseRelations[t.name]?"biDirectional":"inverse",t.render=!1):(t.type="uniDirectional",t.render=!0),this.relations.push(t)}this.mapData.notes=this.mapData.notes.filter((t=>t.noteId in e.noteTitles)),this.jsPlumbInstance.batch((async()=>{this.clearMap();for(const t of this.mapData.notes){const n=e.noteTitles[t.noteId];await this.createNoteBox(t.noteId,n,t.x,t.y)}for(const t of this.relations){if(!t.render)continue;const n=this.jsPlumbInstance.connect({source:this.noteIdToId(t.sourceNoteId),target:this.noteIdToId(t.targetNoteId),type:t.type});n.id=t.attributeId,"inverse"===t.type?(n.getOverlay("label-source").setLabel(t.name),n.getOverlay("label-target").setLabel(e.inverseRelations[t.name])):n.getOverlay("label").setLabel(t.name),n.canvas.setAttribute("data-connection-id",n.id)}}))}initPanZoom(){this.pzInstance||(this.pzInstance=panzoom(this.$relationMapContainer[0],{maxZoom:2,minZoom:.3,smoothScroll:!1,filterKey:function(t,e,n,i){return t.altKey}}),this.pzInstance.on("transform",(()=>{this.jsPlumbInstance.setZoom(this.getZoom()),this.saveCurrentTransform()})),this.mapData.transform?(this.pzInstance.zoomTo(0,0,this.mapData.transform.scale),this.pzInstance.moveTo(this.mapData.transform.x,this.mapData.transform.y)):this.pzInstance.moveTo(0,0))}saveCurrentTransform(){const t=this.pzInstance.getTransform();JSON.stringify(t)!==JSON.stringify(this.mapData.transform)&&(this.mapData.transform=JSON.parse(JSON.stringify(t)),this.saveData())}cleanup(){this.jsPlumbInstance&&this.clearMap(),this.pzInstance&&(this.pzInstance.dispose(),this.pzInstance=null)}initJsPlumbInstance(){this.jsPlumbInstance?this.cleanup():(this.jsPlumbInstance=jsPlumb.getInstance({Endpoint:["Dot",{radius:2}],Connector:"StateMachine",ConnectionOverlays:Ct,HoverPaintStyle:{stroke:"#777",strokeWidth:1},Container:this.$relationMapContainer.attr("id")}),this.jsPlumbInstance.registerConnectionType("uniDirectional",{anchor:"Continuous",connector:"StateMachine",overlays:Ct}),this.jsPlumbInstance.registerConnectionType("biDirectional",{anchor:"Continuous",connector:"StateMachine",overlays:Nt}),this.jsPlumbInstance.registerConnectionType("inverse",{anchor:"Continuous",connector:"StateMachine",overlays:kt}),this.jsPlumbInstance.registerConnectionType("link",{anchor:"Continuous",connector:"StateMachine",overlays:Tt}),this.jsPlumbInstance.bind("connection",((t,e)=>this.connectionCreatedHandler(t,e))))}async connectionCreatedHandler(t,n){const i=t.connection;if(i.bind("contextmenu",((t,e)=>{i.getType().includes("link")?e.preventDefault():(e.preventDefault(),e.stopPropagation(),f.Z.show({x:e.pageX,y:e.pageY,items:[{title:"删除关系",command:"remove",uiIcon:"bx bx-trash"}],selectMenuItemHandler:async({command:t})=>{if("remove"===t){if(!await U.Z.confirm("确定要删除这个关系吗?"))return;const t=this.relations.find((t=>t.attributeId===i.id));await o.Z.remove(`notes/${t.sourceNoteId}/relations/${t.name}/to/${t.targetNoteId}`),this.jsPlumbInstance.deleteConnection(i),this.relations=this.relations.filter((t=>t.attributeId!==i.id))}}}))})),!n)return;let s=await U.Z.prompt({message:"指定新的关系名称(允许的字符: 字母数字,冒号和下划线):",shown:({$answer:t})=>{t.on("keyup",(()=>{const n=e.default.filterAttributeName(t.val());t.val(n)})),G({$el:t,attributeType:"relation",open:!0})}});if(!s||!s.trim())return void this.jsPlumbInstance.deleteConnection(i);s=e.default.filterAttributeName(s);const a=this.idToNoteId(i.target.id),r=this.idToNoteId(i.source.id);if(this.relations.some((t=>t.targetNoteId===a&&t.sourceNoteId===r&&t.name===s)))return await U.Z.info(`Connection '${s}' between these notes already exists.`),void this.jsPlumbInstance.deleteConnection(i);await o.Z.put(`notes/${r}/relations/${s}/to/${a}`),this.loadNotesAndRelations()}saveData(){this.spacedUpdate.scheduleUpdate()}async createNoteBox(t,e,n,i){const o=await z.Z.createLink(t,{title:e});o.mousedown((t=>z.Z.goToLink(t)));const s=await a.default.getNote(t),r=$("<div>").addClass("note-box").addClass(s.getCssClass()).prop("id",this.noteIdToId(t)).append($("<span>").addClass("title").append(o)).append($("<div>").addClass("endpoint").attr("title","从这里拖拽到别的笔记来创建关系.")).css("left",`${n}px`).css("top",`${i}px`);this.jsPlumbInstance.getContainer().appendChild(r[0]),this.jsPlumbInstance.draggable(r[0],{start:t=>{},drag:t=>{},stop:t=>{const e=this.idToNoteId(t.el.id),n=this.mapData.notes.find((t=>t.noteId===e));n?([n.x,n.y]=t.finalPos,this.saveData()):logError(`笔记 ${e} 未找到!`)}}),this.jsPlumbInstance.makeSource(r[0],{filter:".endpoint",anchor:"Continuous",connectorStyle:{stroke:"#000",strokeWidth:1},connectionType:"basic",extract:{action:"the-action"}}),this.jsPlumbInstance.makeTarget(r[0],{dropOptions:{hoverClass:"dragHover"},anchor:"Continuous",allowLoopback:!0})}getZoom(){const t=this.$relationMapContainer.css("transform");if("none"===t)return 1;const e=t.match(/matrix\((-?\d*\.?\d+),\s*0,\s*0,\s*-?\d*\.?\d+,\s*-?\d*\.?\d+,\s*-?\d*\.?\d+\)/);if(!e)throw new Error(`Cannot match transform: ${t}`);return e[1]}async dropNoteOntoRelationMapHandler(t){t.preventDefault();const e=JSON.parse(t.originalEvent.dataTransfer.getData("text"));let{x:n,y:i}=this.getMousePosition(t);for(const t of e)this.mapData.notes.some((e=>e.noteId===t.noteId))?O.default.showError(`笔记 "${t.title}" 已经在图中.`):(this.mapData.notes.push({noteId:t.noteId,x:n,y:i}),n>1e3?(i+=100,n=0):n+=200);this.saveData(),this.loadNotesAndRelations()}getMousePosition(t){const e=this.$relationMapContainer[0].getBoundingClientRect(),n=this.getZoom();return{x:(t.clientX-e.left)/n,y:(t.clientY-e.top)/n}}getData(){return{content:JSON.stringify(this.mapData)}}async relationMapCreateChildNoteEvent({ntxId:t}){if(!this.isNoteContext(t))return;const e=await U.Z.prompt({message:"输入新笔记的标题",defaultValue:"新建笔记"});if(!e.trim())return;const{note:n}=await o.Z.post(`notes/${this.noteId}/children?target=into`,{title:e,content:"",type:"text"});O.default.showMessage("在画布上单击以放置新笔记"),this.clipboard={noteId:n.noteId,title:e}}relationMapResetPanZoomEvent({ntxId:t}){this.isNoteContext(t)&&(this.pzInstance.zoomTo(0,0,1/this.getZoom()),this.pzInstance.moveTo(0,0))}relationMapResetZoomInEvent({ntxId:t}){this.isNoteContext(t)&&this.pzInstance.zoomTo(0,0,1.2)}relationMapResetZoomOutEvent({ntxId:t}){this.isNoteContext(t)&&this.pzInstance.zoomTo(0,0,.8)}},canvas:class extends pt{constructor(){super(),this.SCENE_VERSION_INITIAL=-1,this.SCENE_VERSION_ERROR=-2,this.DEBOUNCE_TIME_ONCHANGEHANDLER=750,window.EXCALIDRAW_ASSET_PATH=`${window.location.origin}/node_modules/@excalidraw/excalidraw/dist/`,this.currentNoteId="",this.currentSceneVersion=this.SCENE_VERSION_INITIAL,this.excalidrawRef,this.$render,this.$widget,this.reactHandlers,this.createExcalidrawReactApp=this.createExcalidrawReactApp.bind(this),this.onChangeHandler=this.onChangeHandler.bind(this),this.isNewSceneVersion=this.isNewSceneVersion.bind(this),this.libraryChanged=!1}static getType(){return"canvas"}doRender(){this.$widget=$('\n    <div class="canvas-widget note-detail-canvas note-detail-printable note-detail">\n        <style>\n        .excalidraw .App-menu_top .buttonList {\n            display: flex;\n        }\n        \n        /* Conflict between excalidraw and bootstrap classes keeps the menu hidden */\n        /* https://github.com/zadam/trilium/issues/3780 */\n        /* https://github.com/excalidraw/excalidraw/issues/6567 */\n        .excalidraw .dropdown-menu {\n            display: block;\n        }\n\n        .excalidraw-wrapper {\n            height: 100%;\n        }\n        \n        .excalidraw button[data-testid="json-export-button"] {\n            display: none !important;\n        }\n\n        :root[dir="ltr"]\n        .excalidraw\n        .layer-ui__wrapper\n        .zen-mode-transition.App-menu_bottom--transition-left {\n            transform: none;\n        }\n        \n        /* collaboration not possible so hide the button */\n        .CollabButton {\n            display: none !important;\n        }\n        \n        button[data-testid=\'save-button\'], button[data-testid=\'json-export-button\'] {\n            display: none !important; /* these exports don\'t work, user should use import/export dialog */\n        }\n        \n        .library-button {\n            display: none !important; /* library won\'t work without extra support which isn\'t currently implemented */\n        }\n\n        </style>\n        \x3c!-- height here necessary. otherwise excalidraw not shown --\x3e\n        <div class="canvas-render" style="height: 100%"></div>  \n    </div>\n'),this.$widget.bind("mousewheel DOMMouseScroll",(t=>{if(t.ctrlKey)return t.preventDefault(),t.stopPropagation(),!1})),this.$widget.toggleClass("full-height",!0),this.$render=this.$widget.find(".canvas-render");const t=window.getComputedStyle(document.documentElement);return this.themeStyle=t.getPropertyValue("--theme-style")?.trim(),at.Z.requireLibrary(at.Z.EXCALIDRAW).then((()=>{const t=window.React,e=window.ReactDOM,n=this.$render.get(0);e.unmountComponentAtNode(n),e.render(t.createElement(this.createExcalidrawReactApp),n)})),this.$widget}async doRefresh(t){this.currentNoteId!==t.noteId&&(this.currentSceneVersion=this.SCENE_VERSION_INITIAL),this.currentNoteId=t.noteId;const e=await t.getBlob();for(;!this.excalidrawRef?.current;)console.log("excalidrawRef not yet loaded, sleep 200ms..."),await Rt(200);if(e.content?.trim()){if(e.content){let n;try{n=e.getJsonContent()}catch(i){console.error("Error parsing content. Probably note.type changed. Starting with empty canvas",t,e,i),n={elements:[],files:[],appState:{}}}const{elements:i,files:o,appState:s={}}=n;s.theme=this.themeStyle;const a=this.excalidrawWrapperRef.current.getBoundingClientRect();s.width=a.width,s.height=a.height,s.offsetLeft=a.left,s.offsetTop=a.top;const r={elements:i,appState:s,collaborators:[]},d=[];for(const t in o){const e=o[t];d.push(e)}this.excalidrawRef.current.updateScene(r),this.excalidrawRef.current.addFiles(d),this.excalidrawRef.current.history.clear()}}else{const t={elements:[],appState:{theme:this.themeStyle},collaborators:[]};this.excalidrawRef.current.updateScene(t)}Promise.all((await t.getAttachmentsByRole("canvasLibraryItem")).map((t=>t.getBlob()))).then((e=>{if(t.noteId!==this.currentNoteId)return;const n=e.map((t=>t.getJsonContentSafely())).filter((t=>!!t));this.excalidrawRef.current.updateLibrary({libraryItems:n,merge:!1})})),this.currentSceneVersion===this.SCENE_VERSION_INITIAL&&(this.currentSceneVersion=this.getSceneVersion())}async getData(){const t=this.excalidrawRef.current.getSceneElements(),e=this.excalidrawRef.current.getAppState(),n=this.excalidrawRef.current.getFiles(),i=(await window.ExcalidrawLib.exportToSvg({elements:t,appState:e,exportPadding:5,metadata:"trilium-export",files:n})).outerHTML,o={};t.forEach((t=>{t.fileId&&(o[t.fileId]=n[t.fileId])}));const s={type:"excalidraw",version:2,elements:t,files:o,appState:{scrollX:e.scrollX,scrollY:e.scrollY,zoom:e.zoom}},a=[{role:"image",title:"canvas-export.svg",mime:"image/svg+xml",content:i,position:0}];if(this.libraryChanged){const t=await this.excalidrawRef.current.updateLibrary({merge:!0});let e=10;for(const n of t)a.push({role:"canvasLibraryItem",title:n.id,mime:"application/json",content:JSON.stringify(n),position:e}),e+=10}return{content:JSON.stringify(s),attachments:a}}saveData(){this.spacedUpdate.scheduleUpdate()}dataSaved(){this.libraryChanged=!1}onChangeHandler(){const t=this.isNewSceneVersion(),e=this.currentSceneVersion!==this.SCENE_VERSION_INITIAL;t&&e&&(this.updateSceneVersion(),this.saveData())}createExcalidrawReactApp(){const t=window.React,{Excalidraw:e}=window.ExcalidrawLib,n=t.useRef(null);this.excalidrawRef=n;const i=t.useRef(null);this.excalidrawWrapperRef=i;const[o,s]=t.useState({width:void 0,height:void 0});t.useEffect((()=>{const t={width:i.current.getBoundingClientRect().width,height:i.current.getBoundingClientRect().height};s(t);const e=()=>{if("canvas"!==this.note?.type)return;const t={width:i.current.getBoundingClientRect().width,height:i.current.getBoundingClientRect().height};s(t)};return window.addEventListener("resize",e),()=>window.removeEventListener("resize",e)}),[i]);const a=t.useCallback(((t,e)=>{let n=t.link;n.startsWith("root/")&&(n="#"+n);const{nativeEvent:i}=e.detail;return e.preventDefault(),z.Z.goToLinkExt(i,n,null)}),[]);return t.createElement(t.Fragment,null,t.createElement("div",{className:"excalidraw-wrapper",ref:i},t.createElement(e,{theme:this.themeStyle,ref:n,langCode:"zh-CN",width:o.width,height:o.height,onPaste:(t,e)=>{console.log("Verbose: excalidraw internal paste. No trilium action implemented.",t,e)},onLibraryChange:()=>{this.libraryChanged=!0,this.saveData()},onChange:At(this.onChangeHandler,this.DEBOUNCE_TIME_ONCHANGEHANDLER),viewModeEnabled:!1,zenModeEnabled:!1,gridModeEnabled:!1,isCollaborating:!1,detectScroll:!1,handleKeyboardGlobally:!1,autoFocus:!1,onLinkOpen:a,UIOptions:{saveToActiveFile:!1,saveAsImage:!1}})))}isNewSceneVersion(){const t=this.getSceneVersion();return this.currentSceneVersion===this.SCENE_VERSION_INITIAL||this.currentSceneVersion!==t}getSceneVersion(){if(this.excalidrawRef){const t=this.excalidrawRef.current.getSceneElements();return window.ExcalidrawLib.getSceneVersion(t)}return this.SCENE_VERSION_ERROR}updateSceneVersion(){this.currentSceneVersion=this.getSceneVersion()}},protectedSession:class extends pt{static getType(){return"protectedSession"}doRender(){this.$widget=$('\n<div class="protected-session-password-component note-detail-printable">\n    <style>\n    .protected-session-password-component {\n        width: 300px;\n        margin: 30px auto auto;\n    }\n    </style>\n\n    <form class="protected-session-password-form">\n        <div class="form-group">\n            <label for="protected-session-password-in-detail">查看受保护的笔记需要输入密码:</label>\n            <input class="protected-session-password-in-detail form-control protected-session-password" type="password">\n        </div>\n\n        <button class="btn btn-primary">开始受保护的会话<kbd>回车</kbd></button>\n    </form>\n</div>'),this.$passwordForm=this.$widget.find(".protected-session-password-form"),this.$passwordInput=this.$widget.find(".protected-session-password"),this.$passwordForm.on("submit",(()=>{const t=this.$passwordInput.val();return this.$passwordInput.val(""),F.Z.setupProtectedSession(t),!1})),super.doRender()}},book:class extends pt{static getType(){return"book"}doRender(){this.$widget=$('\n<div class="note-detail-book note-detail-printable">\n    <style>\n    .note-detail-book-auto-help {\n        background-color: var(--accented-background-color);\n        text-align: center;\n        border-radius: 10px;\n        padding: 5px;\n        margin: 0 10px 10px 10px;\n    }\n    </style>\n\n    <div class="note-detail-book-empty-help alert alert-warning" style="margin: 50px; padding: 20px;">\n        这个类型为"书"的笔记没有任何子笔记, 所以什么也不显示. 详见 <a href="https://github.com/zadam/trilium/wiki/Book-note">wiki</a>.\n    </div>\n</div>'),this.$helpNoChildren=this.$widget.find(".note-detail-book-empty-help"),super.doRender()}async doRefresh(t){this.$helpNoChildren.toggle(!this.note.hasChildren())}},noteMap:class extends pt{static getType(){return"noteMap"}constructor(){super(),this.noteMapWidget=new Mt("type"),this.child(this.noteMapWidget)}doRender(){this.$widget=$('<div class="note-detail-note-map note-detail-printable"></div>'),this.$widget.append(this.noteMapWidget.render()),super.doRender()}async doRefresh(t){await this.noteMapWidget.refresh()}},webView:class extends pt{static getType(){return"webView"}doRender(){this.$widget=$('\n<div class="note-detail-web-view note-detail-printable" style="height: 100%">\n    <div class="note-detail-web-view-help alert alert-warning" style="margin: 50px; padding: 20px 20px 0px 20px;">\n        <h4>网页视图</h4>\n        \n        <p>网页视图类型的笔记允许您将网站嵌入到 Trilium.</p>\n\n        <p>首先, 请创建一个带有您要嵌入的 URL 地址的标签, 例如<code>#webViewSrc="https://www.baidu.com"</code></p>\n\n        <h4>实验性功能免责声明</h4>\n        \n        <p>网页视图是一种实验性笔记类型, 将来可能会被删除或大幅更改. 网页视图只在桌面端有效</p>\n    </div>\n\n    <webview class="note-detail-web-view-content"></webview>\n</div>'),this.$noteDetailWebViewHelp=this.$widget.find(".note-detail-web-view-help"),this.$noteDetailWebViewContent=this.$widget.find(".note-detail-web-view-content"),window.addEventListener("resize",(()=>this.setDimensions()),!1),super.doRender()}async doRefresh(t){this.$widget.show(),this.$noteDetailWebViewHelp.hide(),this.$noteDetailWebViewContent.hide();const e=this.note.getLabelValue("webViewSrc");e?this.$noteDetailWebViewContent.show().attr("src",e):(this.$noteDetailWebViewContent.hide(),this.$noteDetailWebViewHelp.show()),this.setDimensions(),setTimeout((()=>this.setDimensions()),1e3)}cleanup(){this.$noteDetailWebViewContent.removeAttribute("src")}setDimensions(){const t=this.$widget;this.$noteDetailWebViewContent.height(t.height()).width(t.width())}entitiesReloadedEvent({loadResults:t}){t.getAttributeRows().find((t=>"webViewSrc"===t.name&&T.isAffecting(t,this.noteContext.note)))&&this.refresh()}},doc:class extends pt{static getType(){return"doc"}doRender(){this.$widget=$('<div class="note-detail-doc note-detail-printable">\n    <style>\n        .note-detail-doc-content {\n            padding: 15px;\n        }\n        \n        .note-detail-doc-content pre {\n            background-color: var(--accented-background-color);\n            border: 1px solid var(--main-border-color);\n            padding: 15px;\n            border-radius: 5px;\n        }\n    </style>\n    \n    <div class="note-detail-doc-content"></div>\n</div>'),this.$content=this.$widget.find(".note-detail-doc-content"),super.doRender()}async doRefresh(t){const e=t.getLabelValue("docName");e?this.$content.load(`${window.glob.appPath}/doc_notes/${e}.html`):this.$content.empty()}},contentWidget:class extends pt{static getType(){return"contentWidget"}doRender(){this.$widget=$('<div class="note-detail-content-widget note-detail-printable">\n    <style>\n        .type-contentWidget .note-detail {\n            height: 100%;\n        }\n        \n        .note-detail-content-widget {\n            height: 100%;\n        }\n    \n        .note-detail-content-widget-content {\n            padding: 15px;\n            height: 100%;\n        }\n    </style>\n\n    <div class="note-detail-content-widget-content"></div>\n</div>'),this.$content=this.$widget.find(".note-detail-content-widget-content"),super.doRender()}async doRefresh(t){this.$content.empty(),this.children=[];const e=Ft[t.noteId];if(e)for(const t of e){const e=new t;await e.handleEvent("setNoteContext",{noteContext:this.noteContext}),this.child(e),this.$content.append(e.render()),await e.refresh()}else this.$content.append(`Unknown widget for "${t.noteId}"`)}},attachmentDetail:class extends pt{static getType(){return"attachmentDetail"}doRender(){this.$widget=$('\n<div class="attachment-detail note-detail-printable">\n    <style>\n        .attachment-detail {\n            padding-left: 15px;\n            padding-right: 15px;\n            height: 100%;\n            display: flex;\n            flex-direction: column;\n        }\n        \n        .attachment-detail .links-wrapper {\n            font-size: larger;\n            padding: 0 0 16px 0;\n        }\n        \n        .attachment-detail .attachment-wrapper {\n            flex-grow: 1;\n        }\n    </style>\n\n    <div class="links-wrapper"></div>\n\n    <div class="attachment-wrapper"></div>\n</div>'),this.$wrapper=this.$widget.find(".attachment-wrapper"),this.$linksWrapper=this.$widget.find(".links-wrapper"),super.doRender()}async doRefresh(t){this.$wrapper.empty(),this.children=[];const n=$('<button class="attachment-help-button" type="button" data-help-page="attachments" title="打开附件帮助页面"><span class="bx bx-help-circle"></span></button>');e.default.initHelpButtons(n),this.$linksWrapper.empty().append("所属笔记: ",await z.Z.createLink(this.noteId),", 你也可以打开 ",await z.Z.createLink(this.noteId,{title:"所有附件列表",viewScope:{viewMode:"attachments"}}),n);const i=await a.default.getAttachment(this.attachmentId,!0);if(!i)return void this.$wrapper.html("<strong>这个附件已被删除</strong>");const o=new Ut(i,!0);this.child(o),this.$wrapper.append(o.render())}async entitiesReloadedEvent({loadResults:t}){const e=t.getAttachmentRows().find((t=>t.attachmentId===this.attachmentId));e?.isDeleted&&this.refresh()}get attachmentId(){return this.noteContext.viewScope.attachmentId}},attachmentList:class extends pt{static getType(){return"attachmentList"}doRender(){this.$widget=$('\n<div class="attachment-list note-detail-printable">\n    <style>\n        .attachment-list {\n            padding-left: 15px;\n            padding-right: 15px;\n        }\n        \n        .attachment-list .links-wrapper {\n            font-size: larger;\n            margin-bottom: 15px;\n            display: flex;\n            justify-content: space-between;\n            align-items: baseline;\n        }\n    </style>\n    \n    <div class="links-wrapper"></div>\n\n    <div class="attachment-list-wrapper"></div>\n</div>'),this.$list=this.$widget.find(".attachment-list-wrapper"),this.$linksWrapper=this.$widget.find(".links-wrapper"),super.doRender()}async doRefresh(t){const n=$('<button class="attachment-help-button" type="button" data-help-page="attachments" title="打开附件帮助页面"><span class="bx bx-help-circle"></span></button>');e.default.initHelpButtons(n);const i=await z.Z.createLink(this.noteId);this.$linksWrapper.empty().append($("<div>").append("所属笔记: ",i),$("<div>").append($('<button class="btn btn-sm">').text("上传附件").on("click",(()=>this.triggerCommand("showUploadAttachmentsDialog",{noteId:this.noteId}))),n)),this.$list.empty(),this.children=[],this.renderedAttachmentIds=new Set;const o=await t.getAttachments();if(0!==o.length)for(const t of o){const e=new Ut(t,!1);this.child(e),this.renderedAttachmentIds.add(t.attachmentId),this.$list.append(e.render())}else this.$list.html('<div class="alert alert-info">这个笔记没有附件</div>')}async entitiesReloadedEvent({loadResults:t}){t.getAttachmentRows().some((t=>!this.renderedAttachmentIds.has(t.attachmentId)))&&this.refresh()}}};class qt extends B.Z{constructor(){super(),this.typeWidgets={},this.spacedUpdate=new K.Z((async()=>{const{note:t}=this.noteContext,{noteId:e}=t,n=await this.getTypeWidget().getData();void 0!==n&&(H.Z.touchProtectedSessionIfNecessary(t),await o.Z.put(`notes/${e}/data`,n,this.componentId),this.getTypeWidget().dataSaved?.())})),t.default.addBeforeUnloadListener(this)}isEnabled(){return!0}doRender(){this.$widget=$('\n<div class="note-detail">\n    <style>\n    .note-detail {\n        font-family: var(--detail-font-family);\n        font-size: var(--detail-font-size);\n    }\n    \n    .note-detail.full-height {\n        height: 100%;\n    }\n    </style>\n</div>\n'),this.contentSized()}async refresh(){if(this.type=await this.getWidgetType(),this.mime=this.note?.mime,!(this.type in this.typeWidgets)){const t=jt[this.type];if(!t)throw new Error(`Cannot find type widget for type '${this.type}'`);const e=this.typeWidgets[this.type]=new t;e.spacedUpdate=this.spacedUpdate,e.setParent(this);const n=e.render();k.default.updateDisplayedShortcuts(n),this.$widget.append(n),await e.handleEvent("setNoteContext",{noteContext:this.noteContext}),await e.handleEvent("noteSwitched",{noteContext:this.noteContext,notePath:this.noteContext.notePath}),this.child(e)}this.checkFullHeight()}checkFullHeight(){this.$widget.toggleClass("full-height",!this.noteContext.hasNoteList()&&["canvas","webView","noteMap"].includes(this.type)&&"text/x-sqlite;schema=trilium"!==this.mime||"attachments"===this.noteContext.viewScope.viewMode)}getTypeWidget(){if(!this.typeWidgets[this.type])throw new Error(`Could not find typeWidget for type '${this.type}'`);return this.typeWidgets[this.type]}async getWidgetType(){const t=this.note;if(!t)return"empty";let e=t.type;const n=this.noteContext.viewScope;return"source"===n.viewMode?e="readOnlyCode":"attachments"===n.viewMode?e=n.attachmentId?"attachmentDetail":"attachmentList":"text"===e&&await this.noteContext.isReadOnly()?e="readOnlyText":"code"!==e&&"mermaid"!==e||!await this.noteContext.isReadOnly()?"text"===e?e="editableText":"code"===e||"mermaid"===e?e="editableCode":"launcher"===e&&(e="doc"):e="readOnlyCode",t.isProtected&&!H.Z.isProtectedSessionAvailable()&&(e="protectedSession"),e}async focusOnDetailEvent({ntxId:t}){if(this.noteContext.ntxId!==t)return;await this.refresh();const e=this.getTypeWidget();await e.initialized,e.focus()}async scrollToEndEvent({ntxId:t}){if(this.noteContext.ntxId!==t)return;await this.refresh();const e=this.getTypeWidget();await e.initialized,e.scrollToEnd&&e.scrollToEnd()}async beforeNoteSwitchEvent({noteContext:t}){this.isNoteContext(t.ntxId)&&await this.spacedUpdate.updateNowIfNecessary()}async beforeNoteContextRemoveEvent({ntxIds:t}){this.isNoteContext(t)&&await this.spacedUpdate.updateNowIfNecessary()}async runActiveNoteCommand(t){return this.isNoteContext(t.ntxId)&&await this.spacedUpdate.updateNowIfNecessary(),await this.parent.triggerCommand("runActiveNote",t)}async printActiveNoteEvent(){if(!this.noteContext.isActive())return;await at.Z.requireLibrary(at.Z.PRINT_THIS);let t=$("");this.note.getPromotedDefinitionAttributes().length>0&&(t=(await rt.Z.renderNormalAttributes(this.note)).$renderedAttributes);const{assetPath:e}=window.glob;this.$widget.find(".note-detail-printable:visible").printThis({header:$("<div>").append($("<h2>").text(this.note.title)).append(t).prop("outerHTML"),footer:`\n<script src="${e}/node_modules/katex/dist/katex.min.js"><\/script>\n<script src="${e}/node_modules/katex/dist/contrib/mhchem.min.js"><\/script>\n<script src="${e}/node_modules/katex/dist/contrib/auto-render.min.js"><\/script>\n<script>\n    document.body.className += ' ck-content printed-content';\n    \n    renderMathInElement(document.body, {trust: true});\n<\/script>\n`,importCSS:!1,loadCSS:[`${e}/libraries/codemirror/codemirror.css`,`${e}/libraries/ckeditor/ckeditor-content.css`,`${e}/libraries/bootstrap/css/bootstrap.min.css`,`${e}/node_modules/katex/dist/katex.min.css`,`${e}/stylesheets/print.css`,`${e}/stylesheets/relation_map.css`,`${e}/stylesheets/ckeditor-theme.css`],debug:!0})}hoistedNoteChangedEvent({ntxId:t}){this.isNoteContext(t)&&this.refresh()}async entitiesReloadedEvent({loadResults:t}){if(t.isNoteContentReloaded(this.noteId,this.componentId))this.handleEvent("noteTypeMimeChanged",{noteId:this.noteId});else if(!t.isNoteReloaded(this.noteId,this.componentId)||this.type===await this.getWidgetType()&&this.mime===this.note.mime){const e=t.getAttributeRows(),n=e.find((t=>"label"===t.type&&["readOnly","autoReadOnlyDisabled","cssClass","displayRelations","hideRelations"].includes(t.name)&&T.isAffecting(t,this.note))),i=e.find((t=>"relation"===t.type&&["template","inherit","renderNote"].includes(t.name)&&T.isAffecting(t,this.note)));(n||i)&&this.triggerEvent("noteTypeMimeChanged",{noteId:this.noteId})}else this.triggerEvent("noteTypeMimeChanged",{noteId:this.noteId})}beforeUnloadEvent(){return this.spacedUpdate.isAllSavedAndTriggerUpdate()}readOnlyTemporarilyDisabledEvent({noteContext:t}){this.isNoteContext(t.ntxId)&&this.refresh()}async executeInActiveNoteDetailWidgetEvent({callback:t}){this.isActiveNoteContext()&&(await this.initialized,t(this))}async cutIntoNoteCommand(){const e=t.default.tabManager.getActiveContextNote();e&&s.Z.createNote(t.default.tabManager.getActiveContextNotePath(),{isProtected:e.isProtected,saveSelection:!0,textEditor:await this.noteContext.getTextEditor()})}async saveNoteDetailNowCommand(){await this.spacedUpdate.updateNowIfNecessary()}renderActiveNoteEvent(){this.noteContext.isActive()&&this.refresh()}async executeWithTypeWidgetEvent({resolve:t,ntxId:e}){this.isNoteContext(e)&&(await this.initialized,await this.getWidgetType(),t(this.getTypeWidget()))}}class Vt extends B.Z{constructor(){super(),this.contentSized(),this.ribbonWidgets=[],this.buttonWidgets=[]}isEnabled(){return super.isEnabled()&&"default"===this.noteContext.viewScope.viewMode}ribbon(t){return super.child(t),this.ribbonWidgets.push(t),this}button(t){return super.child(t),this.buttonWidgets.push(t),this}doRender(){this.$widget=$('\n<div class="ribbon-container">\n    <style>\n    .ribbon-container {\n        margin-bottom: 5px;\n    }\n    \n    .ribbon-top-row {\n        display: flex;\n    }\n    \n    .ribbon-tab-container {\n        display: flex;\n        flex-direction: row;\n        justify-content: center;\n        margin-left: 10px;\n        flex-grow: 1;\n        flex-flow: row wrap;\n    }\n    \n    .ribbon-tab-title {\n        color: var(--muted-text-color);\n        border-bottom: 1px solid var(--main-border-color); \n        min-width: 24px;\n        flex-basis: 24px;\n        max-width: max-content;\n        flex-grow: 10;\n    }\n\n    .ribbon-tab-title .bx {\n        font-size: 150%;\n        position: relative;\n        top: 3px;\n    }\n    \n    .ribbon-tab-title.active {\n        color: var(--main-text-color);\n        border-bottom: 3px solid var(--main-text-color);\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n    }\n    \n    .ribbon-tab-title:hover {\n        cursor: pointer;\n    }\n\n    .ribbon-tab-title:hover {\n        color: var(--main-text-color);\n    }\n    \n    .ribbon-tab-title:first-of-type {\n        padding-left: 10px;\n    }\n    \n    .ribbon-tab-spacer {\n        flex-basis: 0;\n        min-width: 0;\n        max-width: 35px;\n        flex-grow: 1;\n        border-bottom: 1px solid var(--main-border-color);\n    }\n        \n    .ribbon-tab-spacer:last-of-type {\n        flex-grow: 1;\n        flex-basis: 0;\n        min-width: 0;\n        max-width: 10000px;\n    }\n    \n    .ribbon-button-container {\n        display: flex;\n        border-bottom: 1px solid var(--main-border-color); \n        margin-right: 5px;\n    }\n    \n    .ribbon-button-container > * {\n        position: relative;\n        top: -3px;\n        margin-left: 10px;\n    }\n    \n    .ribbon-body {\n        display: none;\n        border-bottom: 1px solid var(--main-border-color);\n        margin-left: 10px;\n        margin-right: 5px; /* needs to have this value so that the bottom border is the same width as the top one */\n    }\n    \n    .ribbon-body.active {\n        display: block;\n    }\n    \n    .ribbon-tab-title-label {\n        display: none;\n    }\n    \n    .ribbon-tab-title.active .ribbon-tab-title-label {\n        display: inline;\n    }\n    </style>\n\n    <div class="ribbon-top-row">\n        <div class="ribbon-tab-container"></div>\n        <div class="ribbon-button-container"></div>\n    </div>\n    \n    <div class="ribbon-body-container"></div>\n</div>'),this.$tabContainer=this.$widget.find(".ribbon-tab-container"),this.$buttonContainer=this.$widget.find(".ribbon-button-container"),this.$bodyContainer=this.$widget.find(".ribbon-body-container");for(const t of this.ribbonWidgets)this.$bodyContainer.append($('<div class="ribbon-body">').attr("data-ribbon-component-id",t.componentId).append(t.render()));for(const t of this.buttonWidgets)this.$buttonContainer.append(t.render());this.$tabContainer.on("click",".ribbon-tab-title",(t=>{const e=$(t.target).closest(".ribbon-tab-title");this.toggleRibbonTab(e)}))}toggleRibbonTab(t,e=!0){const n=!t.hasClass("active");if(this.$tabContainer.find(".ribbon-tab-title").removeClass("active"),this.$bodyContainer.find(".ribbon-body").removeClass("active"),n){const n=t.attr("data-ribbon-component-id"),i=this.lastActiveComponentId===n;this.lastActiveComponentId=n,this.$tabContainer.find(`.ribbon-tab-title[data-ribbon-component-id="${n}"]`).addClass("active"),this.$bodyContainer.find(`.ribbon-body[data-ribbon-component-id="${n}"]`).addClass("active");const o=this.getActiveRibbonWidget();if(o&&(e||!i)){const t=o.handleEvent("noteSwitched",{noteContext:this.noteContext,notePath:this.notePath});e&&(t?t.then((()=>o.focus?.())):o.focus?.())}}else this.lastActiveComponentId=null}async noteSwitched(){this.lastActiveComponentId=null,await super.noteSwitched()}async refreshWithNote(t,e=!1){let n,i;this.lastNoteType=t.type,this.$tabContainer.empty();for(const o of this.ribbonWidgets){const s=o.getTitle(t);if(!s.show)continue;const a=$('<div class="ribbon-tab-title">').attr("data-ribbon-component-id",o.componentId).attr("data-ribbon-component-name",o.name).append($('<span class="ribbon-tab-title-icon">').addClass(s.icon).attr("data-title",s.title).attr("data-toggle-command",o.toggleCommand)).append(" ").append($('<span class="ribbon-tab-title-label">').text(s.title));this.$tabContainer.append(a),this.$tabContainer.append('<div class="ribbon-tab-spacer">'),!s.activate||this.lastActiveComponentId||n||e||(n=a),this.lastActiveComponentId===o.componentId&&(i=a)}k.default.getActions().then((t=>{this.$tabContainer.find(".ribbon-tab-title-icon").tooltip({title:function(){const e=$(this).attr("data-toggle-command"),n=t.find((t=>t.actionName===e)),i=$(this).attr("data-title");return n&&n.effectiveShortcuts.length>0?`${i} (${n.effectiveShortcuts.join(", ")})`:i}})})),n||(n=i),n?this.toggleRibbonTab(n,!1):this.$bodyContainer.find(".ribbon-body").removeClass("active")}isRibbonTabActive(t){return this.$widget.find(`.ribbon-tab-title[data-ribbon-component-name='${t}']`).hasClass("active")}ensureOwnedAttributesAreOpen(t){this.isNoteContext(t)&&!this.isRibbonTabActive("ownedAttributes")&&this.toggleRibbonTabWithName("ownedAttributes",t)}addNewLabelEvent({ntxId:t}){this.ensureOwnedAttributesAreOpen(t)}addNewRelationEvent({ntxId:t}){this.ensureOwnedAttributesAreOpen(t)}toggleRibbonTabWithName(t,e){if(!this.isNoteContext(e))return!1;const n=this.$widget.find(`.ribbon-tab-title[data-ribbon-component-name='${t}']`);n&&this.toggleRibbonTab(n)}handleEvent(t,e){if(!t.startsWith("toggleRibbonTab"))return super.handleEvent(t,e);{let n=t.substr(15);n=n[0].toLowerCase()+n.substr(1),this.toggleRibbonTabWithName(n,e.ntxId)}}async handleEventInChildren(t,e){if(["activeContextChanged","setNoteContext"].includes(t))await super.handleEventInChildren("setNoteContext",e);else if(this.isEnabled()||"initialRenderComplete"===t){const n=this.getActiveRibbonWidget();n&&await n.handleEvent(t,e);for(const n of this.buttonWidgets)await n.handleEvent(t,e)}}entitiesReloadedEvent({loadResults:t}){t.isNoteReloaded(this.noteId)&&this.lastNoteType!==this.note.type?(this.lastNoteType=this.note.type,this.refresh()):t.getAttributeRows(this.componentId).find((t=>T.isAffecting(t,this.note)))&&this.refreshWithNote(this.note,!0)}getActiveRibbonWidget(){return this.ribbonWidgets.find((t=>t.componentId===this.lastActiveComponentId))}}class Kt extends B.Z{get name(){return"promotedAttributes"}get toggleCommand(){return"toggleRibbonTabPromotedAttributes"}doRender(){this.$widget=$('\n<div class="promoted-attributes-widget">\n    <style>\n    body.mobile .promoted-attributes-widget {\n        /* https://github.com/zadam/trilium/issues/4468 */\n        flex-shrink: 0.4;\n        overflow: auto;\n    }\n    \n    .promoted-attributes-container {\n        margin: auto;\n        display: flex;\n        flex-direction: row;\n        flex-shrink: 0;\n        flex-grow: 0;\n        justify-content: space-evenly;\n        overflow: auto;\n        max-height: 400px;\n        flex-wrap: wrap;\n    }\n    \n    .promoted-attribute-cell {\n        display: flex;\n        align-items: center;\n        margin: 10px;\n    }\n    \n    .promoted-attribute-cell div.input-group {\n        margin-left: 10px;\n    }\n    .promoted-attribute-cell strong {\n        word-break:keep-all;\n        white-space: nowrap;\n    }\n    </style>\n    \n    <div class="promoted-attributes-container"></div>\n</div>'),this.contentSized(),this.$container=this.$widget.find(".promoted-attributes-container")}getTitle(t){return 0===t.getPromotedDefinitionAttributes().length?{show:!1}:{show:!0,activate:m.Z.is("promotedAttributesOpenInRibbon"),title:"升级属性",icon:"bx bx-table"}}async refreshWithNote(t){this.$container.empty();const e=t.getPromotedDefinitionAttributes(),n=t.getOwnedAttributes();if(n.sort(((t,e)=>t.position-e.position)),0===e.length)return void this.toggleInt(!1);const i=[];for(const t of e){const e=t.name.startsWith("label:")?"label":"relation",o=t.name.substr(e.length+1);let s=n.filter((t=>t.name===o&&t.type===e));0===s.length&&s.push({attributeId:"",type:e,name:o,value:""}),"single"===t.getDefinition().multiplicity&&(s=s.slice(0,1));for(const e of s){const n=await this.createPromotedAttributeCell(t,e,o);i.push(n)}}this.$container.empty().append(...i),this.toggleInt(!0)}async createPromotedAttributeCell(t,n,i){const s=t.getDefinition(),a=$("<input>").prop("tabindex",200+t.position).attr("data-attribute-id",n.noteId===this.noteId?n.attributeId:"").attr("data-attribute-type",n.type).attr("data-attribute-name",n.name).prop("value",n.value).addClass("form-control").addClass("promoted-attribute-input").on("change",(t=>this.promotedAttributeChanged(t))),r=$("<div>"),d=$("<td>").addClass("multiplicity").attr("nowrap",!0),l=$('<div class="promoted-attribute-cell" style="white-space: nowrap;">').append($("<strong>").text(s.promotedAlias??i)).append($("<div>").addClass("input-group").append(a)).append(r).append(d);if("label"===n.type)if("text"===s.labelType)a.prop("type","text"),e.default.isDesktop()&&o.Z.get(`attribute-values/${encodeURIComponent(n.name)}`).then((t=>{0!==t.length&&(t=t.map((t=>({value:t}))),a.autocomplete({appendTo:document.querySelector("body"),hint:!1,autoselect:!1,openOnFocus:!0,minLength:0,tabAutocomplete:!1},[{displayKey:"value",source:function(e,n){e=e.toLowerCase(),n(t.filter((t=>t.value.toLowerCase().includes(e))))}}]),a.on("autocomplete:selected",(t=>this.promotedAttributeChanged(t))))}));else if("number"===s.labelType){a.prop("type","number");let t=1;for(let e=0;e<(s.numberPrecision||0)&&e<10;e++)t/=10;a.prop("step",t),a.css("text-align","right").css("width","120")}else if("boolean"===s.labelType)a.prop("type","checkbox"),a.css("width","80px"),"true"===n.value&&a.prop("checked","checked");else if("date"===s.labelType)a.prop("type","date");else if("datetime"===s.labelType)a.prop("type","datetime-local");else if("url"===s.labelType){a.prop("placeholder","http://website...");const t=$("<span>").addClass("input-group-text open-external-link-button bx bx-window-open").prop("title","Open external link").on("click",(()=>window.open(a.val(),"_blank")));a.after($("<div>").addClass("input-group-append").append(t))}else D.Z.logError(`Unknown labelType '${t.labelType}'`);else{if("relation"!==n.type)return void D.Z.logError(`Unknown attribute type '${n.type}'`);n.value&&a.val(await Z.Z.getNoteTitle(n.value)),e.default.isDesktop()?(h.initNoteAutocomplete(a,{allowCreatingNotes:!0}),a.on("autocomplete:noteselected",((t,e,n)=>{this.promotedAttributeChanged(t)})),a.setSelectedNotePath(n.value)):a.attr("readonly","readonly")}if("multi"===s.multiplicity){const e=$("<span>").addClass("bx bx-plus pointer").prop("title","Add new attribute").on("click",(async()=>{const e=await this.createPromotedAttributeCell(t,{attributeId:"",type:n.type,name:i,value:""},i);l.after(e),e.find("input").trigger("focus")})),s=$("<span>").addClass("bx bx-trash pointer").prop("title","Remove this attribute").on("click",(async()=>{const e=a.attr("data-attribute-id");e&&await o.Z.remove(`notes/${this.noteId}/attributes/${e}`,this.componentId);const s=`input[data-attribute-type='${n.type}'][data-attribute-name='${i}']`;if(this.$widget.find(s).length<=1){const e=await this.createPromotedAttributeCell(t,{attributeId:"",type:n.type,name:i,value:""},i);l.after(e)}l.remove()}));d.append(" &nbsp;").append(e).append(" &nbsp;").append(s)}return l}async promotedAttributeChanged(t){const e=$(t.target);let n;if("checkbox"===e.prop("type"))n=e.is(":checked")?"true":"false";else if("relation"===e.attr("data-attribute-type")){const t=e.getSelectedNotePath();n=t?Z.Z.getNoteIdFromUrl(t):""}else n=e.val();const i=await o.Z.put(`notes/${this.noteId}/attribute`,{attributeId:e.attr("data-attribute-id"),type:e.attr("data-attribute-type"),name:e.attr("data-attribute-name"),value:n},this.componentId);e.attr("data-attribute-id",i.attributeId)}focus(){this.$widget.find(".promoted-attribute-input:first").focus()}entitiesReloadedEvent({loadResults:t}){t.getAttributeRows(this.componentId).find((t=>T.isAffecting(t,this.note)))&&this.refresh()}}class Jt extends B.Z{get name(){return"inheritedAttributes"}get toggleCommand(){return"toggleRibbonTabInheritedAttributes"}constructor(){super(),this.attributeDetailWidget=(new et).contentSized().setParent(this),this.child(this.attributeDetailWidget)}getTitle(){return{show:!this.note.isLaunchBarConfig(),title:"继承的属性",icon:"bx bx-list-plus"}}doRender(){this.$widget=$('\n<div class="inherited-attributes-widget">\n    <style>\n    .inherited-attributes-widget {\n        position: relative;\n    }\n    \n    .inherited-attributes-container {\n        color: var(--muted-text-color);\n        max-height: 200px;\n        overflow: auto;\n        padding: 14px 12px 13px 12px;\n    }\n    </style>\n\n    <div class="inherited-attributes-container"></div>\n</div>'),this.contentSized(),this.$container=this.$widget.find(".inherited-attributes-container"),this.$widget.append(this.attributeDetailWidget.render())}async refreshWithNote(t){this.$container.empty();const e=this.getInheritedAttributes(t);if(0!==e.length)for(const t of e){const e=(await rt.Z.renderAttribute(t,!1)).on("click",(e=>{setTimeout((()=>this.attributeDetailWidget.showAttributeDetail({attribute:{noteId:t.noteId,type:t.type,name:t.name,value:t.value,isInheritable:t.isInheritable},isOwned:!1,x:e.pageX,y:e.pageY})),100)}));this.$container.append(e).append(" ")}else this.$container.append("没有继承的属性.")}getInheritedAttributes(t){const e=t.getAttributes().filter((t=>t.noteId!==this.noteId));return e.sort(((t,e)=>t.noteId===e.noteId?t.position-e.position:t.noteId<e.noteId?-1:1)),e}entitiesReloadedEvent({loadResults:t}){t.getAttributeRows(this.componentId).find((t=>T.isAffecting(t,this.note)))&&this.refresh()}}const Gt=class{constructor(t,e,n,i=!1){this.$noteList=$('\n<div class="note-list">\n    <style>\n    .note-list {\n        overflow: hidden;\n        position: relative;\n        height: 100%;\n    }\n\n    .note-list.grid-view .note-list-container {\n        display: flex;\n        flex-wrap: wrap;\n    }\n\n    .note-list.grid-view .note-book-card {\n        flex-basis: 300px;\n        border: 1px solid transparent;\n    }\n\n    .note-list.grid-view .note-expander {\n        display: none;\n    }\n\n    .note-list.grid-view .note-book-card {\n        max-height: 300px;\n    }\n    \n    .note-list.grid-view .note-book-card img {\n        max-height: 220px;\n        object-fit: contain;\n    }\n\n    .note-list.grid-view .note-book-card:hover {\n        cursor: pointer;\n        border: 1px solid var(--main-border-color);\n        background: var(--more-accented-background-color);\n    }\n\n    .note-book-card {\n        border-radius: 10px;\n        background-color: var(--accented-background-color);\n        padding: 10px 15px 15px 8px;\n        margin: 5px 5px 5px 5px;\n        overflow: hidden;\n        display: flex;\n        flex-direction: column;\n        flex-shrink: 0;\n        flex-grow: 1;\n    }\n\n    .note-book-card:not(.expanded) .note-book-content {\n        display: none !important;\n        padding: 10px\n    }\n\n    .note-book-card.expanded .note-book-content {\n        display: block;\n        min-height: 0;\n        height: 100%;\n        padding-top: 10px;\n    }\n\n    .note-book-content .rendered-content {\n        height: 100%;\n    }\n\n    .note-book-header {\n        border-bottom: 1px solid var(--main-border-color);\n        margin-bottom: 0;\n        padding-bottom: .5rem;\n        word-break: break-all;\n    }\n\n    /* not-expanded title is limited to one line only */\n    .note-book-card:not(.expanded) .note-book-header {\n        overflow: hidden;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n    }\n\n    .note-book-header .rendered-note-attributes {\n        font-size: medium;\n    }\n\n    .note-book-header .rendered-note-attributes:before {\n        content: "\\00a0\\00a0";\n    }\n\n    .note-book-header .note-icon {\n        font-size: 100%;\n        display: inline-block;\n        padding-right: 7px;\n        position: relative;\n    }\n\n    .note-book-card .note-book-card {\n        border: 1px solid var(--main-border-color);\n    }\n\n    .note-book-content.type-image, .note-book-content.type-file, .note-book-content.type-protectedSession {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        text-align: center;\n        padding: 10px;\n    }\n\n    .note-book-content.type-image img, .note-book-content.type-canvas svg {\n        max-width: 100%;\n        max-height: 100%;\n        object-fit: contain;\n    }\n\n    .note-book-card.type-image .note-book-content img,\n    .note-book-card.type-text .note-book-content img,\n    .note-book-card.type-canvas .note-book-content img {\n        max-width: 100%;\n        max-height: 100%;\n    }\n\n    .note-book-header {\n        flex-grow: 0;\n    }\n\n    .note-list-wrapper {\n        height: 100%;\n        overflow: auto;\n    }\n\n    .note-expander {\n        font-size: x-large;\n        position: relative;\n        top: 3px;\n        cursor: pointer;\n    }\n\n    .note-list-pager {\n        text-align: center;\n    }\n    </style>\n\n    <div class="note-list-wrapper">\n        <div class="note-list-pager"></div>\n\n        <div class="note-list-container"></div>\n\n        <div class="note-list-pager"></div>\n    </div>\n</div>'),t.empty(),this.parentNote=e;const o=this.getIncludedNoteIds();this.noteIds=n.filter((t=>!o.has(t)&&"_hidden"!==t)),0!==this.noteIds.length&&(t.append(this.$noteList),this.page=1,this.pageSize=parseInt(e.getLabelValue("pageSize")),(!this.pageSize||this.pageSize<1)&&(this.pageSize=20),this.viewType=e.getLabelValue("viewType"),["list","grid"].includes(this.viewType)||(this.viewType="search"===e.type?"list":"grid"),this.$noteList.addClass(`${this.viewType}-view`),this.showNotePath=i)}getIncludedNoteIds(){const t=this.parentNote?this.parentNote.getRelations().filter((t=>"imageLink"===t.name||"includeNoteLink"===t.name)):[];return new Set(t.map((t=>t.value)))}async renderList(){if(0===this.noteIds.length)return void this.$noteList.hide();const t=this.parentNote.highlightedTokens||[];t.length>0?(await at.Z.requireLibrary(at.Z.MARKJS),this.highlightRegex=new RegExp(t.join("|"),"gi")):this.highlightRegex=null,this.$noteList.show();const e=this.$noteList.find(".note-list-container").empty(),n=(this.page-1)*this.pageSize,i=n+this.pageSize,o=this.noteIds.slice(n,Math.min(i,this.noteIds.length)),s=await a.default.getNotes(o);for(const t of s){const n=await this.renderNote(t,this.parentNote.isLabelTruthy("expanded"));e.append(n)}return this.renderPager(),this.$noteList}renderPager(){const t=this.$noteList.find(".note-list-pager").empty(),e=Math.ceil(this.noteIds.length/this.pageSize);let n;t.toggle(e>1);for(let i=1;i<=e;i++)if(e<20||i<=5||e-i<=5||Math.abs(this.page-i)<=2){n=!0;const e=(i-1)*this.pageSize+1,o=Math.min(this.noteIds.length,i*this.pageSize);t.append(i===this.page?$("<span>").text(i).css("text-decoration","underline").css("font-weight","bold"):$('<a href="javascript:">').text(i).attr("title",`Page of ${e} - ${o}`).on("click",(()=>{this.page=i,this.renderList()}))," &nbsp; ")}else n&&(t.append("... &nbsp; "),n=!1);t.append(`<span class="note-list-pager-total-count">(${this.noteIds.length} notes)</span>`)}async renderNote(t,e=!1){const n=$('<span class="note-expander bx bx-chevron-right"></span>'),{$renderedAttributes:i}=await rt.Z.renderNormalAttributes(t),o="search"===this.parentNote.type?t.noteId:`${this.parentNote.noteId}/${t.noteId}`,s=$('<div class="note-book-card">').attr("data-note-id",t.noteId).append($('<h5 class="note-book-header">').append(n).append($('<span class="note-icon">').addClass(t.getIcon())).append("grid"===this.viewType?$('<span class="note-book-title">').text(await Z.Z.getNoteTitle(t.noteId,this.parentNote.noteId)):(await z.Z.createLink(o,{showTooltip:!1,showNotePath:this.showNotePath})).addClass("note-book-title")).append(i));return"grid"===this.viewType&&s.addClass("block-link").attr("data-href",`#${o}`).on("click",(t=>z.Z.goToLink(t))),n.on("click",(()=>this.toggleContent(s,t,!s.hasClass("expanded")))),this.highlightRegex&&s.find(".note-book-title").markRegExp(this.highlightRegex,{element:"span",className:"ck-find-result",separateWordSearch:!1,caseSensitive:!1}),await this.toggleContent(s,t,e),s}async toggleContent(t,e,n){if("list"===this.viewType&&(n&&t.hasClass("expanded")||!n&&!t.hasClass("expanded")))return;const i=t.find("> .note-book-header .note-expander");n||"grid"===this.viewType?(t.addClass("expanded"),i.addClass("bx-chevron-down").removeClass("bx-chevron-right")):(t.removeClass("expanded"),i.addClass("bx-chevron-right").removeClass("bx-chevron-down")),!n&&"grid"!==this.viewType||0!==t.find(".note-book-content").length||t.append(await this.renderNoteContent(e))}async renderNoteContent(t){const e=$('<div class="note-book-content">');try{const{$renderedContent:n,type:i}=await wt.Z.getRenderedContent(t,{trim:"grid"===this.viewType});this.highlightRegex&&n.markRegExp(this.highlightRegex,{element:"span",className:"ck-find-result",separateWordSearch:!1,caseSensitive:!1}),e.append(n),e.addClass(`type-${i}`)}catch(n){console.log(`Caught error while rendering note '${t.noteId}' of type '${t.type}': ${n.message}, stack: ${n.stack}`),e.append("rendering error")}if("list"===this.viewType){const n=t.getRelations("imageLink"),i=(await t.getChildNotes()).filter((t=>!n.find((e=>e.value===t.noteId))));for(const t of i)e.append(await this.renderNote(t))}return e}};class Yt extends B.Z{isEnabled(){return super.isEnabled()&&this.noteContext.hasNoteList()}doRender(){this.$widget=$('\n<div class="note-list-widget">\n    <style>\n    .note-list-widget {\n        min-height: 0;\n        overflow: auto;\n    }\n    \n    .note-list-widget .note-list {\n        padding: 10px;\n    }\n    </style>\n    \n    <div class="note-list-widget-content">\n    </div>\n</div>'),this.contentSized(),this.$content=this.$widget.find(".note-list-widget-content");const t=new IntersectionObserver((t=>{this.isIntersecting=t[0].isIntersecting,this.checkRenderStatus()}),{rootMargin:"50px",threshold:.1});setTimeout((()=>t.observe(this.$widget[0])),10)}checkRenderStatus(){this.isIntersecting&&this.noteIdRefreshed===this.noteId&&this.shownNoteId!==this.noteId&&(this.shownNoteId=this.noteId,this.renderNoteList(this.note))}async renderNoteList(t){const e=new Gt(this.$content,t,t.getChildNoteIds());await e.renderList()}async refresh(){this.shownNoteId=null,await super.refresh()}async refreshNoteListEvent({noteId:t}){this.isNote(t)&&await this.renderNoteList(this.note)}noteDetailRefreshedEvent({ntxId:t}){this.isNoteContext(t)&&(this.noteIdRefreshed=this.noteId,setTimeout((()=>this.checkRenderStatus()),100))}notesReloadedEvent({noteIds:t}){t.includes(this.noteId)&&this.refresh()}entitiesReloadedEvent({loadResults:t}){t.getAttributeRows().find((t=>t.noteId===this.noteId&&["viewType","expanded","pageSize"].includes(t.name)))&&(this.shownNoteId=null,this.checkRenderStatus())}}var Qt=__webpack_require__(8866);class Xt extends Qt.Z{constructor(t,e){super(),this.attribute=t,this.note=e}static async setAttribute(t,e,n,i=""){await o.Z.put(`notes/${t}/set-attribute`,{type:e,name:n,value:i}),await D.Z.waitForMaxKnownEntityChangeId()}async setAttribute(t,e,n=""){await this.constructor.setAttribute(this.note.noteId,t,e,n)}render(){try{const t=this.doRender();return t.find(".search-option-del").on("click",(()=>this.deleteOption())).attr("title","去掉这个搜索选项"),e.default.initHelpDropdown(t),t}catch(t){return logError(`渲染搜索选项 ${JSON.stringify(this.attribute.dto)} 失败, 错误: ${t.message} ${t.stack}`),null}}doRender(){}async deleteOption(){await this.deleteAttribute(this.constructor.attributeType,this.constructor.optionName),await D.Z.waitForMaxKnownEntityChangeId(),await this.triggerCommand("refreshSearchDefinition")}async deleteAttribute(t,e){for(const n of this.note.getOwnedAttributes())n.type===t&&n.name===e&&await o.Z.remove(`notes/${this.note.noteId}/attributes/${n.attributeId}`)}}class te{constructor(t,e){this.attribute=t,this.actionDef=e}render(){try{const t=this.doRender();return t.find(".action-conf-del").on("click",(()=>this.deleteAction())).attr("title","去掉这个搜索动作"),e.default.initHelpDropdown(t),t}catch(t){return logError(`Failed rendering search action: ${JSON.stringify(this.attribute.dto)} with error: ${t.message} ${t.stack}`),null}}doRender(){}async saveAction(t){const e=Object.assign({name:this.constructor.actionName},t);await o.Z.put(`notes/${this.attribute.noteId}/attribute`,{attributeId:this.attribute.attributeId,type:"label",name:"action",value:JSON.stringify(e)}),await D.Z.waitForMaxKnownEntityChangeId()}async deleteAction(){await o.Z.remove(`notes/${this.attribute.noteId}/attributes/${this.attribute.attributeId}`),await D.Z.waitForMaxKnownEntityChangeId()}}class ee extends te{static get actionName(){return"moveNote"}static get actionTitle(){return"移动笔记"}doRender(){const t=$('\n<tr>\n    <td colspan="2">\n        <div style="display: flex; align-items: center">\n            <div style="margin-right: 10px;" class="text-nowrap">移动笔记</div> \n                            \n            <div style="margin-right: 10px;" class="text-nowrap">到</div>\n            \n            <div class="input-group">\n                <input type="text" class="form-control target-parent-note" placeholder="目标父笔记"/>\n            </div>\n        </div>\n    </td>\n    <td class="button-column">\n        <div class="dropdown help-dropdown">\n            <span class="bx bx-help-circle icon-action" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></span>\n            <div class="dropdown-menu dropdown-menu-right p-4">\n                <p>对于所有匹配的笔记:</p>\n                \n                <ul>\n                    <li>如果笔记只有一个父级, 则将笔记移动到新父级(旧笔记删除, 新笔记被创建到新的父级笔记下)</li>\n                    <li>如果笔记有多个克隆, 则将笔记克隆到新父级(因为不清楚应该删除哪个)</li>\n                    <li>如果无法将笔记移动到目标笔记, 什么也不做(防止形成循环树)</li>\n                </ul>\n            </div> \n        </div>\n    \n        <span class="bx bx-x icon-action action-conf-del"></span>\n    </td>\n</tr>'),e=t.find(".target-parent-note");h.initNoteAutocomplete(e),e.setNote(this.actionDef.targetParentNoteId),e.on("autocomplete:closed",(()=>n.scheduleUpdate()));const n=new K.Z((async()=>{await this.saveAction({targetParentNoteId:e.getSelectedNoteId()})}),1e3);return e.on("input",(()=>n.scheduleUpdate())),t}}class ne extends te{static get actionName(){return"deleteNote"}static get actionTitle(){return"删除笔记"}doRender(){return $('\n<tr>\n    <td colspan="2">\n        <span class="bx bx-trash"></span>\n    \n        删除匹配的笔记\n    </td>\n    <td class="button-column">\n        <div class="dropdown help-dropdown">\n            <span class="bx bx-help-circle icon-action" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></span>\n            <div class="dropdown-menu dropdown-menu-right p-4">\n                <p>这会删除匹配的笔记</p>\n                 \n                <p>删除后,可以取消删除<span class="bx bx-history"></span>最近的笔记对话框.</p>\n                \n                <p>要永久删除笔记,您可以在删除后转到选项 -> 其他,然后单击"立即删除已删除的笔记"按钮.</p>\n            </div>\n        </div>\n        \n        <span class="bx bx-x icon-action action-conf-del"></span>\n    </td>\n</tr>')}}class ie extends te{static get actionName(){return"deleteRevisions"}static get actionTitle(){return"删除笔记历史版本"}doRender(){return $('\n<tr>\n    <td colspan="2">\n        <span class="bx bx-trash"></span>\n    \n        删除笔记历史版本\n    </td>\n    <td class="button-column">\n        <div class="dropdown help-dropdown">\n            <span class="bx bx-help-circle icon-action" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></span>\n            <div class="dropdown-menu dropdown-menu-right p-4">\n                匹配的笔记的所有历史版本都会被删除, 笔记本身会被保留.\n            </div>\n        </div>\n    \n        <span class="bx bx-x icon-action action-conf-del"></span>\n    </td>\n</tr>')}}class oe extends te{static get actionName(){return"deleteLabel"}static get actionTitle(){return"删除标签"}doRender(){const t=$('\n<tr>\n    <td>\n        删除标签:\n    </td>\n    <td>\n        <input type="text" \n           class="form-control label-name"\n           pattern="[\\p{L}\\p{N}_:]+"\n           title="允许使用字母数字字符,下划线和冒号."\n           placeholder="标签名称"/>\n    </td>\n    <td class="button-column">\n        <span class="bx bx-x icon-action action-conf-del"></span>\n    </td>\n</tr>'),e=t.find(".label-name");e.val(this.actionDef.labelName||"");const n=new K.Z((async()=>{await this.saveAction({labelName:e.val()})}),1e3);return e.on("input",(()=>n.scheduleUpdate())),t}}class se extends te{static get actionName(){return"deleteRelation"}static get actionTitle(){return"删除关系"}doRender(){const t=$('\n<tr>\n    <td>\n        删除关系:\n    </td>\n    <td>\n        <div style="display: flex; align-items: center">\n            <input type="text" \n                class="form-control relation-name"                    \n                pattern="[\\p{L}\\p{N}_:]+"\n                placeholder="关系名称"\n                title="允许使用字母数字字符,下划线和冒号."/>\n        </div>\n    </td>\n    <td class="button-column">\n        <span class="bx bx-x icon-action action-conf-del"></span>\n    </td>\n</tr>'),e=t.find(".relation-name");e.val(this.actionDef.relationName||"");const n=new K.Z((async()=>{await this.saveAction({relationName:e.val()})}),1e3);return e.on("input",(()=>n.scheduleUpdate())),t}}class ae extends te{static get actionName(){return"renameLabel"}static get actionTitle(){return"重命名标签"}doRender(){const t=$('\n<tr>\n    <td colspan="2">\n        <div style="display: flex; align-items: center">\n            <div style="margin-right: 10px; flex-shrink: 0;">重命名标签由:</div> \n            \n            <input type="text" \n                class="form-control old-label-name" \n                placeholder="旧名称" \n                pattern="[\\p{L}\\p{N}_:]+"\n                title="允许使用字母数字字符,下划线和冒号."/>\n            \n            <div style="margin-right: 10px; margin-left: 10px;">为:</div> \n            \n            <input type="text" \n                class="form-control new-label-name" \n                placeholder="新名称"\n                pattern="[\\p{L}\\p{N}_:]+"\n                title="允许使用字母数字字符,下划线和冒号."/>\n        </div>\n    </td>\n    <td class="button-column">\n        <span class="bx bx-x icon-action action-conf-del"></span>\n    </td>\n</tr>'),e=t.find(".old-label-name");e.val(this.actionDef.oldLabelName||"");const n=t.find(".new-label-name");n.val(this.actionDef.newLabelName||"");const i=new K.Z((async()=>{await this.saveAction({oldLabelName:e.val(),newLabelName:n.val()})}),1e3);return e.on("input",(()=>i.scheduleUpdate())),n.on("input",(()=>i.scheduleUpdate())),t}}class re extends te{static get actionName(){return"renameRelation"}static get actionTitle(){return"重命名关系"}doRender(){const t=$('\n<tr>\n    <td colspan="2">\n        <div style="display: flex; align-items: center">\n            <div style="margin-right: 10px; flex-shrink: 0;">重命名关系由:</div> \n            \n            <input type="text" \n                class="form-control old-relation-name" \n                placeholder="旧名称" \n                pattern="[\\p{L}\\p{N}_:]+"\n                title="允许使用字母数字字符,下划线和冒号."/>\n            \n            <div style="margin-right: 10px; margin-left: 10px;">为:</div> \n            \n            <input type="text" \n                class="form-control new-relation-name" \n                placeholder="新名称"\n                pattern="[\\p{L}\\p{N}_:]+"\n                title="允许使用字母数字字符,下划线和冒号."/>\n        </div>\n    </td>\n    <td class="button-column">\n        <span class="bx bx-x icon-action action-conf-del"></span>\n    </td>\n</tr>'),e=t.find(".old-relation-name");e.val(this.actionDef.oldRelationName||"");const n=t.find(".new-relation-name");n.val(this.actionDef.newRelationName||"");const i=new K.Z((async()=>{await this.saveAction({oldRelationName:e.val(),newRelationName:n.val()})}),1e3);return e.on("input",(()=>i.scheduleUpdate())),n.on("input",(()=>i.scheduleUpdate())),t}}class de extends te{static get actionName(){return"updateLabelValue"}static get actionTitle(){return"更新标签值"}doRender(){const t=$('\n<tr>\n    <td colspan="2">\n        <div style="display: flex; align-items: center">\n            <div style="margin-right: 10px;" class="text-nowrap">更新标签值</div> \n            \n            <input type="text" \n                class="form-control label-name" \n                placeholder="标签名称"\n                pattern="[\\p{L}\\p{N}_:]+"\n                title="允许使用字母数字字符,下划线和冒号."/>\n            \n            <div style="margin-right: 10px; margin-left: 10px;" class="text-nowrap">为</div>\n            \n            <input type="text" class="form-control label-value" placeholder="新值"/>\n        </div>\n    </td>\n    <td class="button-column">\n        <div class="dropdown help-dropdown">\n            <span class="bx bx-help-circle icon-action" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></span>\n            <div class="dropdown-menu dropdown-menu-right p-4">\n                <p>对所有匹配的笔记更改现有标签的值.</p>\n                \n                <p>您也可以不带参数地调用这个方法, 这种情况下, 分配给笔记的标签就没有值.</p>\n            </div> \n        </div>\n    \n        <span class="bx bx-x icon-action action-conf-del"></span>\n    </td>\n</tr>'),e=t.find(".label-name");e.val(this.actionDef.labelName||"");const n=t.find(".label-value");n.val(this.actionDef.labelValue||"");const i=new K.Z((async()=>{await this.saveAction({labelName:e.val(),labelValue:n.val()})}),1e3);return e.on("input",(()=>i.scheduleUpdate())),n.on("input",(()=>i.scheduleUpdate())),t}}class le extends te{static get actionName(){return"updateRelationTarget"}static get actionTitle(){return"更新关系目标"}doRender(){const t=$('\n<tr>\n    <td colspan="2">\n        <div style="display: flex; align-items: center">\n            <div style="margin-right: 10px;" class="text-nowrap">更新关系</div> \n            \n            <input type="text" \n                class="form-control relation-name" \n                placeholder="关系名称"\n                pattern="[\\p{L}\\p{N}_:]+"\n                style="flex-shrink: 3"\n                title="允许使用字母数字字符,下划线和冒号."/>\n                \n            <div style="margin-right: 10px; margin-left: 10px;" class="text-nowrap">到</div>\n            \n            <div class="input-group" style="flex-shrink: 2">\n                <input type="text" class="form-control target-note" placeholder="目标笔记"/>\n            </div>\n        </div>\n    </td>\n    <td class="button-column">\n        <div class="dropdown help-dropdown">\n            <span class="bx bx-help-circle icon-action" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></span>\n            <div class="dropdown-menu dropdown-menu-right p-4">\n                <p>对于所有匹配的笔记:</p>\n                \n                <ul>\n                    <li>如果笔记还没有关系, 则创建给定的关系</li>\n                    <li>或修改现有关系的目标笔记</li>\n                </ul>\n            </div> \n        </div>\n    \n        <span class="bx bx-x icon-action action-conf-del"></span>\n    </td>\n</tr>'),e=t.find(".relation-name");e.val(this.actionDef.relationName||"");const n=t.find(".target-note");h.initNoteAutocomplete(n),n.setNote(this.actionDef.targetNoteId),n.on("autocomplete:closed",(()=>i.scheduleUpdate()));const i=new K.Z((async()=>{await this.saveAction({relationName:e.val(),targetNoteId:n.getSelectedNoteId()})}),1e3);return e.on("input",(()=>i.scheduleUpdate())),n.on("input",(()=>i.scheduleUpdate())),t}}class ce extends te{static get actionName(){return"executeScript"}static get actionTitle(){return"执行脚本"}doRender(){const t=$('\n<tr>\n    <td>\n        执行脚本:\n    </td>\n    <td>\n        <input type="text" \n           class="form-control script"\n           placeholder="note.title = note.title + \'- suffix\';"/>\n    </td>\n    <td class="button-column">\n        <div style="display: flex">\n            <div class="dropdown help-dropdown">\n              <span class="bx bx-help-circle icon-action" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></span>\n              <div class="dropdown-menu dropdown-menu-right p-4">\n                你可以在匹配的笔记上执行简单的脚本.\n                \n                比如在笔记标题后附加一串字符:\n                \n                <pre>note.title = note.title + \' - suffix\';</pre>\n                \n                一个更复杂的例子, 删除所有匹配到笔记的属性:\n                \n                <pre>for (const attr of note.getOwnedAttributes) { attr.markAsDeleted(); }</pre>\n              </div>\n            </div>\n        \n            <span class="bx bx-x icon-action action-conf-del"></span>\n        </div>\n    </td>\n</tr>'),e=t.find(".script");e.val(this.actionDef.script||"");const n=new K.Z((async()=>{await this.saveAction({script:e.val()})}),1e3);return e.on("input",(()=>n.scheduleUpdate())),t}}class he extends te{static get actionName(){return"addLabel"}static get actionTitle(){return"添加标签"}doRender(){const t=$('\n<tr>\n    <td colspan="2">\n        <div style="display: flex; align-items: center">\n            <div style="margin-right: 10px;" class="text-nowrap">添加标签</div> \n            \n            <input type="text" \n                class="form-control label-name" \n                placeholder="标签名称"\n                pattern="[\\p{L}\\p{N}_:]+"\n                title="允许使用字母数字字符,下划线和冒号."/>\n            \n            <div style="margin-right: 10px; margin-left: 10px;" class="text-nowrap">为</div>\n            \n            <input type="text" class="form-control label-value" placeholder="新值"/>\n        </div>\n    </td>\n    <td class="button-column">\n        <div class="dropdown help-dropdown">\n            <span class="bx bx-help-circle icon-action" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></span>\n            <div class="dropdown-menu dropdown-menu-right p-4">\n                <p>对于所有匹配的笔记:</p>\n                \n                <ul>\n                    <li>如果笔记还没有, 则创建给定标签</li>\n                    <li>或修改现有标签的值</li>\n                </ul>\n                \n                <p>您也可以不带参数地调用这个方法, 这种情况下, 分配给笔记的标签就没有值.</p>\n            </div> \n        </div>\n    \n        <span class="bx bx-x icon-action action-conf-del"></span>\n    </td>\n</tr>'),e=t.find(".label-name");e.val(this.actionDef.labelName||"");const n=t.find(".label-value");n.val(this.actionDef.labelValue||"");const i=new K.Z((async()=>{await this.saveAction({labelName:e.val(),labelValue:n.val()})}),1e3);return e.on("input",(()=>i.scheduleUpdate())),n.on("input",(()=>i.scheduleUpdate())),t}}class pe extends te{static get actionName(){return"addRelation"}static get actionTitle(){return"添加关系"}doRender(){const t=$('\n<tr>\n    <td colspan="2">\n        <div style="display: flex; align-items: center">\n            <div style="margin-right: 10px;" class="text-nowrap">添加关系</div> \n\n            <input type="text" \n                class="form-control relation-name" \n                placeholder="关系名称"\n                pattern="[\\p{L}\\p{N}_:]+"\n                style="flex-shrink: 3"\n                title="允许使用字母数字字符,下划线和冒号."/>\n                \n            <div style="margin-right: 10px; margin-left: 10px;" class="text-nowrap">到</div>\n            \n            <div class="input-group" style="flex-shrink: 2">\n                <input type="text" class="form-control target-note" placeholder="目标笔记"/>\n            </div>\n        </div>\n    </td>\n    <td class="button-column">\n        <div class="dropdown help-dropdown">\n            <span class="bx bx-help-circle icon-action" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></span>\n            <div class="dropdown-menu dropdown-menu-right p-4">\n                <p>在所有匹配的笔记上创建给定的关系.</p>\n            </div> \n        </div>\n    \n        <span class="bx bx-x icon-action action-conf-del"></span>\n    </td>\n</tr>'),e=t.find(".relation-name");e.val(this.actionDef.relationName||"");const n=t.find(".target-note");h.initNoteAutocomplete(n),n.setNote(this.actionDef.targetNoteId),n.on("autocomplete:closed",(()=>i.scheduleUpdate()));const i=new K.Z((async()=>{await this.saveAction({relationName:e.val(),targetNoteId:n.getSelectedNoteId()})}),1e3);return e.on("input",(()=>i.scheduleUpdate())),n.on("input",(()=>i.scheduleUpdate())),t}}class ue extends te{static get actionName(){return"renameNote"}static get actionTitle(){return"重命名笔记"}doRender(){const t=$('\n<tr>\n    <td colspan="2">\n        <div style="display: flex; align-items: center">\n            <div style="margin-right: 10px; flex-shrink: 0;">将笔记标题重命名为:</div> \n            \n            <input type="text" \n                class="form-control new-title" \n                placeholder="新笔记标题" \n                title="单击右侧的帮助图标以查看所有选项"/>\n        </div>\n    </td>\n    <td class="button-column">\n        <div class="dropdown help-dropdown">\n            <span class="bx bx-help-circle icon-action" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></span>\n            <div class="dropdown-menu dropdown-menu-right p-4">\n                <p>给定的值会被作为Javascript解析, 因此可以注入丰富的动态内容 <code>note</code>变量 (被重命名的笔记). 例如:</p>\n                \n                <ul>\n                    <li><code>笔记</code>- 所有匹配的笔记都重命名为"Note"</li>\n                    <li><code>NEW: ${note.title}</code>- 匹配的笔记标题前缀"NEW:"</li>\n                    <li><code>${note.dateCreatedObj.format(\'MM-DD:\')}: ${note.title}</code>- 匹配的笔记添加笔记的创建月份日期为前缀</li>\n                </ul>\n                \n                请参阅 API 文档了解 <a href="https://zadam.github.io/trilium/backend_api/Note.html">note</a> 及其 <a href="https://day.js.org/docs/en/display/format">dateCreatedObj / utcDateCreatedObj 属性</a>.\n            </div>\n        </div>\n    \n        <span class="bx bx-x icon-action action-conf-del"></span>\n    </td>\n</tr>'),e=t.find(".new-title");e.val(this.actionDef.newTitle||"");const n=new K.Z((async()=>{await this.saveAction({newTitle:e.val()})}),1e3);return e.on("input",(()=>n.scheduleUpdate())),t}}const ge=[ue,ee,ne,ie,oe,se,ae,re,he,pe,de,le,ce],me=async function(t,e){await o.Z.post(`notes/${t}/attributes`,{type:"label",name:"action",value:JSON.stringify({name:e})}),await D.Z.waitForMaxKnownEntityChangeId()},be=function(t){return t.getLabels("action").map((t=>{let e;try{e=JSON.parse(t.value)}catch(e){return logError(`Parsing of attribute: '${t.value}' failed with error: ${e.message}`),null}const n=ge.find((t=>t.actionName===e.name));return n?new n(t,e):(logError(`No action class for '${e.name}' found.`),null)})).filter((t=>!!t))},fe=[{title:"标签",actions:[he,de,ae,oe]},{title:"关系",actions:[pe,le,re,se]},{title:"笔记",actions:[ue,ee,ne,ie]},{title:"其他",actions:[ce]}],we=[class extends Xt{static get optionName(){return"searchString"}static get attributeType(){return"label"}static async create(t){await Xt.setAttribute(t,"label","searchString")}doRender(){const e=$('\n<tr>\n    <td class="title-column">搜索字符串:</td>\n    <td>\n        <textarea class="form-control search-string" placeholder="全文搜索关键字, #标签=值 ..."></textarea>\n    </td>\n    <td class="button-column">\n        <div class="dropdown help-dropdown">\n          <span class="bx bx-help-circle icon-action" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></span>\n          <div class="dropdown-menu dropdown-menu-right p-4">\n            <strong>搜索语法</strong> - 参见 <button class="btn btn-sm" type="button" data-help-page="Search">搜索语法完整帮助文档</button>\n            <p>\n            <ul>\n                <li>输入任意文字进行全文搜索</li>\n                <li><code>#abc</code> - 会返回含有abc标签的笔记</li>\n                <li><code>#year = 2019</code> - <code>year</code>并且值是<code>2019</code>的笔记</li>\n                <li><code>#rock #pop</code> - 会匹配同时含有 <code>rock</code> 和  <code>pop</code> 标签的笔记</li>\n                <li><code>#rock or #pop</code> - 含有其中任意一个标签的笔记</li>\n                <li><code>#year &lt;= 2000</code> - 可以用比较符号(比如 &gt;, &gt;=, &lt;).</li>\n                <li><code>note.dateCreated >= MONTH-1</code> - 上个月创建的笔记</li>\n            </ul>\n            </p>\n          </div>\n        </div>\n        \n        <span class="bx bx-x icon-action search-option-del"></span>\n    </td>\n</tr>');return this.$searchString=e.find(".search-string"),this.$searchString.on("input",(()=>this.spacedUpdate.scheduleUpdate())),p.Z.bindElShortcut(this.$searchString,"return",(async()=>{await this.spacedUpdate.updateNowIfNecessary(),this.triggerCommand("refreshResults")})),this.spacedUpdate=new K.Z((async()=>{const e=this.$searchString.val();t.default.lastSearchString=e,await this.setAttribute("label","searchString",e),(this.note.title.startsWith("Search:")||this.note.title.startsWith("搜索:"))&&await o.Z.put(`notes/${this.note.noteId}/title`,{title:`Search: ${e.length<30?e:`${e.substr(0,30)}…`}`})}),1e3),this.$searchString.val(this.note.getLabelValue("searchString")),e}showSearchErrorEvent({error:t}){this.$searchString.tooltip({trigger:"manual",title:`Search error: ${t}`,placement:"bottom"}),this.$searchString.tooltip("show"),setTimeout((()=>this.$searchString.tooltip("dispose")),4e3)}focusOnSearchDefinitionEvent(){this.$searchString.val(this.$searchString.val().trim()||t.default.lastSearchString).focus().select(),this.spacedUpdate.scheduleUpdate()}},class extends Xt{static get optionName(){return"searchScript"}static get attributeType(){return"relation"}static async create(t){await Xt.setAttribute(t,"relation","searchScript","root")}doRender(){const t=$('\n<tr>\n    <td class="title-column">\n        搜索脚本 \n    </td>\n    <td>\n        <div class="input-group">\n            <input class="search-script form-control" placeholder="根据名称搜索笔记">\n        </div>\n    </td>\n        <td class="button-column">\n        <div class="dropdown help-dropdown">\n          <span class="bx bx-help-circle icon-action" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></span>\n          <div class="dropdown-menu dropdown-menu-right p-4">\n            <p>搜索脚本允许通过运行脚本来定义搜索结果.</p>\n            \n            <p>搜索脚本的类型必须为"代码",子类型必须为" JavaScript后端".</p>\n            \n            <p>请参阅以下示例:</p>\n            \n            <pre>\n// 1. prefiltering using standard search\nconst candidateNotes = api.searchForNotes("#journal"); \n\n// 2. applying custom search criteria\nconst matchedNotes = candidateNotes\n    .filter(note => note.title.match(/[0-9]{1,2}. ?[0-9]{1,2}. ?[0-9]{4}/));\n\nreturn matchedNotes;</pre>\n\n            <p>请注意,搜索脚本和搜索字符串不能一起使用.</p>\n          </div>\n        </div>\n        \n        <span class="bx bx-x icon-action search-option-del"></span>\n    </td>\n</tr>'),e=t.find(".search-script");h.initNoteAutocomplete(e,{allowCreatingNotes:!0}),e.on("autocomplete:closed",(async()=>{const t=e.getSelectedNoteId();t&&await this.setAttribute("relation","searchScript",t)}));const n=this.note.getRelationValue("searchScript");return"root"!==n&&e.setNote(n),t}},class extends Xt{static get optionName(){return"ancestor"}static get attributeType(){return"relation"}static async create(t){await Xt.setAttribute(t,"relation","ancestor","root")}doRender(){const t=$('\n<tr>\n    <td colspan="2">\n        <div style="display: flex; align-items: center;">\n            <div style="margin-right: 10px">祖先:</div> \n            <div class="input-group" style="flex-shrink: 2">\n                <input class="ancestor form-control" placeholder="根据名称搜索笔记">\n            </div>\n            \n            <div style="margin-left: 10px; margin-right: 10px">深度:</div>\n            \n            <select name="depth" class="form-control d-inline ancestor-depth" style="flex-shrink: 3">\n                <option value="">任意</option>\n                <option value="eq1">正好是1(直接子代)</option>\n                <option value="eq2">正好是2</option>\n                <option value="eq3">正好是3</option>\n                <option value="eq4">正好是4</option>\n                <option value="eq5">正好是5</option>\n                <option value="eq6">正好是6</option>\n                <option value="eq7">正好是7</option>\n                <option value="eq8">正好是8</option>\n                <option value="eq9">正好是9</option>\n                <option value="gt0">大于0</option>\n                <option value="gt1">大于1</option>\n                <option value="gt2">大于2</option>\n                <option value="gt3">大于3</option>\n                <option value="gt4">大于4</option>\n                <option value="gt5">大于5</option>\n                <option value="gt6">大于6</option>\n                <option value="gt7">大于7</option>\n                <option value="gt8">大于8</option>\n                <option value="gt9">大于9</option>\n                <option value="lt2">小于2</option>\n                <option value="lt3">小于3</option>\n                <option value="lt4">小于4</option>\n                <option value="lt5">小于5</option>\n                <option value="lt6">小于6</option>\n                <option value="lt7">小于7</option>\n                <option value="lt8">小于8</option>\n                <option value="lt9">小于9</option>\n            </select>\n        </div>\n    </td>\n    <td class="button-column">\n        <span class="bx bx-x icon-action search-option-del"></span>\n    </td>\n</tr>'),e=t.find(".ancestor"),n=t.find(".ancestor-depth");h.initNoteAutocomplete(e),e.on("autocomplete:closed",(async()=>{const t=e.getSelectedNoteId();t&&await this.setAttribute("relation","ancestor",t)})),n.on("change",(async()=>{const t=n.val();t?await this.setAttribute("label","ancestorDepth",t):await this.deleteAttribute("label","ancestorDepth")}));const i=this.note.getRelationValue("ancestor");"root"!==i&&e.setNote(i);const o=this.note.getLabelValue("ancestorDepth");return o&&n.val(o),t}async deleteOption(){await this.deleteAttribute("label","ancestorDepth"),await super.deleteOption()}},class extends Xt{static get optionName(){return"fastSearch"}static get attributeType(){return"label"}static async create(t){await Xt.setAttribute(t,"label","fastSearch")}doRender(){return $('\n<tr data-search-option-conf="fastSearch">\n    <td colSpan="2">\n        <span class="bx bx-run"></span>\n\n        快速搜索\n    </td>\n    <td class="button-column">\n        <div class="dropdown help-dropdown">\n            <span class="bx bx-help-circle icon-action" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></span>\n            <div class="dropdown-menu dropdown-menu-right p-4">\n                "快速搜索"选项禁用了笔记内容的全文搜索, 这可能会加快大型数据库中的搜索速度.\n            </div> \n        </div>\n    \n        <span class="bx bx-x icon-action search-option-del"></span>\n    </td>\n</tr>')}},class extends Xt{static get optionName(){return"includeArchivedNotes"}static get attributeType(){return"label"}static async create(t){await Xt.setAttribute(t,"label","includeArchivedNotes")}doRender(){return $('\n<tr data-search-option-conf="includeArchivedNotes">\n    <td colspan="2">\n        <span class="bx bx-archive"></span>\n    \n        包含已归档笔记\n    </td>\n    <td class="button-column">\n        <span class="bx bx-x icon-action search-option-del"></span>\n    </td>\n</tr>')}},class extends Xt{static get optionName(){return"orderBy"}static get attributeType(){return"label"}static async create(t){await Xt.setAttribute(t,"label","orderBy","relevancy"),await Xt.setAttribute(t,"label","orderDirection","asc")}doRender(){const t=$('\n<tr data-search-option-conf="orderBy">\n    <td class="title-column">\n        <span class="bx bx-arrow-from-top"></span>\n    \n        排序\n    </td>\n    <td>\n        <select name="orderBy" class="form-control w-auto d-inline">\n            <option value="relevancy">相关性 (默认)</option>\n            <option value="title">标题</option>\n            <option value="dateCreated">创建日期</option>\n            <option value="dateModified">最后修改日期</option>\n            <option value="contentSize">笔记内容大小</option>\n            <option value="contentAndAttachmentsSize">包括附件的笔记内容大小</option>\n            <option value="contentAndAttachmentsAndRevisionsSize">包括附件和笔记历史的笔记内容大小</option>\n            <option value="revisionCount">历史数量</option>\n            <option value="childrenCount">子笔记数</option>\n            <option value="parentCount">克隆数</option>\n            <option value="ownedLabelCount">标签数量</option>\n            <option value="ownedRelationCount">关系数</option>\n            <option value="targetRelationCount">指向笔记的关系数</option>\n            <option value="random">随机顺序</option>\n        </select>\n        \n        <select name="orderDirection" class="form-control w-auto d-inline">\n            <option value="asc">升序(默认)</option>\n            <option value="desc">降序</option>\n        </select>\n    </td>\n    <td class="button-column">\n        <span class="bx bx-x icon-action search-option-del"></span>\n    </td>\n</tr>'),e=t.find("select[name=orderBy]");e.on("change",(async()=>{const t=e.val();await this.setAttribute("label","orderBy",t)})),e.val(this.note.getLabelValue("orderBy"));const n=t.find("select[name=orderDirection]");return n.on("change",(async()=>{const t=n.val();await this.setAttribute("label","orderDirection",t)})),n.val(this.note.getLabelValue("orderDirection")||"asc"),t}async deleteOption(){await this.deleteAttribute("label","orderDirection"),await super.deleteOption()}},class extends Xt{static get optionName(){return"limit"}static get attributeType(){return"label"}static async create(t){await Xt.setAttribute(t,"label","limit","10")}doRender(){const t=$('\n<tr data-search-option-conf="limit">\n    <td class="title-column">\n        <span class="bx bx-stop"></span>\n    \n        限制\n    </td>\n    <td>\n        <input name="limit" class="form-control" type="number" min="1" step="1" />\n    </td>\n    <td class="button-column">\n        <div class="dropdown help-dropdown">\n            <span class="bx bx-help-circle icon-action" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></span>\n            <div class="dropdown-menu dropdown-menu-right p-4">\n                只取前N条结果.\n            </div> \n        </div>\n    \n        <span class="bx bx-x icon-action search-option-del"></span>\n    </td>\n</tr>');return this.$limit=t.find("input[name=limit]"),this.$limit.on("change",(()=>this.update())),this.$limit.on("input",(()=>this.update())),this.$limit.val(this.note.getLabelValue("limit")),t}async update(){const t=this.$limit.val();await this.setAttribute("label","limit",t)}},class extends Xt{static get optionName(){return"debug"}static get attributeType(){return"label"}static async create(t){await Xt.setAttribute(t,"label","debug")}doRender(){return $('\n<tr data-search-option-conf="debug">\n    <td colSpan="2">\n        <span class="bx bx-bug"></span>\n\n        调试\n    </td>\n    <td class="button-column">\n        <div class="dropdown help-dropdown">\n            <span class="bx bx-help-circle icon-action" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></span>\n            <div class="dropdown-menu dropdown-menu-right p-4">\n                <p>调试会将更多调试信息打印到控制台中, 以帮助调试复杂的查询.</p>\n                \n                <p>要访问调试信息, 请执行查询, 然后单击左上角的"显示后端日志".</p> \n            </div>\n        </div>\n    \n        <span class="bx bx-x icon-action search-option-del"></span>\n    </td>\n</tr>')}}];class ve extends B.Z{get name(){return"searchDefinition"}isEnabled(){return this.note&&"search"===this.note.type}getTitle(){return{show:this.isEnabled(),activate:!0,title:"搜索参数",icon:"bx bx-search"}}doRender(){this.$widget=$('\n<div class="search-definition-widget">\n    <style> \n    .search-setting-table {\n        margin-top: 0;\n        margin-bottom: 7px;\n        width: 100%;\n        border-collapse: separate;\n        border-spacing: 10px;\n    }\n    \n    .search-setting-table div {\n        white-space: nowrap;\n    }\n    \n    .search-setting-table .button-column {\n        /* minimal width so that table remains static sized and most space remains for middle column with settings */\n        width: 50px;\n        white-space: nowrap;\n        text-align: right;\n    }\n    \n    .search-setting-table .title-column {\n        /* minimal width so that table remains static sized and most space remains for middle column with settings */\n        width: 50px;\n        white-space: nowrap;    \n    }\n    \n    .search-setting-table .button-column .dropdown-menu {\n        white-space: normal;\n    }\n    \n    .attribute-list hr {\n        height: 1px;\n        border-color: var(--main-border-color);\n        position: relative;\n        top: 4px;\n        margin-top: 5px;\n        margin-bottom: 0;\n    }\n    \n    .search-definition-widget input:invalid {\n        border: 3px solid red;\n    }\n\n    .add-search-option button {\n        margin-top: 5px; /* to give some spacing when buttons overflow on the next line */\n    }\n    \n    .dropdown-header {\n        background-color: var(--accented-background-color);\n    }\n    </style>\n\n    <div class="search-settings">\n        <table class="search-setting-table">\n            <tr>\n                <td class="title-column">添加搜索选项</td>\n                <td colspan="2" class="add-search-option">\n                    <button type="button" class="btn btn-sm" data-search-option-add="searchString">\n                        <span class="bx bx-text"></span> \n                        搜索字符串\n                    </button>\n                    \n                    <button type="button" class="btn btn-sm" data-search-option-add="searchScript">\n                        <span class="bx bx-code"></span> \n                        搜索脚本\n                    </button>\n                    \n                    <button type="button" class="btn btn-sm" data-search-option-add="ancestor">\n                        <span class="bx bx-filter-alt"></span> \n                        父级节点\n                    </button>\n                    \n                    <button type="button" class="btn btn-sm" data-search-option-add="fastSearch"\n                        title=""快速搜索"选项禁用了笔记内容的全文搜索, 这可能会加快大型数据库中的搜索速度.">\n                        <span class="bx bx-run"></span>\n                        快速搜索\n                    </button>\n                    \n                    <button type="button" class="btn btn-sm" data-search-option-add="includeArchivedNotes"\n                        title="默认情况下, 归档的笔记不包括在搜索结果中, 使用此选项将包括这些笔记.">\n                        <span class="bx bx-archive"></span>\n                        包括归档笔记\n                    </button>\n                    \n                    <button type="button" class="btn btn-sm" data-search-option-add="orderBy">\n                        <span class="bx bx-arrow-from-top"></span>\n                        排序\n                    </button>\n                    \n                    <button type="button" class="btn btn-sm" data-search-option-add="limit" title="限制结果数">\n                        <span class="bx bx-stop"></span>\n                        限制条数\n                    </button>\n                    \n                    <button type="button" class="btn btn-sm" data-search-option-add="debug" title="调试会将更多调试信息打印到控制台中, 以帮助调试复杂的查询">\n                        <span class="bx bx-bug"></span>\n                        调试\n                    </button>\n                    \n                    <div class="dropdown" style="display: inline-block;">\n                      <button class="btn btn-sm dropdown-toggle action-add-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n                        <span class="bx bxs-zap"></span>\n                        动作\n                      </button>\n                      <div class="dropdown-menu action-list"></div>\n                    </div>\n                </td>\n            </tr>\n            <tbody class="search-options"></tbody>\n            <tbody class="action-options"></tbody>\n            <tbody>\n                <tr>\n                    <td colspan="3">\n                        <div style="display: flex; justify-content: space-evenly">\n                            <button type="button" class="btn btn-sm search-button">\n                                <span class="bx bx-search"></span>\n                                搜索\n                                \n                                <kbd>回车</kbd>\n                            </button>\n        \n                            <button type="button" class="btn btn-sm search-and-execute-button">\n                                <span class="bx bxs-zap"></span>\n                                搜索并执行动作\n                            </button>\n                            \n                            <button type="button" class="btn btn-sm save-to-note-button">\n                                <span class="bx bx-save"></span>\n                                保存到笔记\n                            </button>\n                        </div>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>'),this.contentSized(),this.$component=this.$widget.find(".search-definition-widget"),this.$actionList=this.$widget.find(".action-list");for(const t of fe){this.$actionList.append($('<h6 class="dropdown-header">').append(t.title));for(const e of t.actions)this.$actionList.append($('<a class="dropdown-item" href="#">').attr("data-action-add",e.actionName).text(e.actionTitle))}this.$widget.on("click","[data-search-option-add]",(async t=>{const e=$(t.target).attr("data-search-option-add"),n=we.find((t=>t.optionName===e));n?await n.create(this.noteId):logError(`Unknown search option ${e}`),this.refresh()})),this.$widget.on("click","[data-action-add]",(async t=>{this.$widget.find(".action-add-toggle").dropdown("toggle");const e=$(t.target).attr("data-action-add");await me(this.noteId,e),this.refresh()})),this.$searchOptions=this.$widget.find(".search-options"),this.$actionOptions=this.$widget.find(".action-options"),this.$searchButton=this.$widget.find(".search-button"),this.$searchButton.on("click",(()=>this.triggerCommand("refreshResults"))),this.$searchAndExecuteButton=this.$widget.find(".search-and-execute-button"),this.$searchAndExecuteButton.on("click",(()=>this.searchAndExecute())),this.$saveToNoteButton=this.$widget.find(".save-to-note-button"),this.$saveToNoteButton.on("click",(async()=>{const{notePath:e}=await o.Z.post("special-notes/save-search-note",{searchNoteId:this.noteId});await D.Z.waitForMaxKnownEntityChangeId(),await t.default.tabManager.getActiveContext().setNote(e),O.default.showMessage(`Search note has been saved into ${await Z.Z.getNotePathTitle(e)}`)}))}async refreshResultsCommand(){try{const{error:t}=await a.default.loadSearchNote(this.noteId);t&&this.handleEvent("showSearchError",{error:t})}catch(t){O.default.showError(t.message)}this.triggerEvent("searchRefreshed",{ntxId:this.noteContext.ntxId})}async refreshSearchDefinitionCommand(){await this.refresh()}async refreshWithNote(t){this.$component.show(),this.$saveToNoteButton.toggle(t.isHiddenCompletely()),this.$searchOptions.empty();for(const t of we){const{attributeType:e,optionName:n}=t,i=this.note.getAttribute(e,n);if(this.$widget.find(`[data-search-option-add='${n}'`).toggle(!i),i){const e=new t(i,this.note).setParent(this);this.child(e),this.$searchOptions.append(e.render())}}const e=be(this.note);this.$actionOptions.empty().append(...e.map((t=>t.render()))),this.$searchAndExecuteButton.css("visibility",e.length>0?"visible":"_hidden")}getContent(){return""}async searchAndExecute(){await o.Z.post(`search-and-execute-note/${this.noteId}`),this.triggerCommand("refreshResults"),O.default.showMessage("动作已执行.",3e3)}entitiesReloadedEvent({loadResults:t}){t.getAttributeRows().find((t=>"label"===t.type&&"action"===t.name&&t.isDeleted))&&this.refresh()}}class xe extends B.Z{isEnabled(){return this.note&&"text/x-sqlite;schema=trilium"===this.note.mime&&super.isEnabled()}doRender(){this.$widget=$('\n<div class="sql-result-widget">\n    <style>\n    .sql-result-widget {\n        padding: 15px;\n    }\n    </style>\n   \n    <div class="sql-query-no-rows alert alert-info" style="display: none;">\n        No rows have been returned for this query.\n    </div>\n   \n    <div class="sql-console-result-container"></div>\n</div>'),this.$resultContainer=this.$widget.find(".sql-console-result-container"),this.$noRowsAlert=this.$widget.find(".sql-query-no-rows")}async sqlQueryResultsEvent({ntxId:t,results:e}){if(this.isNoteContext(t)){this.$noRowsAlert.toggle(1===e.length&&0===e[0].length),this.$resultContainer.toggle(e.length>1||e[0].length>0),this.$resultContainer.empty();for(const t of e){if("object"==typeof t&&!Array.isArray(t)){this.$resultContainer.empty().show().append($("<pre>").text(JSON.stringify(t,null,"\t")));continue}if(!t.length)continue;const e=$('<table class="table table-striped">');this.$resultContainer.append(e);const n=t[0],i=$("<tr>");for(const t in n)i.append($("<th>").text(t));e.append(i);for(const n of t){const t=$("<tr>");for(const e in n)t.append($("<td>").text(n[e]));e.append(t)}}}}}class ye extends B.Z{isEnabled(){return this.note&&"text/x-sqlite;schema=trilium"===this.note.mime&&super.isEnabled()}doRender(){this.$widget=$('\n<div class="sql-table-schemas-widget">\n    <style>\n    .sql-table-schemas-widget {\n        padding: 12px;\n        padding-right: 10%;\n    }\n\n    .sql-table-schemas button {\n        padding: 0.25rem 0.4rem;\n        font-size: 0.875rem;\n        line-height: 0.5;\n        border: 1px solid var(--button-border-color);\n        border-radius: var(--button-border-radius);\n        background: var(--button-background-color);\n        color: var(--button-text-color);\n    }\n\n    .sql-console-result-container {\n        width: 100%;\n        font-size: smaller;\n        margin-top: 10px;\n        flex-grow: 1;\n        overflow: auto;\n        min-height: 0;\n    }\n\n    .table-schema td {\n        padding: 5px;\n    }\n    </style>\n\n    Tables:\n    <span class="sql-table-schemas"></span>\n</div>'),this.contentSized(),this.$sqlConsoleTableSchemas=this.$widget.find(".sql-table-schemas")}async refreshWithNote(t){if(this.tableSchemasShown)return;this.tableSchemasShown=!0;const e=await o.Z.get("sql/schema");for(const t of e){const e=$('<button class="btn">').text(t.name),n=$('<table class="table-schema">');for(const e of t.columns)n.append($("<tr>").append($("<td>").text(e.name)).append($("<td>").text(e.type)));this.$sqlConsoleTableSchemas.append(e).append(" "),e.tooltip({html:!0,placement:"bottom",boundary:"window",title:n[0].outerHTML,sanitize:!1})}}}class $e extends B.Z{get name(){return"fileProperties"}get toggleCommand(){return"toggleRibbonTabFileProperties"}isEnabled(){return this.note&&"file"===this.note.type}getTitle(){return{show:this.isEnabled(),activate:!0,title:"文件",icon:"bx bx-file"}}doRender(){this.$widget=$('\n<div class="file-properties-widget">\n    <style> \n        .file-table {\n            width: 100%;\n            margin-top: 10px;\n        }\n        \n        .file-table th, .file-table td {\n            padding: 5px;\n            overflow-wrap: anywhere;\n        }\n        \n        .file-buttons {\n            padding: 10px; \n            display: flex; \n            justify-content: space-evenly;\n        }\n    </style>\n\n    <table class="file-table">\n        <tr>\n            <th>笔记ID:</th>\n            <td class="file-note-id"></td>\n            <th>原始文件名:</th>\n            <td class="file-filename"></td>\n        </tr>\n        <tr>\n            <th>文件类型:</th>\n            <td class="file-filetype"></td>\n            <th>文件大小:</th>\n            <td class="file-filesize"></td>\n        </tr>\n        \n        <tr>\n            <td colspan="4">\n                <div class="file-buttons">\n                    <button class="file-download btn btn-sm btn-primary" type="button">下载</button>\n                    &nbsp;\n                    <button class="file-open btn btn-sm btn-primary" type="button">打开</button>\n                    &nbsp;\n                    <button class="file-upload-new-revision btn btn-sm btn-primary">上传新的修改</button>\n                \n                    <input type="file" class="file-upload-new-revision-input" style="display: none">\n                </div>\n            </td>\n        </tr>\n    </table>\n</div>'),this.contentSized(),this.$fileNoteId=this.$widget.find(".file-note-id"),this.$fileName=this.$widget.find(".file-filename"),this.$fileType=this.$widget.find(".file-filetype"),this.$fileSize=this.$widget.find(".file-filesize"),this.$downloadButton=this.$widget.find(".file-download"),this.$openButton=this.$widget.find(".file-open"),this.$uploadNewRevisionButton=this.$widget.find(".file-upload-new-revision"),this.$uploadNewRevisionInput=this.$widget.find(".file-upload-new-revision-input"),this.$downloadButton.on("click",(()=>yt.Z.downloadFileNote(this.noteId))),this.$openButton.on("click",(()=>yt.Z.openNoteExternally(this.noteId,this.note.mime))),this.$uploadNewRevisionButton.on("click",(()=>{this.$uploadNewRevisionInput.trigger("click")})),this.$uploadNewRevisionInput.on("change",(async()=>{const t=this.$uploadNewRevisionInput[0].files[0];this.$uploadNewRevisionInput.val(""),(await o.Z.upload(`notes/${this.noteId}/file`,t)).uploaded?(O.default.showMessage("新文件修改已上传."),this.refresh()):O.default.showError("上传新笔记修改是该:")}))}async refreshWithNote(t){this.$widget.show(),this.$fileNoteId.text(t.noteId),this.$fileName.text(t.getLabelValue("originalFileName")||"?"),this.$fileType.text(t.mime);const n=await this.note.getBlob();this.$fileSize.text(e.default.formatSize(n.contentLength)),this.$openButton.toggle(!t.isProtected),this.$downloadButton.toggle(!t.isProtected||H.Z.isProtectedSessionAvailable()),this.$uploadNewRevisionButton.toggle(!t.isProtected||H.Z.isProtectedSessionAvailable())}}class Ie extends B.Z{get name(){return"imageProperties"}get toggleCommand(){return"toggleRibbonTabImageProperties"}isEnabled(){return this.note&&"image"===this.note.type}getTitle(){return{show:this.isEnabled(),activate:!0,title:"图像",icon:"bx bx-image"}}doRender(){this.$widget=$('\n<div class="image-properties">\n    <div style="display: flex; justify-content: space-evenly; margin: 10px;">\n        <span>\n            <strong>原始文件名:</strong>\n            <span class="image-filename"></span>\n        </span>\n\n        <span>\n            <strong>文件类型:</strong>\n            <span class="image-filetype"></span>\n        </span>\n\n        <span>\n            <strong>文件大小:</strong>\n            <span class="image-filesize"></span>\n        </span>\n    </div>\n    \n    <div class="no-print" style="display: flex; justify-content: space-evenly; margin: 10px;">\n        <button class="image-download btn btn-sm btn-primary" type="button">下载</button>\n\n        <button class="image-open btn btn-sm btn-primary" type="button">打开</button>\n\n        <button class="image-copy-reference-to-clipboard btn btn-sm btn-primary" type="button">复制引用到剪贴板</button>\n\n        <button class="image-upload-new-revision btn btn-sm btn-primary" type="button">上传新的修改</button>\n    </div>\n\n    <input type="file" class="image-upload-new-revision-input" style="display: none">\n</div>'),this.contentSized(),this.$copyReferenceToClipboardButton=this.$widget.find(".image-copy-reference-to-clipboard"),this.$copyReferenceToClipboardButton.on("click",(()=>this.triggerEvent("copyImageReferenceToClipboard",{ntxId:this.noteContext.ntxId}))),this.$uploadNewRevisionButton=this.$widget.find(".image-upload-new-revision"),this.$uploadNewRevisionInput=this.$widget.find(".image-upload-new-revision-input"),this.$fileName=this.$widget.find(".image-filename"),this.$fileType=this.$widget.find(".image-filetype"),this.$fileSize=this.$widget.find(".image-filesize"),this.$openButton=this.$widget.find(".image-open"),this.$openButton.on("click",(()=>yt.Z.openNoteExternally(this.noteId,this.note.mime))),this.$imageDownloadButton=this.$widget.find(".image-download"),this.$imageDownloadButton.on("click",(()=>yt.Z.downloadFileNote(this.noteId))),this.$uploadNewRevisionButton.on("click",(()=>{this.$uploadNewRevisionInput.trigger("click")})),this.$uploadNewRevisionInput.on("change",(async()=>{const t=this.$uploadNewRevisionInput[0].files[0];this.$uploadNewRevisionInput.val("");const n=await o.Z.upload(`images/${this.noteId}`,t);n.uploaded?(O.default.showMessage("新的图像修改已上传."),await e.default.clearBrowserCache(),this.refresh()):O.default.showError(`Upload of a new image revision failed: ${n.message}`)}))}async refreshWithNote(t){this.$widget.show();const n=await this.note.getBlob();this.$fileName.text(t.getLabelValue("originalFileName")||"?"),this.$fileSize.text(e.default.formatSize(n.contentLength)),this.$fileType.text(t.mime)}}class Ce extends B.Z{isEnabled(){return this.note&&!!this.note.getLabelValue("pageUrl")}getTitle(){return{show:this.isEnabled(),activate:!0,title:"信息",icon:"bx bx-info-square"}}doRender(){this.$widget=$('\n<div class="note-properties-widget">\n    <style>\n        .note-properties-widget {\n            padding: 12px;\n            color: var(--muted-text-color);\n        }\n    </style>\n\n    <div style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap">\n        笔记来源: <a class="page-url external"></a>\n    </div>\n</div>'),this.contentSized(),this.$pageUrl=this.$widget.find(".page-url")}async refreshWithNote(t){const e=t.getLabelValue("pageUrl");this.$pageUrl.attr("href",e).attr("title",e).text(e)}}class Ne extends B.Z{doRender(){this.$widget=$('\n<div class="note-icon-widget dropdown">\n    <style>\n    .note-icon-widget {\n        padding-top: 3px;\n        padding-left: 7px;\n        margin-right: 0;\n        width: 50px;\n        height: 50px;\n    }\n    \n    .note-icon-widget button.note-icon {\n        font-size: 180%;\n        background-color: transparent;\n        border: 1px solid transparent;\n        cursor: pointer;\n        padding: 6px;\n        color: var(--main-text-color);\n    }\n    \n    .note-icon-widget button.note-icon:hover {\n        border: 1px solid var(--main-border-color);\n    }\n    \n    .note-icon-widget .dropdown-menu {\n        border-radius: 10px;\n        border-width: 2px;\n        box-shadow: 10px 10px 93px -25px black;\n        padding: 10px 15px 10px 15px !important;\n    }\n    \n    .note-icon-widget .filter-row {\n        padding-top: 10px;\n        padding-bottom: 10px;\n        padding-right: 20px;\n        display: flex; \n        align-items: baseline;\n    }\n    \n    .note-icon-widget .filter-row span {\n        display: block;\n        padding-left: 15px;\n        padding-right: 15px;\n        font-weight: bold;\n    }\n    \n    .note-icon-widget .icon-list {\n        height: 500px;\n        overflow: auto;\n    }\n    \n    .note-icon-widget .icon-list span {\n        display: inline-block;\n        padding: 10px;\n        cursor: pointer;\n        border: 1px solid transparent;\n        font-size: 180%;\n    }\n    \n    .note-icon-widget .icon-list span:hover {\n        border: 1px solid var(--main-border-color);\n    }\n    </style>\n    \n    <button class="btn dropdown-toggle note-icon" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" title="修改笔记图标"></button>\n    <div class="dropdown-menu" aria-labelledby="note-path-list-button" style="width: 610px;">\n        <div class="filter-row">\n            <span>类别:</span> <select name="icon-category" class="form-control"></select>\n            \n            <span>搜索:</span> <input type="text" name="icon-search" class="form-control" />\n        </div>\n        \n        <div class="icon-list"></div>\n    </div>\n</div>'),this.$icon=this.$widget.find("button.note-icon"),this.$iconList=this.$widget.find(".icon-list"),this.$iconList.on("click","span",(async t=>{const e=$(t.target).attr("class");await T.setLabel(this.noteId,this.note.hasOwnedLabel("workspace")?"workspaceIconClass":"iconClass",e)})),this.$iconCategory=this.$widget.find("select[name='icon-category']"),this.$iconCategory.on("change",(()=>this.renderDropdown())),this.$iconCategory.on("click",(t=>t.stopPropagation())),this.$iconSearch=this.$widget.find("input[name='icon-search']"),this.$iconSearch.on("input",(()=>this.renderDropdown())),this.$notePathList=this.$widget.find(".note-path-list"),this.$widget.on("show.bs.dropdown",(async()=>{const{categories:t}=(await __webpack_require__.e(333).then(__webpack_require__.bind(__webpack_require__,2333))).default;this.$iconCategory.empty();for(const e of t)this.$iconCategory.append($("<option>").text(e.name).attr("value",e.id));this.$iconSearch.val(""),this.renderDropdown()}))}async refreshWithNote(t){this.$icon.removeClass().addClass(`${t.getIcon()} note-icon`)}async entitiesReloadedEvent({loadResults:t}){if(t.isNoteReloaded(this.noteId))this.refresh();else for(const e of t.getAttributeRows())if("label"===e.type&&["iconClass","workspaceIconClass"].includes(e.name)&&T.isAffecting(e,this.note)){this.refresh();break}}async renderDropdown(){const t=await this.getIconToCountMap(),{icons:e}=(await __webpack_require__.e(333).then(__webpack_require__.bind(__webpack_require__,2333))).default;this.$iconList.empty(),this.getIconLabels().length>0&&this.$iconList.append($('<div style="text-align: center">').append($('<button class="btn btn-sm">重置为默认图标</button>').on("click",(()=>this.getIconLabels().forEach((t=>T.removeAttributeById(this.noteId,t.attributeId)))))));const n=parseInt(this.$iconCategory.find("option:selected").val()),i=this.$iconSearch.val().trim().toLowerCase(),o=e.filter((t=>!(n&&t.category_id!==n||i&&!t.name.includes(i)&&!t.term?.find((t=>t.includes(i))))));o.sort(((e,n)=>{const i=t[e.className]||0;return(t[n.className]||0)-i}));for(const t of o)this.$iconList.append(this.renderIcon(t));this.$iconSearch.focus()}async getIconToCountMap(){return this.iconToCountCache||(this.iconToCountCache=o.Z.get("other/icon-usage"),setTimeout((()=>this.iconToCountCache=null),2e4)),(await this.iconToCountCache).iconClassToCountMap}renderIcon(t){return $("<span>").addClass("bx "+t.className).attr("title",t.name)}getIconLabels(){return this.note.getOwnedLabels().filter((t=>["workspaceIconClass","iconClass"].includes(t.name)))}}class ke extends B.Z{isEnabled(){return super.isEnabled()&&"search"===this.note.type}doRender(){this.$widget=$('\n<div class="search-result-widget">\n    <style>\n    .search-result-widget {\n        flex-grow: 100000;\n        flex-shrink: 100000;\n        min-height: 0;\n        overflow: auto;\n    }\n    \n    .search-result-widget .note-list {\n        padding: 10px;\n    }\n    \n    .search-no-results, .search-not-executed-yet {\n        margin: 20px;\n        padding: 20px;\n    }\n    </style>\n    \n    <div class="search-no-results alert alert-info">\n        没有找到符合搜索条件的笔记.\n    </div>\n    \n    <div class="search-not-executed-yet alert alert-info">\n        点击上方的"搜索"按钮开始搜索\n    </div>\n    \n    <div class="search-result-widget-content">\n    </div>\n</div>'),this.contentSized(),this.$content=this.$widget.find(".search-result-widget-content"),this.$noResults=this.$widget.find(".search-no-results"),this.$notExecutedYet=this.$widget.find(".search-not-executed-yet")}async refreshWithNote(t){this.$content.empty(),this.$noResults.toggle(0===t.getChildNoteIds().length&&!!t.searchResultsLoaded),this.$notExecutedYet.toggle(!t.searchResultsLoaded);const e=new Gt(this.$content,t,t.getChildNoteIds(),!0);await e.renderList()}searchRefreshedEvent({ntxId:t}){this.isNoteContext(t)&&this.refresh()}notesReloadedEvent({noteIds:t}){t.includes(this.noteId)&&this.refresh()}}class Te extends x{constructor(){super(),this.class("scrolling-container"),this.css("overflow","auto"),this.css("scroll-behavior","smooth"),this.css("position","relative")}setNoteContextEvent({noteContext:t}){this.noteContext=t}async noteSwitchedEvent({noteContext:t,notePath:e}){this.$widget.scrollTop(0)}async noteSwitchedAndActivatedEvent({noteContext:t,notePath:e}){this.noteContext=t,this.$widget.scrollTop(0)}async activeContextChangedEvent({noteContext:t}){this.noteContext=t}handleEventInChildren(t,e){if("readOnlyTemporarilyDisabled"===t&&this.noteContext&&this.noteContext.ntxId===e.noteContext.ntxId){const n=this.$widget.scrollTop(),i=super.handleEventInChildren(t,e);return i.then((()=>setTimeout((()=>this.$widget.scrollTop(n)),500))),i}return super.handleEventInChildren(t,e)}scrollContainerToCommand({position:t}){this.$widget.scrollTop(t)}}class Se extends y{constructor(){super("row"),this.id("root-widget"),this.css("height","100%")}}const Ee={notes:{},attachments:{}};function Ae(t){if("notes"!==t&&"attachments"!==t)throw new Error(`Unrecognized type '${t}', should be 'notes' or 'attachments'`)}D.Z.subscribeToMessages((async e=>{"openedFileUpdated"===e.type&&(Ae(e.entityType),Ee[e.entityType][e.entityId]=e,t.default.triggerEvent("openedFileUpdated",{entityType:e.entityType,entityId:e.entityId,lastModifiedMs:e.lastModifiedMs,filePath:e.filePath}))}));const Re=function(t,e){return Ae(t),Ee[t][e]},Pe=function(t,e){Ae(t),delete Ee[t][e]},_e=function(t,e){Ae(t),delete Ee[t][e]};class Me extends B.Z{isEnabled(){const{entityType:t,entityId:e}=this.getEntity();return super.isEnabled()&&!!Re(t,e)}doRender(){this.$widget=$('\n<div class="dropdown watched-file-update-status-widget alert alert-warning">\n    <style>\n        .watched-file-update-status-widget {\n            margin: 10px;\n            contain: none;\n        }\n    </style>\n    \n    <p>文件<code class="file-path"></code> 最后修改于 <span class="file-last-modified"></span>.</p> \n\n    <div style="display: flex; flex-direction: row; justify-content: space-evenly;">\n        <button class="btn btn-sm file-upload-button">上传修改后的文件</button>\n        \n        <button class="btn btn-sm ignore-this-change-button">忽略此修改</button>\n    </div>\n</div>'),this.$filePath=this.$widget.find(".file-path"),this.$fileLastModified=this.$widget.find(".file-last-modified"),this.$fileUploadButton=this.$widget.find(".file-upload-button"),this.$fileUploadButton.on("click",(async()=>{const{entityType:t,entityId:e}=this.getEntity();await o.Z.post(`${t}/${e}/upload-modified-file`,{filePath:this.$filePath.text()}),Pe(t,e),this.refresh()})),this.$ignoreThisChangeButton=this.$widget.find(".ignore-this-change-button"),this.$ignoreThisChangeButton.on("click",(()=>{const{entityType:t,entityId:e}=this.getEntity();_e(t,e),this.refresh()}))}async refreshWithNote(t){const{entityType:e,entityId:n}=this.getEntity(),i=Re(e,n);this.$filePath.text(i.filePath),this.$fileLastModified.text(dayjs.unix(i.lastModifiedMs/1e3).format("HH:mm:ss"))}getEntity(){if(!this.noteContext)return{};const{viewScope:t}=this.noteContext;return"attachments"===t.viewMode&&t.attachmentId?{entityType:"attachments",entityId:t.attachmentId}:{entityType:"notes",entityId:this.noteId}}openedFileUpdatedEvent(t){console.log(t);const{entityType:e,entityId:n}=this.getEntity();t.entityType===e&&t.entityId===n&&this.refresh()}}class Ze extends v.Z{constructor(t=0,e=1e3){super(),this.baseSize=t,this.growthFactor=e}doRender(){this.$widget=$('<div class="spacer"></div>'),this.$widget.css("flex-basis",this.baseSize),this.$widget.css("flex-grow",this.growthFactor),this.$widget.css("flex-shrink",1e3),this.$widget.on("contextmenu",(e=>(this.$widget.tooltip("hide"),f.Z.show({x:e.pageX,y:e.pageY,items:[{title:"配置启动栏",command:"showLaunchBarSubtree",uiIcon:"bx bx-sidebar"}],selectMenuItemHandler:({command:e})=>{t.default.triggerCommand(e)}}),!1)))}}class Le extends v.Z{doRender(){return this.$widget=$('\n<div class="quick-search input-group input-group-sm">\n  <style>\n    .quick-search {\n        padding: 10px 10px 10px 0px;\n        height: 50px;\n    }\n    \n    .quick-search button, .quick-search input {\n        border: 0;\n        font-size: 100% !important;\n    }\n  \n    .quick-search .dropdown-menu {\n        max-height: 600px;\n        max-width: 400px;\n        overflow-y: auto;\n        overflow-x: hidden;\n        text-overflow: ellipsis;\n        box-shadow: -30px 50px 93px -50px black;\n    }\n  </style>\n  \n  <div class="input-group-prepend">\n    <button class="btn btn-outline-secondary search-button" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n        <span class="bx bx-search"></span>\n    </button>\n    <div class="dropdown-menu dropdown-menu-left"></div>\n  </div>\n  <input type="text" class="form-control form-control-sm search-string" placeholder="快速搜索">\n  </div>\n</div>'),this.$searchString=this.$widget.find(".search-string"),this.$dropdownMenu=this.$widget.find(".dropdown-menu"),this.$dropdownToggle=this.$widget.find(".search-button"),this.$dropdownToggle.dropdown(),this.$widget.find(".input-group-prepend").on("shown.bs.dropdown",(()=>this.search())),e.default.isMobile()&&this.$searchString.keydown((t=>{13===t.which&&(this.$dropdownMenu.is(":visible")?this.search():this.$dropdownToggle.dropdown("show"),t.preventDefault(),t.stopPropagation())})),p.Z.bindElShortcut(this.$searchString,"return",(()=>{this.$dropdownMenu.is(":visible")?this.search():this.$dropdownToggle.dropdown("show"),this.$searchString.focus()})),p.Z.bindElShortcut(this.$searchString,"down",(()=>{this.$dropdownMenu.find(".dropdown-item:first").focus()})),p.Z.bindElShortcut(this.$searchString,"esc",(()=>{this.$dropdownToggle.dropdown("hide")})),this.$widget}async search(){const e=this.$searchString.val().trim();if(!e)return void this.$dropdownToggle.dropdown("hide");this.$dropdownMenu.empty(),this.$dropdownMenu.append('<span class="dropdown-item disabled"><span class="bx bx-loader bx-spin"></span>正在搜索...</span>');const{searchResultNoteIds:n,error:i}=await o.Z.get(`quick-search/${encodeURIComponent(e)}`);i&&(this.$searchString.tooltip({trigger:"manual",title:`Search error: ${i}`,placement:"right"}),this.$searchString.tooltip("show"),setTimeout((()=>this.$searchString.tooltip("dispose")),4e3));const s=n.slice(0,Math.min(15,n.length));this.$dropdownMenu.empty(),0===s.length&&this.$dropdownMenu.append('<span class="dropdown-item disabled">没有找到结果</span>');for(const e of await a.default.getNotes(s)){const n=await z.Z.createLink(e.noteId,{showNotePath:!0});n.addClass("dropdown-item"),n.attr("tabIndex","0"),n.on("click",(n=>{this.$dropdownToggle.dropdown("hide"),n.target&&"A"===n.target.nodeName||t.default.tabManager.getActiveContext().setNote(e.noteId)})),p.Z.bindElShortcut(n,"return",(()=>{this.$dropdownToggle.dropdown("hide"),t.default.tabManager.getActiveContext().setNote(e.noteId)})),this.$dropdownMenu.append(n)}n.length>15&&this.$dropdownMenu.append(`<span class="dropdown-item disabled">... 以及另外 ${n.length-15} 个结果</span>`);const r=$('<a class="dropdown-item" tabindex="0">').append($('<button class="btn btn-sm">在搜索中显示</button>'));this.$dropdownMenu.append(r),r.on("click",(()=>this.showInFullSearch())),p.Z.bindElShortcut(r,"return",(()=>this.showInFullSearch())),p.Z.bindElShortcut(this.$dropdownMenu.find(".dropdown-item:first"),"up",(()=>this.$searchString.focus())),this.$dropdownToggle.dropdown("update")}async showInFullSearch(){this.$dropdownToggle.dropdown("hide"),await t.default.triggerCommand("searchNotes",{searchString:this.$searchString.val()})}quickSearchEvent(){this.$searchString.focus()}}class De extends y{constructor(t){super("row"),this.widgetFactory=t,this.widgets={},this.class("split-note-container-widget"),this.css("flex-grow","1"),this.collapsible()}async newNoteContextCreatedEvent({noteContext:e}){const n=this.widgetFactory(),i=n.render();i.attr("data-ntx-id",e.ntxId),i.on("click",(()=>t.default.tabManager.activateNoteContext(e.ntxId))),this.$widget.append(i),n.handleEvent("initialRenderComplete"),n.toggleExt(!1),this.widgets[e.ntxId]=n,await n.handleEvent("setNoteContext",{noteContext:e}),this.child(n)}async openNewNoteSplitEvent({ntxId:e,notePath:n,hoistedNoteId:i,viewScope:o}){const s=t.default.tabManager.getActiveMainContext().ntxId;e||(logError("empty ntxId!"),e=s),i=i||t.default.tabManager.getActiveContext().hoistedNoteId;const a=await t.default.tabManager.openEmptyTab(null,i,s),r=t.default.tabManager.children.map((t=>t.ntxId)).filter((t=>t!==a.ntxId));r.splice(r.indexOf(e)+1,0,a.ntxId),this.triggerCommand("noteContextReorder",{ntxIdsInOrder:r}),this.$widget.find(`[data-ntx-id="${a.ntxId}"]`).insertAfter(this.$widget.find(`[data-ntx-id="${e}"]`)),await t.default.tabManager.activateNoteContext(a.ntxId),n?await a.setNote(n,o):await a.setEmpty()}closeThisNoteSplitCommand({ntxId:e}){t.default.tabManager.removeNoteContext(e)}async moveThisNoteSplitCommand({ntxId:e,isMovingLeft:n}){if(!e)return void logError("empty ntxId!");const i=t.default.tabManager.noteContexts,o=i.findIndex((t=>t.ntxId===e)),s=n?o-1:o;if(-1===o||s<0||s+1>=i.length)return void logError(`invalid context! currentIndex: ${o}, leftIndex: ${s}, contexts.length: ${i.length}`);if(i[s].isEmpty()&&i[s+1].isEmpty())return;const a=i.map((t=>t.ntxId)),r=[...a.slice(0,s),a[s+1],a[s],...a.slice(s+2)],d=!i[s].mainNtxId;this.triggerCommand("noteContextReorder",{ntxIdsInOrder:r,oldMainNtxId:d?a[s]:null,newMainNtxId:d?a[s+1]:null}),this.$widget.find(`[data-ntx-id="${a[s]}"]`).insertAfter(this.$widget.find(`[data-ntx-id="${a[s+1]}"]`)),await t.default.tabManager.activateNoteContext(n?a[s+1]:a[s])}activeContextChangedEvent(){this.refresh()}noteSwitchedAndActivatedEvent(){this.refresh()}noteContextRemovedEvent({ntxIds:t}){this.children=this.children.filter((e=>!t.includes(e.ntxId)));for(const e of t)this.$widget.find(`[data-ntx-id="${e}"]`).remove(),delete this.widgets[e]}contextsReopenedEvent({ntxId:t,afterNtxId:e}){void 0!==t&&void 0!==e&&this.$widget.find(`[data-ntx-id="${t}"]`).insertAfter(this.$widget.find(`[data-ntx-id="${e}"]`))}async refresh(){this.toggleExt(!0)}toggleInt(t){}toggleExt(e){const n=t.default.tabManager.getActiveMainContext(),i=n?n.ntxId:null;for(const n in this.widgets){const o=t.default.tabManager.getNoteContextById(n);this.widgets[n].toggleExt(e&&i&&[o.ntxId,o.mainNtxId].includes(i))}}handleEventInChildren(e,n){if(["noteSwitched","noteSwitchedAndActivated"].includes(e)){const i=this.widgets[n.noteContext.ntxId];return i&&(i.hasBeenAlreadyShown||"noteSwitchedAndActivated"===e||t.default.tabManager.getActiveMainContext()===n.noteContext.getMainContext())?(i.hasBeenAlreadyShown=!0,[i.handleEvent("noteSwitched",n),this.refreshNotShown(n)]):Promise.resolve()}return"activeContextChanged"===e?this.refreshNotShown(n):super.handleEventInChildren(e,n)}refreshNotShown(t){const e=[];for(const n of t.noteContext.getMainContext().getSubContexts()){const t=this.widgets[n.ntxId];t.hasBeenAlreadyShown||(t.hasBeenAlreadyShown=!0,e.push(t.handleEvent("activeContextChanged",{noteContext:n})))}return this.refresh(),Promise.all(e)}}let Be,Oe;const We=function(t){if(Be&&(Be.destroy(),Be=null),$("#left-pane").toggle(t),!t)return void $("#rest-pane").css("width","100%");let e=m.Z.getInt("leftPaneWidth");(!e||e<5)&&(e=5),t&&(Be=Split(["#left-pane","#rest-pane"],{sizes:[e,100-e],gutterSize:5,onDragEnd:t=>m.Z.save("leftPaneWidth",Math.round(t[0]))}))},Fe=function(){Oe&&(Oe.destroy(),Oe=null);const t=$("#right-pane").is(":visible");if(!t)return void $("#center-pane").css("width","100%");let e=m.Z.getInt("rightPaneWidth");(!e||e<5)&&(e=5),t&&(Oe=Split(["#center-pane","#right-pane"],{sizes:[100-e,e],gutterSize:5,onDragEnd:t=>m.Z.save("rightPaneWidth",Math.round(t[1]))}))};class ze extends B.Z{isEnabled(){return!0}constructor(){super(),this.settings={titlePlacement:"right",title:null,icon:null,onContextMenu:null}}doRender(){this.$widget=$('<button class="button-widget bx"\n      data-toggle="tooltip"\n      title=""></button>'),this.settings.onContextMenu&&this.$widget.on("contextmenu",(t=>(this.$widget.tooltip("hide"),this.settings.onContextMenu(t),!1))),this.$widget.attr("data-placement",this.settings.titlePlacement),this.$widget.tooltip({html:!0,title:()=>this.getTitle(),trigger:"hover"}),super.doRender()}getTitle(){return"function"==typeof this.settings.title?this.settings.title():this.settings.title}refreshIcon(){for(const t of this.$widget[0].classList)t.startsWith("bx-")&&this.$widget.removeClass(t);const t="function"==typeof this.settings.icon?this.settings.icon():this.settings.icon;this.$widget.addClass(t)}initialRenderCompleteEvent(){this.refreshIcon()}icon(t){return this.settings.icon=t,this}title(t){return this.settings.title=t,this}titlePlacement(t){return this.settings.titlePlacement=t,this}onContextMenu(t){return this.settings.onContextMenu=t,this}}let He;k.default.getActions().then((t=>He=t));class Ue extends ze{doRender(){super.doRender(),this.settings.command?this.$widget.on("click",(()=>{this.$widget.tooltip("hide"),this.triggerCommand(this._command)})):console.warn(`Button widget '${this.componentId}' has no defined command`,this.settings)}getTitle(){const t=super.getTitle(),e=He.find((t=>t.actionName===this._command));return e&&e.effectiveShortcuts.length>0?`${t} (${e.effectiveShortcuts.join(", ")})`:t}onClick(t){return this.settings.onClick=t,this}command(t){return this.settings.command=t,this}get _command(){return"function"==typeof this.settings.command?this.settings.command():this.settings.command}}class je extends Ue{constructor(){super(),this.class("launcher-button"),this.settings.icon=()=>m.Z.is("leftPaneVisible")?"bx-chevrons-left":"bx-chevrons-right",this.settings.title=()=>m.Z.is("leftPaneVisible")?"隐藏面板":"打开面板",this.settings.command=()=>m.Z.is("leftPaneVisible")?"hideLeftPane":"showLeftPane"}refreshIcon(){super.refreshIcon(),We(m.Z.is("leftPaneVisible"))}entitiesReloadedEvent({loadResults:t}){t.isOptionReloaded("leftPaneVisible")&&this.refreshIcon()}}class qe extends ze{doRender(){super.doRender(),this.settings.onClick?this.$widget.on("click",(t=>{t.stopPropagation(),this.$widget.tooltip("hide"),this.settings.onClick(this,t)})):console.warn(`Button widget '${this.componentId}' has no defined click handler`,this.settings),this.settings.onAuxClick&&this.$widget.on("auxclick",(t=>{this.$widget.tooltip("hide"),this.settings.onAuxClick(this,t)}))}onClick(t){return this.settings.onClick=t,this}onAuxClick(t){return this.settings.onAuxClick=t,this}}class Ve extends qe{constructor(){super(),this.icon("bx-dock-right").title("拆分面板").titlePlacement("bottom").onClick((t=>t.triggerCommand("openNewNoteSplit",{ntxId:t.getClosestNtxId()}))).class("icon-action")}}class Ke extends qe{isEnabled(){return super.isEnabled()&&this.noteContext&&!!this.noteContext.mainNtxId}async noteContextReorderEvent({ntxIdsInOrder:t}){this.refresh()}constructor(){super(),this.icon("bx-x").title("关闭面板").titlePlacement("bottom").onClick(((t,e)=>{e.stopPropagation(),t.triggerCommand("closeThisNoteSplit",{ntxId:t.getClosestNtxId()})})).class("icon-action")}}const Je=[{type:"file",title:"文件",selectable:!1},{type:"image",title:"图像",selectable:!1},{type:"search",title:"保存的搜索",selectable:!1},{type:"noteMap",mime:"",title:"笔记地图",selectable:!1},{type:"launcher",mime:"",title:"启动栏",selectable:!1},{type:"doc",mime:"",title:"文档",selectable:!1},{type:"contentWidget",mime:"",title:"部件",selectable:!1},{type:"text",mime:"text/html",title:"文本",selectable:!0},{type:"relationMap",mime:"application/json",title:"关系图",selectable:!0},{type:"render",mime:"",title:"渲染笔记",selectable:!0},{type:"canvas",mime:"application/json",title:"画布",selectable:!0},{type:"mermaid",mime:"text/mermaid",title:"美人鱼图",selectable:!0},{type:"book",mime:"",title:"书",selectable:!0},{type:"webView",mime:"",title:"网页视图",selectable:!0},{type:"code",mime:"text/plain",title:"代码",selectable:!0}],Ge=Je.filter((t=>!t.selectable)).map((t=>t.type));class Ye extends B.Z{doRender(){this.$widget=$('\n<div class="dropdown note-type-widget">\n    <style>\n    .note-type-dropdown {\n        max-height: 500px;\n        overflow-y: auto;\n        overflow-x: hidden;\n    }\n    </style>\n    <button type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" class="btn btn-sm dropdown-toggle note-type-button">\n        <span class="note-type-desc"></span>\n        <span class="caret"></span>\n    </button>\n    <div class="note-type-dropdown dropdown-menu dropdown-menu-left"></div>\n</div>\n'),this.$widget.on("show.bs.dropdown",(()=>this.renderDropdown())),this.$noteTypeDropdown=this.$widget.find(".note-type-dropdown"),this.$noteTypeButton=this.$widget.find(".note-type-button"),this.$noteTypeDesc=this.$widget.find(".note-type-desc"),this.$widget.on("click",".dropdown-item",(()=>this.$widget.find(".dropdown-toggle").dropdown("toggle")))}async refreshWithNote(t){this.$noteTypeButton.prop("disabled",(()=>Ge.includes(t.type))),this.$noteTypeDesc.text(await this.findTypeTitle(t.type,t.mime)),this.$noteTypeButton.dropdown("hide")}async renderDropdown(){this.$noteTypeDropdown.empty();for(const t of Je.filter((t=>t.selectable))){const e=$('<a class="dropdown-item">').attr("data-note-type",t.type).append('<span class="check">&check;</span> ').append($("<strong>").text(t.title)).on("click",(t=>{const n=e.attr("data-note-type"),i=Je.find((t=>t.type===n));this.save(i.type,i.mime)}));this.note.type===t.type&&e.addClass("selected"),this.$noteTypeDropdown.append(e),"code"!==t.type&&this.$noteTypeDropdown.append('<div class="dropdown-divider"></div>')}for(const t of await ft.getMimeTypes()){if(!t.enabled)continue;const e=$('<a class="dropdown-item">').attr("data-mime-type",t.mime).append('<span class="check">&check;</span> ').append($("<span>").text(t.title)).on("click",(t=>{const e=$(t.target).closest(".dropdown-item");this.save("code",e.attr("data-mime-type"))}));"code"===this.note.type&&this.note.mime===t.mime&&(e.addClass("selected"),this.$noteTypeDesc.text(t.title)),this.$noteTypeDropdown.append(e)}}async findTypeTitle(t,e){if("code"===t){const t=(await ft.getMimeTypes()).find((t=>t.mime===e));return t?t.title:e}{const e=Je.find((e=>e.type===t));return e?e.title:t}}async save(t,e){t===this.note.type&&e===this.note.mime||(t===this.note.type||await this.confirmChangeIfContent())&&await o.Z.put(`notes/${this.noteId}/type`,{type:t,mime:e})}async confirmChangeIfContent(){const t=await this.note.getBlob();return!t.content||!t.content.trim().length||await U.Z.confirm("不建议在笔记有内容的情况下修改笔记类型, 是否要继续?")}async entitiesReloadedEvent({loadResults:t}){t.isNoteReloaded(this.noteId)&&this.refresh()}}class Qe extends B.Z{doRender(){this.$widget=$('\n<div class="switch-widget">\n    <style>    \n    .switch-widget {\n        display: flex;\n        align-items: center;\n    }\n    \n    /* The switch - the box around the slider */\n    .switch-widget .switch {\n        position: relative;\n        display: block;\n        width: 50px;\n        height: 24px;\n        margin: 0;\n    }\n    \n    .switch-on, .switch-off {\n        display: flex;\n    }\n    \n    /* The slider */\n    .switch-widget .slider {\n        border-radius: 24px;\n        position: absolute;\n        cursor: pointer;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background-color: var(--more-accented-background-color);\n        transition: .4s;\n    }\n    \n    .switch-widget .slider:before {\n        border-radius: 50%;\n        position: absolute;\n        content: "";\n        height: 16px;\n        width: 16px;\n        left: 4px;\n        bottom: 4px;\n        background-color: var(--main-background-color);\n        -webkit-transition: .4s;\n        transition: .4s;\n    }\n    \n    .switch-widget .slider.checked {\n        background-color: var(--main-text-color);\n    }\n    \n    .switch-widget .slider.checked:before {\n        transform: translateX(26px);\n    }\n    \n    .switch-widget .switch-disabled {\n        opacity: 70%;\n        pointer-events: none;\n    }\n    \n    .switch-widget .switch-help-button {\n        font-weight: 900;\n        border: 0;\n        background: none;\n        cursor: pointer;\n        color: var(--main-text-color);\n    }\n    </style>\n\n    <div class="switch-on">\n        <span class="switch-on-name"></span>\n    \n        &nbsp;\n    \n        <span class="switch-on-button">\n            <label class="switch">\n            <span class="slider"></span>\n        </span>\n    </div>\n    <div class="switch-off">\n        <span class="switch-off-name"></span>\n        \n        &nbsp;\n    \n        <span class="switch-off-button">\n            <label class="switch">\n            <span class="slider checked"></span>\n        </span>\n    </div>\n    \n    <button class="switch-help-button" type="button" data-help-page="" title="打开帮助页" style="display: none;">?</button>\n</div>'),this.$switchOn=this.$widget.find(".switch-on"),this.$switchOnName=this.$widget.find(".switch-on-name"),this.$switchOnButton=this.$widget.find(".switch-on-button"),this.$switchOnButton.on("click",(()=>this.toggle(!0))),this.$switchOff=this.$widget.find(".switch-off"),this.$switchOffName=this.$widget.find(".switch-off-name"),this.$switchOffButton=this.$widget.find(".switch-off-button"),this.$switchOffButton.on("click",(()=>this.toggle(!1))),this.$helpButton=this.$widget.find(".switch-help-button")}toggle(t){t?this.switchOn():this.switchOff()}switchOff(){}switchOn(){}}class Xe extends Qe{doRender(){super.doRender(),this.$switchOnName.text("保护笔记"),this.$switchOnButton.attr("title","笔记不受保护, 点击以使其受保护"),this.$switchOffName.text("取消保护笔记"),this.$switchOffButton.attr("title","笔记已受保护, 点击以使其不受保护")}switchOn(){F.Z.protectNote(this.noteId,!0,!1)}switchOff(){F.Z.protectNote(this.noteId,!1,!1)}async refreshWithNote(t){this.$switchOn.toggle(!t.isProtected),this.$switchOff.toggle(!!t.isProtected)}entitiesReloadedEvent({loadResults:t}){t.isNoteReloaded(this.noteId)&&this.refresh()}}class tn extends B.Z{doRender(){this.$widget=$('\n<div class="dropdown editability-select-widget">\n    <style>\n    .editability-dropdown {\n        width: 300px;\n    }\n    \n    .editability-dropdown .dropdown-item div {\n        font-size: small;\n        color: var(--muted-text-color);\n        white-space: normal;\n    }\n    </style>\n    <button type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" class="btn btn-sm dropdown-toggle editability-button">\n        <span class="editability-active-desc">自动</span>\n        <span class="caret"></span>\n    </button>\n    <div class="editability-dropdown dropdown-menu dropdown-menu-right">\n        <a class="dropdown-item" href="#" data-editability="auto">\n            <span class="check">&check;</span>\n            自动\n            <div>短笔记是可编辑的.</div>    \n        </a>\n        <a class="dropdown-item" href="#" data-editability="readOnly">\n            <span class="check">&check;</span>\n            只读\n            <div>笔记是只读的, 但可以通过单击一个按钮进行编辑.</div>\n        </a>\n        <a class="dropdown-item" href="#" data-editability="autoReadOnlyDisabled">\n            <span class="check">&check;</span>\n            总是可编辑的\n            <div>笔记总是可编辑的, 无论其长度如何.</div>\n        </a>\n    </div>\n</div>\n'),this.$editabilityActiveDesc=this.$widget.find(".editability-active-desc"),this.$widget.on("click",".dropdown-item",(async t=>{this.$widget.find(".dropdown-toggle").dropdown("toggle");const e=$(t.target).closest("[data-editability]").attr("data-editability");for(const t of this.note.getOwnedLabels())["readOnly","autoReadOnlyDisabled"].includes(t.name)&&await T.removeAttributeById(this.noteId,t.attributeId);"auto"!==e&&await T.addLabel(this.noteId,e)}))}async refreshWithNote(t){let e="auto";this.note.isLabelTruthy("readOnly")?e="readOnly":this.note.isLabelTruthy("autoReadOnlyDisabled")&&(e="autoReadOnlyDisabled"),this.$widget.find(".dropdown-item").removeClass("selected"),this.$widget.find(`.dropdown-item[data-editability='${e}']`).addClass("selected"),this.$editabilityActiveDesc.text({auto:"自动",readOnly:"只读",autoReadOnlyDisabled:"总是可编辑的"}[e])}entitiesReloadedEvent({loadResults:t}){t.getAttributeRows().find((t=>t.noteId===this.noteId))&&this.refresh()}}class en extends Qe{isEnabled(){return super.isEnabled()&&!["root","_hidden"].includes(this.noteId)}doRender(){super.doRender(),this.$switchOnName.text("书签"),this.$switchOnButton.attr("title","将此笔记添加到左侧面板的书签"),this.$switchOffName.text("书签"),this.$switchOffButton.attr("title","删除书签")}async toggle(t){const e=await o.Z.put(`notes/${this.noteId}/toggle-in-parent/_lbBookmarks/${!!t}`);e.success||O.default.showError(e.message)}async refreshWithNote(t){const e=!!t.getParentBranches().find((t=>"_lbBookmarks"===t.parentNoteId));this.$switchOn.toggle(!e),this.$switchOff.toggle(e)}entitiesReloadedEvent({loadResults:t}){t.getBranchRows().find((t=>t.noteId===this.noteId))&&this.refresh()}}const nn=async function(t=!1){const e=await o.Z.post("sync/now");e.success?O.default.showMessage("同步成功."):(e.message.length>200&&(e.message=`${e.message.substr(0,200)}...`),t&&"NOT_CONFIGURED"===e.errorCode||O.default.showError(`Sync failed: ${e.message}`))};class on extends Qe{isEnabled(){return super.isEnabled()&&!["root","_share","_hidden"].includes(this.noteId)}doRender(){super.doRender(),this.$switchOnName.text("分享"),this.$switchOnButton.attr("title","分享笔记"),this.$switchOffName.text("分享"),this.$switchOffButton.attr("title","取消分享笔记"),this.$helpButton.attr("data-help-page","Sharing").show(),this.$helpButton.on("click",(t=>e.default.openHelp($(t.target))))}async switchOn(){await L.Z.cloneNoteToParentNote(this.noteId,"_share"),nn(!0)}async switchOff(){const t=this.note.getParentBranches().find((t=>"_share"===t.parentNoteId));if(t){if(1===this.note.getParentBranches().length){const t="This note exists only as a shared note, unsharing would delete it. Do you want to continue and thus delete this note?";if(!await U.Z.confirm(t))return}await o.Z.remove(`branches/${t.branchId}?taskId=no-progress-reporting`),nn(!0)}}async refreshWithNote(t){const e=t.hasAncestor("_share"),n=e&&t.getParentBranches().find((t=>"_share"===t.parentNoteId)),i=e&&!n;this.$switchOn.toggle(!e),this.$switchOff.toggle(!!e),i?(this.$widget.attr("title","这里无法取消分享笔记, 因为它是从父级笔记继承的分享."),this.$switchOff.addClass("switch-disabled")):(this.$widget.removeAttr("title"),this.$switchOff.removeClass("switch-disabled"))}entitiesReloadedEvent({loadResults:t}){t.getBranchRows().find((t=>t.noteId===this.noteId))&&this.refresh()}}class sn extends B.Z{constructor(){super(),this.noteTypeWidget=(new Ye).contentSized(),this.protectedNoteSwitchWidget=(new Xe).contentSized(),this.editabilitySelectWidget=(new tn).contentSized(),this.bookmarkSwitchWidget=(new en).contentSized(),this.sharedSwitchWidget=(new on).contentSized(),this.child(this.noteTypeWidget,this.protectedNoteSwitchWidget,this.editabilitySelectWidget,this.bookmarkSwitchWidget,this.sharedSwitchWidget)}get name(){return"basicProperties"}get toggleCommand(){return"toggleRibbonBasicProperties"}getTitle(){return{show:!this.note.isLaunchBarConfig(),title:"基本属性",icon:"bx bx-slider"}}doRender(){this.$widget=$('\n<div class="basic-properties-widget">\n    <style>\n        .basic-properties-widget {\n            padding: 0px 12px 6px 12px;\n            display: flex;\n            align-items: baseline;\n            flex-wrap: wrap;\n        }\n        \n        .basic-properties-widget > * {\n            margin-right: 30px;\n            margin-top: 9px;\n            margin-bottom: 2px;\n        }\n        \n        .note-type-container, .editability-select-container {\n            display: flex;\n            align-items: center;\n        }\n    </style>\n    \n    <div class="note-type-container">\n        <span>笔记类型:</span> &nbsp;\n    </div>\n    \n    <div class="protected-note-switch-container"></div>\n    \n    <div class="editability-select-container">\n        <span>可编辑:</span> &nbsp;\n    </div>\n    \n    <div class="bookmark-switch-container"></div>\n    \n    <div class="shared-switch-container"></div>\n</div>'),this.contentSized(),this.$widget.find(".note-type-container").append(this.noteTypeWidget.render()),this.$widget.find(".protected-note-switch-container").append(this.protectedNoteSwitchWidget.render()),this.$widget.find(".editability-select-container").append(this.editabilitySelectWidget.render()),this.$widget.find(".bookmark-switch-container").append(this.bookmarkSwitchWidget.render()),this.$widget.find(".shared-switch-container").append(this.sharedSwitchWidget.render())}async refreshWithNote(t){await super.refreshWithNote(t),this.$widget.find(".editability-select-container").toggle(this.note&&["text","code"].includes(this.note.type))}}class an extends B.Z{get name(){return"noteInfo"}get toggleCommand(){return"toggleRibbonTabNoteInfo"}isEnabled(){return this.note}getTitle(){return{show:this.isEnabled(),title:"笔记信息",icon:"bx bx-info-circle"}}doRender(){this.$widget=$('\n<div class="note-info-widget">\n    <style>\n        .note-info-widget {\n            padding: 12px;\n        }\n        \n        .note-info-widget-table {\n            max-width: 100%;            \n            display: block;\n            overflow-x: auto;\n            white-space: nowrap;\n        } \n   \n        .note-info-widget-table td, .note-info-widget-table th {\n            padding: 5px;\n        }\n        \n        .note-info-mime {\n            max-width: 13em;\n            overflow: hidden;\n            text-overflow: ellipsis;\n            white-space: nowrap;\n        }\n    </style>\n\n    <table class="note-info-widget-table">\n        <tr>\n            <th>笔记ID:</th>\n            <td class="note-info-note-id"></td>\n            <th>创建:</th>\n            <td class="note-info-date-created"></td>\n            <th>修改:</th>\n            <td class="note-info-date-modified"></td>\n        </tr>\n        <tr>\n            <th>类型:</th>\n            <td>\n                <span class="note-info-type"></span>\n                \n                <span class="note-info-mime"></span>\n            </td>\n\n            <th title="估算这个笔记占用的空间, 包括笔记内容和笔记历史.">笔记大小:</th>\n           \n            <td colspan="3">\n                <button class="btn btn-sm calculate-button" style="padding: 0px 10px 0px 10px;">\n                    <span class="bx bx-calculator"></span> 计算\n                </button>\n                \n                <span class="note-sizes-wrapper">\n                    <span class="note-size"></span>\n                    \n                    <span class="subtree-size"></span>\n                </span>\n            </td>\n        </tr>\n    </table>\n</div>\n'),this.contentSized(),this.$noteId=this.$widget.find(".note-info-note-id"),this.$dateCreated=this.$widget.find(".note-info-date-created"),this.$dateModified=this.$widget.find(".note-info-date-modified"),this.$type=this.$widget.find(".note-info-type"),this.$mime=this.$widget.find(".note-info-mime"),this.$noteSizesWrapper=this.$widget.find(".note-sizes-wrapper"),this.$noteSize=this.$widget.find(".note-size"),this.$subTreeSize=this.$widget.find(".subtree-size"),this.$calculateButton=this.$widget.find(".calculate-button"),this.$calculateButton.on("click",(async()=>{this.$noteSizesWrapper.show(),this.$calculateButton.hide(),this.$noteSize.empty().append($('<span class="bx bx-loader bx-spin"></span>')),this.$subTreeSize.empty().append($('<span class="bx bx-loader bx-spin"></span>'));const t=await o.Z.get(`stats/note-size/${this.noteId}`);this.$noteSize.text(e.default.formatSize(t.noteSize));const n=await o.Z.get(`stats/subtree-size/${this.noteId}`);n.subTreeNoteCount>1?this.$subTreeSize.text(`(子树大小: ${e.default.formatSize(n.subTreeSize)} 共计 ${n.subTreeNoteCount} 个笔记)`):this.$subTreeSize.text("")}))}async refreshWithNote(t){const e=await o.Z.get(`notes/${this.noteId}/metadata`);this.$noteId.text(t.noteId),this.$dateCreated.text(e.dateCreated.substr(0,16)).attr("title",e.dateCreated),this.$dateModified.text(e.dateModified.substr(0,16)).attr("title",e.dateModified),this.$type.text(t.type),t.mime?this.$mime.text(`(${t.mime})`):this.$mime.empty(),this.$calculateButton.show(),this.$noteSizesWrapper.hide()}entitiesReloadedEvent({loadResults:t}){(t.isNoteReloaded(this.noteId)||t.isNoteContentReloaded(this.noteId))&&this.refresh()}}class rn extends B.Z{get name(){return"bookProperties"}get toggleCommand(){return"toggleRibbonTabBookProperties"}isEnabled(){return this.note&&"book"===this.note.type}getTitle(){return{show:this.isEnabled(),activate:!0,title:"图书属性",icon:"bx bx-book"}}doRender(){this.$widget=$('\n<div class="book-properties-widget">\n    <style>\n        .book-properties-widget {\n            padding: 12px 12px 6px 12px;\n            display: flex;\n        }\n        \n        .book-properties-widget > * {\n            margin-right: 15px;\n        }\n    </style>\n\n    <div style="display: flex; align-items: baseline">\n        <span style="white-space: nowrap">视图类型:</span>\n        \n        <select class="view-type-select form-control form-control-sm">\n            <option value="grid">网格</option>\n            <option value="list">列表</option>\n        </select>\n    </div>\n    \n    <button type="button"\n            class="collapse-all-button btn btn-sm"\n            title="折叠所有笔记">\n    \n        <span class="bx bx-layer-minus"></span>\n        \n        折叠\n    </button>\n\n    <button type="button"\n            class="expand-children-button btn btn-sm"\n            title="展开所有子笔记">\n        <span class="bx bx-move-vertical"></span>\n        \n        展开\n    </button>\n</div>\n'),this.contentSized(),this.$viewTypeSelect=this.$widget.find(".view-type-select"),this.$viewTypeSelect.on("change",(()=>this.toggleViewType(this.$viewTypeSelect.val()))),this.$expandChildrenButton=this.$widget.find(".expand-children-button"),this.$expandChildrenButton.on("click",(async()=>{this.note.isLabelTruthy("expanded")||await T.addLabel(this.noteId,"expanded"),this.triggerCommand("refreshNoteList",{noteId:this.noteId})})),this.$collapseAllButton=this.$widget.find(".collapse-all-button"),this.$collapseAllButton.on("click",(async()=>{for(const t of this.note.getOwnedLabels("expanded"))await T.removeAttributeById(this.noteId,t.attributeId);this.triggerCommand("refreshNoteList",{noteId:this.noteId})}))}async refreshWithNote(t){const e=this.note.getLabelValue("viewType")||"grid";this.$viewTypeSelect.val(e),this.$expandChildrenButton.toggle("list"===e),this.$collapseAllButton.toggle("list"===e)}async toggleViewType(t){if("list"!==t&&"grid"!==t)throw new Error(`Invalid view type '${t}'`);await T.setLabel(this.noteId,"viewType",t)}entitiesReloadedEvent({loadResults:t}){t.getAttributeRows().find((t=>t.noteId===this.noteId&&"viewType"===t.name))&&this.refresh()}}class dn extends B.Z{constructor(){super(),this.noteMapWidget=new Mt("ribbon"),this.child(this.noteMapWidget)}get name(){return"noteMap"}get toggleCommand(){return"toggleRibbonTabNoteMap"}getTitle(){return{show:this.isEnabled(),title:"笔记地图",icon:"bx bx-map-alt"}}doRender(){this.$widget=$('\n<div class="note-map-ribbon-widget">\n    <style>\n        .note-map-ribbon-widget {\n            position: relative;\n        }\n        \n        .note-map-ribbon-widget .note-map-container {\n            height: 300px;\n        }\n    \n        .open-full-button, .collapse-button {\n            position: absolute;\n            right: 5px;\n            bottom: 5px;\n            z-index: 1000;\n        }\n        \n        .style-resolver {\n            color: var(--muted-text-color);\n            display: none;\n        }\n    </style>\n\n    <button class="bx bx-arrow-to-bottom icon-action open-full-button" title="完整显示"></button>\n    <button class="bx bx-arrow-to-top icon-action collapse-button" style="display: none;" title="折叠到正常大小"></button>\n\n    <div class="note-map-container"></div>\n</div>'),this.contentSized(),this.$container=this.$widget.find(".note-map-container"),this.$container.append(this.noteMapWidget.render()),this.openState="small",this.$openFullButton=this.$widget.find(".open-full-button"),this.$openFullButton.on("click",(()=>{this.setFullHeight(),this.$openFullButton.hide(),this.$collapseButton.show(),this.openState="full",this.noteMapWidget.setDimensions()})),this.$collapseButton=this.$widget.find(".collapse-button"),this.$collapseButton.on("click",(()=>{this.setSmallSize(),this.$openFullButton.show(),this.$collapseButton.hide(),this.openState="small",this.noteMapWidget.setDimensions()})),new ResizeObserver((()=>{this.noteMapWidget.graph&&("full"===this.openState?this.setFullHeight():"small"===this.openState&&this.setSmallSize())})).observe(this.$widget[0])}setSmallSize(){const t=this.$widget.width();this.$widget.find(".note-map-container").height(300).width(t)}setFullHeight(){const{top:t}=this.$widget[0].getBoundingClientRect(),e=$(window).height()-t,n=this.$widget.width();this.$widget.find(".note-map-container").height(e).width(n)}}class ln extends B.Z{get name(){return"notePaths"}get toggleCommand(){return"toggleRibbonTabNotePaths"}getTitle(){return{show:!0,title:"笔记路径",icon:"bx bx-collection"}}doRender(){this.$widget=$('\n<div class="note-paths-widget">\n    <style>\n    .note-paths-widget {\n        padding: 12px;\n        max-height: 300px;\n        overflow-y: auto;\n    }\n    \n    .note-path-list {\n        margin-top: 10px;\n    }\n    \n    .note-path-list .path-current {\n        font-weight: bold;\n    }\n    \n    .note-path-list .path-archived {\n        color: var(--muted-text-color) !important;\n    }\n    \n    .note-path-list .path-search {\n        font-style: italic;\n    }\n    </style>\n    \n    <div class="note-path-intro"></div>\n    \n    <ul class="note-path-list"></ul>\n    \n    <button class="btn btn-sm" data-trigger-command="cloneNoteIdsTo">克隆到新路径...</button>\n</div>'),this.contentSized(),this.$notePathIntro=this.$widget.find(".note-path-intro"),this.$notePathList=this.$widget.find(".note-path-list"),this.$widget.on("show.bs.dropdown",(()=>this.renderDropdown()))}async refreshWithNote(t){if(this.$notePathList.empty(),"root"===this.noteId)return void this.$notePathList.empty().append(await this.getRenderedPath("root"));const e=this.note.getSortedNotePathRecords(this.hoistedNoteId).filter((t=>!t.isHidden));e.length>0?this.$notePathIntro.text("这个笔记已被放到以下路径中:"):this.$notePathIntro.text("这个笔记还没有被放到笔记树中.");const n=[];for(const t of e){const e=t.notePath.join("/");n.push(await this.getRenderedPath(e,t))}this.$notePathList.empty().append(...n)}async getRenderedPath(t,e=null){const n=await Z.Z.getNotePathTitle(t),i=await z.Z.createLink(t,{title:n});i.find("a").addClass("no-tooltip-preview");const o=[];return this.notePath===t&&i.addClass("path-current"),!e||e.isInHoistedSubTree?i.addClass("path-in-hoisted-subtree"):o.push('<span class="bx bx-trending-up" title="该路径不在提升笔记的范围内,您必须取消提升."></span>'),e?.isArchived&&(i.addClass("path-archived"),o.push('<span class="bx bx-archive" title="已归档"></span>')),e?.isSearch&&(i.addClass("path-search"),o.push('<span class="bx bx-search" title="搜索"></span>')),o.length>0&&i.append(` ${o.join(" ")}`),$("<li>").append(i)}entitiesReloadedEvent({loadResults:t}){(t.getBranchRows().find((t=>t.noteId===this.noteId))||t.isNoteReloaded(this.noteId))&&this.refresh()}}class cn extends B.Z{get name(){return"similarNotes"}get toggleCommand(){return"toggleRibbonTabSimilarNotes"}isEnabled(){return super.isEnabled()&&"search"!==this.note.type&&!this.note.isLabelTruthy("similarNotesWidgetDisabled")}getTitle(){return{show:this.isEnabled(),title:"相似笔记",icon:"bx bx-bar-chart"}}doRender(){this.$widget=$('\n<div class="similar-notes-widget">\n    <style>    \n    .similar-notes-wrapper {\n        max-height: 200px;\n        overflow: auto;\n        padding: 12px;\n    }\n\n    .similar-notes-wrapper a {\n        display: inline-block;\n        border: 1px dotted var(--main-border-color);\n        border-radius: 20px;\n        background-color: var(--accented-background-color);\n        padding: 0 10px 0 10px;\n        margin: 0 3px 0 3px;\n        max-width: 10em;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        overflow: hidden;\n    }\n    </style>\n\n    <div class="similar-notes-wrapper"></div>\n</div>\n'),this.contentSized(),this.$similarNotesWrapper=this.$widget.find(".similar-notes-wrapper")}async refreshWithNote(t){this.title=this.note.title;const e=await o.Z.get(`similar-notes/${this.noteId}`);if(0===e.length)return void this.$similarNotesWrapper.empty().append("没有找到相似笔记.");const n=e.flatMap((t=>t.notePath));await a.default.getNotes(n,!0);const i=$("<div>");for(const t of e){if(!await a.default.getNote(t.noteId,!0))continue;const e=(await z.Z.createLink(t.notePath.join("/"))).css("font-size",24*(1-1/(1+t.score)));i.append(e)}this.$similarNotesWrapper.empty().append(i)}entitiesReloadedEvent({loadResults:t}){this.note&&this.title!==this.note.title&&(this.rendered=!1,this.refresh())}}class hn extends y{constructor(){super("column"),this.id("right-pane"),this.css("height","100%"),this.collapsible()}isEnabled(){return super.isEnabled()&&this.children.length>0&&!!this.children.find((t=>t.isEnabled()&&t.canBeShown()))}handleEventInChildren(t,e){const n=super.handleEventInChildren(t,e);return["activeContextChanged","noteSwitchedAndActivated","noteSwitched"].includes(t)&&(n?n.then((()=>this.reEvaluateRightPaneVisibilityCommand())):this.reEvaluateRightPaneVisibilityCommand()),n}reEvaluateRightPaneVisibilityCommand(){const t=!this.isHiddenInt(),e=this.isEnabled();t!==e&&(this.toggleInt(e),Fe())}}class pn extends qe{isEnabled(){return super.isEnabled()&&this.note&&"default"===this.noteContext.viewScope.viewMode}constructor(){super(),this.icon("bx-edit-alt").title("编辑笔记").titlePlacement("bottom").onClick((e=>{this.noteContext.viewScope.readOnlyTemporarilyDisabled=!0,t.default.triggerEvent("readOnlyTemporarilyDisabled",{noteContext:this.noteContext}),this.refresh()}))}async refreshWithNote(t){if(t.isProtected&&!H.Z.isProtectedSessionAvailable())this.toggleInt(!1);else{this.toggleInt(!1);const t=this.isVisible();this.toggleInt(await this.noteContext.isReadOnly()),this.isVisible()&&!t&&(this.$widget.addClass("bx-tada bx-lg"),setTimeout((()=>{this.$widget.removeClass("bx-tada bx-lg")}),1700))}await super.refreshWithNote(t)}entitiesReloadedEvent({loadResults:t}){t.getAttributeRows().find((t=>"label"===t.type&&t.name.toLowerCase().includes("readonly")&&T.isAffecting(t,this.note)))&&(this.noteContext.viewScope.readOnlyTemporarilyDisabled=!1,this.refresh())}async noteTypeMimeChangedEvent({noteId:t}){this.isNote(t)&&await this.refresh()}}class un extends B.Z{get name(){return"editedNotes"}isEnabled(){return super.isEnabled()&&this.note.hasOwnedLabel("dateNote")}getTitle(){return{show:this.isEnabled(),activate:(0===this.note.getPromotedDefinitionAttributes().length||!m.Z.is("promotedAttributesOpenInRibbon"))&&m.Z.is("editedNotesOpenInRibbon"),title:"编辑过的笔记",icon:"bx bx-calendar-edit"}}async doRender(){this.$widget=$('\n<div class="edited-notes-widget">\n    <style>\n        .edited-notes-widget {\n            padding: 12px;\n            max-height: 200px;\n            width: 100%;\n            overflow: auto;\n        }\n    </style>\n    \n    <div class="no-edited-notes-found">这天没有编辑过笔记...</div>\n    \n    <div class="edited-notes-list"></div>\n</div>\n'),this.contentSized(),this.$list=this.$widget.find(".edited-notes-list"),this.$noneFound=this.$widget.find(".no-edited-notes-found")}async refreshWithNote(t){let e=await o.Z.get(`edited-notes/${t.getLabelValue("dateNote")}`);if(e=e.filter((e=>e.noteId!==t.noteId)),this.$list.empty(),this.$noneFound.hide(),0===e.length)return void this.$noneFound.show();const n=e.flatMap((t=>t.noteId));await a.default.getNotes(n,!0);for(let t=0;t<e.length;t++){const n=e[t],i=$('<span class="edited-note-line">');if(n.isDeleted){const t=`${n.title} (deleted)`;i.append($("<i>").text(t).attr("title",t))}else i.append(n.notePath?await z.Z.createLink(n.notePath.join("/"),{showNotePath:!0}):$("<span>").text(n.title));t<e.length-1&&i.append(", "),this.$list.append(i)}}}let gn=1;class mn extends B.Z{isEnabled(){return super.isEnabled()&&"mermaid"===this.note?.type&&this.note.isContentAvailable()&&"default"===this.noteContext?.viewScope.viewMode}doRender(){this.$widget=$('<div class="mermaid-widget">\n    <style>\n        .mermaid-widget {\n            flex-grow: 2;\n            overflow: auto;\n            min-height: 200px;\n            border-bottom: 1px solid var(--main-border-color);\n            padding: 20px;\n            margin-bottom: 10px;\n            flex-basis: 0;\n        }\n        \n        .mermaid-render {\n            overflow: auto;\n            height: 100%;\n            text-align: center;\n        }\n        \n        .mermaid-render svg {\n            width: 95%; /* https://github.com/zadam/trilium/issues/4340 */\n        }\n    </style>\n\n    <div class="mermaid-error alert alert-warning">\n        <p><strong>图表无法显示. 请看 <a href="https://mermaid-js.github.io/mermaid/#/flowchart?id=graph">帮助和示例</a>.</strong></p>\n        <p class="error-content"></p>\n    </div>\n\n    <div class="mermaid-render"></div>\n</div>'),this.contentSized(),this.$display=this.$widget.find(".mermaid-render"),this.$errorContainer=this.$widget.find(".mermaid-error"),this.$errorMessage=this.$errorContainer.find(".error-content")}async refreshWithNote(t){this.$errorContainer.hide(),await at.Z.requireLibrary(at.Z.MERMAID);const e=window.getComputedStyle(document.documentElement).getPropertyValue("--mermaid-theme");mermaid.mermaidAPI.initialize({startOnLoad:!1,theme:e.trim(),securityLevel:"antiscript",flow:{useMaxWidth:!1},sequence:{useMaxWidth:!1},gantt:{useMaxWidth:!1},class:{useMaxWidth:!1},state:{useMaxWidth:!1},pie:{useMaxWidth:!0},journey:{useMaxWidth:!1},git:{useMaxWidth:!1}}),this.$display.empty();const n=at.Z.requireLibrary(at.Z.WHEEL_ZOOM);this.$errorContainer.hide();try{const t=await this.renderSvg();if(this.dirtyAttachment){const e={role:"image",title:"mermaid-export.svg",mime:"image/svg+xml",content:t,position:0};o.Z.post(`notes/${this.noteId}/attachments?matchBy=title`,e).then((()=>{this.dirtyAttachment=!1}))}this.$display.html(t),await n,this.$display.attr("id",`mermaid-render-${gn}`),WZoom.create(`#mermaid-render-${gn}`,{type:"html",maxScale:50,speed:1.3,zoomOnClick:!1})}catch(t){this.$errorMessage.text(t.message),this.$errorContainer.show()}}async renderSvg(){gn++;const t=(await this.note.getBlob()).content||"",{svg:e}=await mermaid.mermaidAPI.render(`mermaid-graph-${gn}`,t);return e}async entitiesReloadedEvent({loadResults:t}){t.isNoteContentReloaded(this.noteId)&&(this.dirtyAttachment=!0,await this.refresh())}async exportMermaidEvent({ntxId:t}){if(!this.isNoteContext(t))return;const e=await this.renderSvg();this.download(`${this.note.title}.svg`,e)}download(t,e){const n=document.createElement("a");n.setAttribute("href",`data:image/svg+xml;charset=utf-8,${encodeURIComponent(e)}`),n.setAttribute("download",t),n.style.display="none",document.body.appendChild(n),n.click(),document.body.removeChild(n)}}class bn extends y{constructor(){super("column"),this.css("flex-grow","1").collapsible()}setNoteContextEvent({noteContext:t}){this.noteContext=t,this.refresh()}noteSwitchedAndActivatedEvent(){this.refresh()}noteSwitchedEvent(){this.refresh()}activeContextChangedEvent(){this.refresh()}refresh(){const t=this.isHiddenExt();this.$widget.removeClass(),this.toggleExt(!t),this.$widget.addClass("component note-split");const n=this.noteContext?.note;n&&(this.$widget.toggleClass("full-content-width",["image","mermaid","book","render","canvas","webView"].includes(n.type)||!!n?.isLabelTruthy("fullContentWidth")),this.$widget.addClass(n.getCssClass()),this.$widget.addClass(e.default.getNoteTypeClass(n.type)),this.$widget.addClass(e.default.getMimeTypeClass(n.mime)),this.$widget.toggleClass("protected",n.isProtected))}async entitiesReloadedEvent({loadResults:t}){const e=this.noteContext?.noteId;(t.isNoteReloaded(e)||t.getAttributeRows().find((t=>"label"===t.type&&"cssClass"===t.name&&T.isAffecting(t,this.noteContext?.note))))&&this.refresh()}}class fn extends B.Z{doRender(){this.$widget=$('\n<div class="backlinks-widget">\n    <style>\n        .backlinks-widget {\n            position: relative;\n        }\n    \n        .backlinks-ticker {\n            border-radius: 10px;\n            border-color: var(--main-border-color);\n            background-color: var(--more-accented-background-color);\n            padding: 4px 10px 4px 10px;\n            opacity: 90%;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        .backlinks-count {\n            cursor: pointer;\n        }\n                        \n        .backlinks-items {\n            z-index: 10;\n            position: absolute;\n            top: 50px;\n            right: 10px;\n            width: 400px;\n            border-radius: 10px;\n            background-color: var(--accented-background-color);\n            color: var(--main-text-color);\n            padding: 20px;\n            overflow-y: auto;\n        }\n        \n        .backlink-excerpt {\n            border-left: 2px solid var(--main-border-color);\n            padding-left: 10px;\n            opacity: 80%;\n            font-size: 90%;\n        }\n        \n        .backlink-excerpt .backlink-link { /* the actual backlink */\n            font-weight: bold;\n            background-color: yellow;\n        }\n    </style>\n    \n    <div class="backlinks-ticker">\n        <span class="backlinks-count"></span>\n    </div>   \n    \n    <div class="backlinks-items" style="display: none;"></div>\n</div>\n'),this.$count=this.$widget.find(".backlinks-count"),this.$items=this.$widget.find(".backlinks-items"),this.$ticker=this.$widget.find(".backlinks-ticker"),this.$count.on("click",(()=>{this.$items.toggle(),this.$items.css("max-height",$(window).height()-this.$items.offset().top-10),this.$items.is(":visible")&&this.renderBacklinks()})),this.contentSized()}async refreshWithNote(t){if(this.clearItems(),"default"!==this.noteContext?.viewScope?.viewMode)return void this.toggle(!1);const e=await o.Z.get(`note-map/${this.noteId}/backlink-count`);e&&e.count?(this.toggle(!0),this.$count.text(`${e.count} 个反链`)):this.toggle(!1)}toggle(t){this.$widget.toggleClass("hidden-no-content",!t)}clearItems(){this.$items.empty().hide()}async renderBacklinks(){if(!this.note)return;this.$items.empty();const t=await o.Z.get(`note-map/${this.noteId}/backlinks`);if(t.length){await a.default.getNotes(t.map((t=>t.noteId)));for(const e of t){const t=$("<div>");t.append(await z.Z.createLink(e.noteId,{showNoteIcon:!0,showNotePath:!0,showTooltip:!1})),e.relationName?t.append($("<p>").text(`relation: ${e.relationName}`)):t.append(...e.excerpts),this.$items.append(t)}}}}class wn extends B.Z{isEnabled(){return super.isEnabled()&&"_share"!==this.noteId&&this.note.hasAncestor("_share")}doRender(){this.$widget=$('\n<div class="shared-info-widget alert alert-warning">\n    <style>\n        .shared-info-widget {\n            margin: 10px;\n            contain: none;\n            padding: 10px;\n            font-weight: bold;\n        }\n    </style>\n    \n    <span class="shared-text"></span> <a class="shared-link external"></a>. 需要帮助请访问 <a href="https://github.com/zadam/trilium/wiki/Sharing">wiki</a>.\n</div>'),this.$sharedLink=this.$widget.find(".shared-link"),this.$sharedText=this.$widget.find(".shared-text"),this.contentSized()}async refreshWithNote(t){const e=m.Z.get("syncServerHost");let n;const i=this.getShareId(t);if(e)n=`${e}/share/${i}`,this.$sharedText.text("这个笔记分享在公开地址");else{let t=location.host;t.endsWith("/")&&(t=t.substr(0,t.length-1)),n=`${location.protocol}//${t}${location.pathname}share/${i}`,this.$sharedText.text("这个笔记分享在本地地址")}this.$sharedLink.attr("href",n).text(n)}getShareId(t){return t.hasOwnedLabel("shareRoot")?"":t.getOwnedLabelValue("shareAlias")||t.noteId}entitiesReloadedEvent({loadResults:t}){(t.getAttributeRows().find((t=>t.name.startsWith("_share")&&T.isAffecting(t,this.note)))||t.getBranchRows().find((t=>t.noteId===this.noteId)))&&this.refresh()}}class vn{constructor(t){this.parent=t}async getTextEditor(){return this.parent.noteContext.getTextEditor()}async performFind(t,e,n){const i=await this.getTextEditor(),o=i.model;let s=null,a=0,r=-1;const d=i.plugins.get("FindAndReplaceEditing");if(d.state.clear(o),d.stop(),""!==t){const d={matchCase:e,wholeWords:n};s=i.execute("find",t,d),a=s.results.length;const l=o.document.selection.getLastPosition();for(let t=0;t<s.results.length;++t)if("before"!==s.results.get(t).marker.getStart().compareWith(l)){r=t;break}}if(this.findResult=s,a>0){r=Math.max(0,r);for(let e=0;e<r;++e)i.execute("findNext",t)}return{totalFound:a,currentFound:Math.min(r+1,a)}}async findNext(t,e,n){const i=await this.getTextEditor();t>0?i.execute("findNext"):i.execute("findPrevious")}async findBoxClosed(t,e){const n=await this.getTextEditor();if(t>0){const t=n.model,i=this.findResult.results.get(e).marker.getRange();let o=n.plugins.get("FindAndReplaceEditing");o.state.clear(t),o.stop(),t.change((t=>{t.setSelection(i,0)})),n.editing.view.scrollToTheSelection()}this.findResult=null,n.focus()}}const xn="ck-find-result_selected",yn="ck-find-result";class $n{constructor(t){this.parent=t}async getCodeEditor(){return this.parent.noteContext.getCodeEditor()}async performFind(t,n,i){let o=null,s=0,a=-1;const r=await this.getCodeEditor(),d=r.doc,l=d.getValue();if(null!=this.findResult&&r.operation((()=>{for(let t=0;t<this.findResult.length;++t)this.findResult[t].clear()})),""!==t){t=e.default.escapeRegExp(t);const c=i?"\\b":"",h=new RegExp(c+t+c,"g"+(n?"":"i"));let p=0,u=0,g=null;o=[],r.operation((()=>{for(let t=0;t<l.length&&(!(null==g||g.index<t)||(g=h.exec(l),null!=g));++t){if(t===g.index){let t={line:p,ch:u},e={line:p,ch:u+g[0].length},n=d.markText(t,e,{className:yn});if(o.push(n),-1===a){const e=r.getCursor();(t.line>e.line||t.line===e.line&&t.ch>=e.ch)&&(a=s)}s++}"\n"===l[t]?(p++,u=0):u++}}))}if(this.findResult=o,s>0){a=Math.max(0,a);let t=o[a],e=t.find();r.scrollIntoView(e.to),t.clear(),o[a]=d.markText(e.from,e.to,{className:xn})}return{totalFound:s,currentFound:Math.min(a+1,s)}}async findNext(t,e,n){const i=await this.getCodeEditor(),o=i.doc;let s=this.findResult[e],a=s.find();s.clear(),s=o.markText(a.from,a.to,{className:yn}),this.findResult[e]=s,s=this.findResult[n],a=s.find(),s.clear(),s=o.markText(a.from,a.to,{className:xn}),this.findResult[n]=s,i.scrollIntoView(a.from)}async findBoxClosed(t,e){const n=await this.getCodeEditor();if(t>0){const t=n.doc,i=this.findResult[e].find();t.setSelection(i.from,i.to),n.operation((()=>{for(let t=0;t<this.findResult.length;++t)this.findResult[t].clear()}))}this.findResult=null,n.focus()}}const In="ck-find-result_selected",Cn="ck-find-result";class Nn{constructor(t){this.parent=t,this.currentIndex=0,this.$results=null}async performFind(t,n,i){await at.Z.requireLibrary(at.Z.MARKJS);const o=await this.parent.noteContext.getContentElement(),s=i?"\\b":"",a=new RegExp(s+e.default.escapeRegExp(t)+s,n?"g":"gi");return new Promise((t=>{o.unmark({done:()=>{o.markRegExp(a,{element:"span",className:Cn,separateWordSearch:!1,caseSensitive:n,done:async()=>{this.$results=o.find(`.${Cn}`),this.currentIndex=0,await this.jumpTo(),t({totalFound:this.$results.length,currentFound:Math.min(1,this.$results.length)})}})}})}))}async findNext(t,e,n){this.$results.length&&(this.currentIndex+=t,this.currentIndex<0&&(this.currentIndex=this.$results.length-1),this.currentIndex>this.$results.length-1&&(this.currentIndex=0),await this.jumpTo())}async findBoxClosed(t,e){(await this.parent.noteContext.getContentElement()).unmark()}async jumpTo(){if(this.$results.length){const e=100,n=this.$results.eq(this.currentIndex);if(this.$results.removeClass(In),n.length){n.addClass(In);const i=n.position().top-e,o=await this.parent.noteContext.getContentElement();t.default.getComponentByEl(o).triggerCommand("scrollContainerTo",{position:i})}}}}class kn extends B.Z{constructor(){super(),this.searchTerm=null,this.textHandler=new vn(this),this.codeHandler=new $n(this),this.htmlHandler=new Nn(this)}async noteSwitched(){await super.noteSwitched(),await this.closeSearch()}doRender(){return this.$widget=$('\n<div style="contain: none;">\n    <style>\n        .find-widget-box {\n            padding: 10px;\n            border-top: 1px solid var(--main-border-color); \n            align-items: center;\n        }\n        \n        .find-widget-box > * {\n            margin-right: 15px;\n        }\n        \n        .find-widget-box {\n            display: flex;\n        }\n        \n        .find-widget-found-wrapper {\n            font-weight: bold;\n        }\n        \n        .find-widget-search-term-input-group {\n            max-width: 300px;\n        }\n        \n        .find-widget-spacer {\n            flex-grow: 1;\n        }\n    </style>\n\n    <div class="find-widget-box">\n        <div class="input-group find-widget-search-term-input-group">\n            <input type="text" class="form-control find-widget-search-term-input">\n            <div class="input-group-append">\n                <button class="btn btn-outline-secondary bx bxs-chevron-up find-widget-previous-button" type="button"></button>\n                <button class="btn btn-outline-secondary bx bxs-chevron-down find-widget-next-button" type="button"></button>\n            </div>\n        </div>\n        \n        <div class="form-check">\n            <label tabIndex="-1" class="form-check-label">\n                <input type="checkbox" class="form-check-input find-widget-case-sensitive-checkbox"> \n                区分大小写\n            </label>\n        </div>\n\n        <div class="form-check">\n            <label tabIndex="-1" class="form-check-label">\n                <input type="checkbox" class="form-check-input find-widget-match-words-checkbox"> \n                全字匹配\n            </label>\n        </div>\n        \n        <div class="find-widget-found-wrapper">\n            <span class="find-widget-current-found">0</span>\n            /\n            <span class="find-widget-total-found">0</span>\n        </div>\n        \n        <div class="find-widget-spacer"></div>\n        \n        <div class="find-widget-close-button"><button class="btn icon-action bx bx-x"></button></div>\n    </div>\n</div>'),this.$findBox=this.$widget.find(".find-widget-box"),this.$findBox.hide(),this.$input=this.$widget.find(".find-widget-search-term-input"),this.$currentFound=this.$widget.find(".find-widget-current-found"),this.$totalFound=this.$widget.find(".find-widget-total-found"),this.$caseSensitiveCheckbox=this.$widget.find(".find-widget-case-sensitive-checkbox"),this.$caseSensitiveCheckbox.change((()=>this.performFind())),this.$matchWordsCheckbox=this.$widget.find(".find-widget-match-words-checkbox"),this.$matchWordsCheckbox.change((()=>this.performFind())),this.$previousButton=this.$widget.find(".find-widget-previous-button"),this.$previousButton.on("click",(()=>this.findNext(-1))),this.$nextButton=this.$widget.find(".find-widget-next-button"),this.$nextButton.on("click",(()=>this.findNext(1))),this.$closeButton=this.$widget.find(".find-widget-close-button"),this.$closeButton.on("click",(()=>this.closeSearch())),this.$input.keydown((async t=>{if(!t.metaKey&&!t.ctrlKey||"F"!==t.key&&"f"!==t.key){if("Enter"===t.key||"F3"===t.key)return await this.findNext(t?.shiftKey?-1:1),t.preventDefault(),!1}else this.$input.select()})),this.$findBox.keydown((async t=>{"Escape"===t.key&&await this.closeSearch()})),this.$input.on("input",(()=>this.startSearch())),this.$widget}async findInTextEvent(){if(!this.isActiveNoteContext())return;if(!["text","code","render"].includes(this.note.type))return;this.handler=await this.getHandler();const t=window.getSelection().toString()||"";this.$findBox.show(),this.$input.focus(),this.$findBox.is(":visible")?(t&&this.$input.val(t),this.$input.val()&&await this.performFind(),this.$input.select()):(this.$totalFound.text(0),this.$currentFound.text(0),this.$input.val(t),t&&(this.$input.select(),await this.performFind()))}async getHandler(){return"render"===this.note.type||await this.noteContext.isReadOnly()?this.htmlHandler:"code"===this.note.type?this.codeHandler:this.textHandler}startSearch(){clearTimeout(this.timeoutId),this.timeoutId=setTimeout((async()=>{this.timeoutId=null,await this.performFind()}),200)}async findNext(t){this.$input.val();const e=parseInt(this.$totalFound.text()),n=parseInt(this.$currentFound.text())-1;if(e>0){let i=n+t;i>e-1?i=0:i<0&&(i=e-1),this.$currentFound.text(i+1),await this.handler.findNext(t,n,i)}}async performFind(){const t=this.$input.val(),e=this.$caseSensitiveCheckbox.prop("checked"),n=this.$matchWordsCheckbox.prop("checked"),{totalFound:i,currentFound:o}=await this.handler.performFind(t,e,n);this.$totalFound.text(i),this.$currentFound.text(o),this.searchTerm=t}async closeSearch(){if(this.$findBox.is(":visible")){this.$findBox.hide();const t=parseInt(this.$totalFound.text()),e=parseInt(this.$currentFound.text())-1;this.searchTerm=null,await this.handler.findBoxClosed(t,e)}}isEnabled(){return super.isEnabled()&&["text","code","render"].includes(this.note.type)}}var Tn=__webpack_require__(1698);class Sn extends Tn.Z{get widgetTitle(){return"目录"}get widgetButtons(){return[(new qe).icon("bx-slider").title("Options").titlePlacement("left").onClick((()=>t.default.tabManager.openContextWithNote("_optionsTextNotes",{activate:!0}))).class("icon-action"),(new qe).icon("bx-x").titlePlacement("left").onClick((t=>t.triggerCommand("closeToc"))).class("icon-action")]}isEnabled(){return super.isEnabled()&&"text"===this.note.type&&!this.noteContext.viewScope.tocTemporarilyHidden&&"default"===this.noteContext.viewScope.viewMode}async doRenderBody(){this.$body.empty().append($('<div class="toc-widget">\n    <style>\n        .toc-widget {\n            padding: 10px;\n            contain: none; \n            overflow: auto;\n            position: relative;\n        }\n        \n        .toc ol {\n            padding-left: 25px;\n        }\n        \n        .toc > ol {\n            padding-left: 20px;\n        }\n        \n        .toc li {\n            cursor: pointer;\n            text-align: justify;\n            text-justify: distribute;\n            word-wrap: break-word;\n            hyphens: auto;\n        }\n        \n        .toc li:hover {\n            font-weight: bold;\n        }\n    </style>\n\n    <span class="toc"></span>\n</div>')),this.$toc=this.$body.find(".toc")}async refreshWithNote(t){this.toggleInt(!!this.noteContext.viewScope.tocPreviousVisible);const e=t.getLabel("toc");if("hide"===e?.value)return this.toggleInt(!1),void this.triggerCommand("reEvaluateRightPaneVisibility");let n="",i=0;if("text"===this.note.type){const{content:e}=await t.getBlob();({$toc:n,headingCount:i}=await this.getToc(e))}this.$toc.html(n),["","show"].includes(e?.value)||i>=m.Z.getInt("minTocHeadings")?(this.toggleInt(!0),this.noteContext.viewScope.tocPreviousVisible=!0):(this.toggleInt(!1),this.noteContext.viewScope.tocPreviousVisible=!1),this.triggerCommand("reEvaluateRightPaneVisibility")}getToc(t){const e=/<h(\d+)[^>]*>(.*?)<\/h\1>/gi;let n=$("<ol>"),i=2;const o=[n];let s;for(let n=null,a=0;null!==(n=e.exec(t));a++){const t=n[1],e=t-i;if(e>0)for(let t=0;t<e;t++){const t=$("<ol>");o[o.length-1].append(t),o.push(t)}else if(e<0)for(let t=0;t<-e&&o.length>1;++t)o.pop();i=t;const r=$("<div>").html(n[2]).text(),d=$("<li>").text(r);d.on("click",(()=>this.jumpToHeading(a))),o[o.length-1].append(d),s=a}return n=this.pullLeft(n),{$toc:n,headingCount:s}}pullLeft(t){for(;1===t.children().length;){const e=t.children(":first");if("OL"!==e[0].tagName)break;t=e}return t}async jumpToHeading(t){let e;if(await this.noteContext.isReadOnly())e=await this.noteContext.getContentElement();else{const t=await this.noteContext.getTextEditor();e=$(t.sourceElement)}const n=e?.find(":header:not(section.include-note :header)")?.[t];n?.scrollIntoView({behavior:"smooth"})}async closeTocCommand(){this.noteContext.viewScope.tocTemporarilyHidden=!0,await this.refresh(),this.triggerCommand("reEvaluateRightPaneVisibility")}async entitiesReloadedEvent({loadResults:t}){(t.isNoteContentReloaded(this.noteId)||t.getAttributeRows().find((t=>"label"===t.type&&(t.name.toLowerCase().includes("readonly")||"toc"===t.name)&&T.isAffecting(t,this.note))))&&await this.refresh()}}class En extends Tn.Z{get widgetTitle(){return"高亮列表"}get widgetButtons(){return[(new qe).icon("bx-slider").title("选项").titlePlacement("left").onClick((()=>t.default.tabManager.openContextWithNote("_optionsTextNotes",{activate:!0}))).class("icon-action"),(new qe).icon("bx-x").titlePlacement("left").onClick((t=>t.triggerCommand("closeHlt"))).class("icon-action")]}isEnabled(){return super.isEnabled()&&"text"===this.note.type&&!this.noteContext.viewScope.highlightsListTemporarilyHidden&&"default"===this.noteContext.viewScope.viewMode}async doRenderBody(){this.$body.empty().append($('<div class="highlights-list-widget">\n    <style>\n        .highlights-list-widget {\n            padding: 10px;\n            contain: none; \n            overflow: auto;\n            position: relative;\n        }\n        \n        .highlights-list > ol {\n            padding-left: 20px;\n        }\n        \n        .highlights-list li {\n            cursor: pointer;\n            margin-bottom: 3px;\n            text-align: justify;\n            text-justify: distribute;\n            word-wrap: break-word;\n            hyphens: auto;\n        }\n        \n        .highlights-list li:hover {\n            font-weight: bold;\n        }\n    </style>\n\n    <span class="highlights-list"></span>\n</div>')),this.$highlightsList=this.$body.find(".highlights-list")}async refreshWithNote(t){this.noteContext.viewScope.highlightsListPreviousVisible?this.toggleInt(!0):this.toggleInt(!1);const e=JSON.parse(m.Z.get("highlightsList"));if(t.isLabelTruthy("hideHighlightWidget")||!e.length)return this.toggleInt(!1),void this.triggerCommand("reEvaluateRightPaneVisibility");let n="",i=-1;if("text"===this.note.type){const{content:o}=await t.getNoteComplement();({$highlightsList:n,hlLiCount:i}=this.getHighlightList(o,e))}this.$highlightsList.empty().append(n),i>0?(this.toggleInt(!0),this.noteContext.viewScope.highlightsListPreviousVisible=!0):(this.toggleInt(!1),this.noteContext.viewScope.highlightsListPreviousVisible=!1),this.triggerCommand("reEvaluateRightPaneVisibility")}getHighlightList(t,e){let n="",i="";e.includes("bgColor")&&(n+=',span[style*="background-color"]:not(section.include-note span[style*="background-color"])',i+=`|${/<span[^>]*style\s*=\s*[^>]*background-color:[^>]*?>[\s\S]*?<\/span>/gi.source}`),e.includes("color")&&(n+=',span[style*="color"]:not(section.include-note span[style*="color"])',i+=`|${/<span[^>]*style\s*=\s*[^>]*[^-]color:[^>]*?>[\s\S]*?<\/span>/gi.source}`),e.includes("italic")&&(n+=",i:not(section.include-note i)",i+=`|${/<i>[\s\S]*?<\/i>/gi.source}`),e.includes("bold")&&(n+=",strong:not(section.include-note strong)",i+=`|${/<strong>[\s\S]*?<\/strong>/gi.source}`),e.includes("underline")&&(n+=",u:not(section.include-note u)",i+=`|${/<u>[\s\S]*?<\/u>/g.source}`),n=n.substring(1),i="("+i.substring(1)+")";const o=new RegExp(i,"gi"),s=$("<ol>");let a=-1,r=0;for(let e=null,i=0;null!==(e=o.exec(t));i++){const t=e[0],d=e.index,l=o.lastIndex;if(-1!==a&&d===a)s.children().last().append(t);else{if(!$(t).text().trim())continue;s.append($("<li>").html(t).on("click",(()=>this.jumpToHighlightsList(n,i)))),r++}a=l}return{$highlightsList:s,hlLiCount:r}}async jumpToHighlightsList(t,e){let n;if(await this.noteContext.isReadOnly())n=(await this.noteContext.getContentElement()).find(t).filter((function(){if(t.indexOf("color")>=0&&t.indexOf("background-color")<0){let t=this.style.color;return!("SPAN"===$(this).prop("tagName")&&""===t)}return!0})).filter((function(){return 0===$(this).parent(t).length&&0===$(this).parent().parent(t).length&&0===$(this).parent().parent().parent(t).length&&0===$(this).parent().parent().parent().parent(t).length}));else{const e=await this.noteContext.getTextEditor();n=$(e.editing.view.domRoots.values().next().value).find(t).filter((function(){if(t.indexOf("color")>=0&&t.indexOf("background-color")<0){let t=this.style.color;return!("SPAN"===$(this).prop("tagName")&&""===t)}return!0})).filter((function(){return 0===$(this).parent(t).length&&0===$(this).parent().parent(t).length&&0===$(this).parent().parent().parent(t).length&&0===$(this).parent().parent().parent().parent(t).length}))}n[e].scrollIntoView({behavior:"smooth",block:"center"})}async closeHltCommand(){this.noteContext.viewScope.highlightsListTemporarilyHidden=!0,await this.refresh(),this.triggerCommand("reEvaluateRightPaneVisibility")}async entitiesReloadedEvent({loadResults:t}){(t.isNoteContentReloaded(this.noteId)||t.getAttributeRows().find((t=>"label"===t.type&&(t.name.toLowerCase().includes("readonly")||"hideHighlightWidget"===t.name)&&T.isAffecting(t,this.note))))&&await this.refresh()}}class An extends v.Z{doRender(){this.$widget=$('\n<div class="bulk-actions-dialog modal mx-auto" tabindex="-1" role="dialog">\n    <style>\n        .bulk-actions-dialog .modal-body h4:not(:first-child) {\n            margin-top: 20px;\n        }\n    \n        .bulk-actions-dialog .bulk-available-action-list button {\n            padding: 2px 7px;\n            margin-right: 10px;\n            margin-bottom: 5px;\n        }\n    \n        .bulk-actions-dialog .bulk-existing-action-list {\n            width: 100%;\n        }\n    \n        .bulk-actions-dialog .bulk-existing-action-list td {\n            padding: 7px;\n        }\n    \n        .bulk-actions-dialog .bulk-existing-action-list .button-column {\n            /* minimal width so that table remains static sized and most space remains for middle column with settings */\n            width: 50px;\n            white-space: nowrap;\n            text-align: right;\n        }\n    </style>\n\n    <div class="modal-dialog modal-xl" role="document">\n        <div class="modal-content">\n            <div class="modal-header">\n                <h5 class="modal-title mr-auto">批量动作</h5>\n\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="margin-left: 0 !important;">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n            </div>\n            <div class="modal-body">\n                <h4>受影响的笔记:<span class="affected-note-count">0</span></h4>\n\n                <div class="form-check">\n                    <label class="form-check-label">\n                        <input class="include-descendants form-check-input" type="checkbox" value="">\n                        包括所选笔记的子笔记\n                    </label>\n                </div>\n\n                <h4>可用动作</h4>\n\n                <table class="bulk-available-action-list"></table>\n\n                <h4>选择的动作</h4>\n\n                <table class="bulk-existing-action-list"></table>\n            </div>\n            <div class="modal-footer">\n                <button type="submit" class="execute-bulk-actions btn btn-primary">执行批量动作</button>\n            </div>\n        </div>\n    </div>\n</div>'),this.$includeDescendants=this.$widget.find(".include-descendants"),this.$includeDescendants.on("change",(()=>this.refresh())),this.$affectedNoteCount=this.$widget.find(".affected-note-count"),this.$availableActionList=this.$widget.find(".bulk-available-action-list"),this.$existingActionList=this.$widget.find(".bulk-existing-action-list"),this.$widget.on("click","[data-action-add]",(async t=>{const e=$(t.target).attr("data-action-add");await me("_bulkAction",e),await this.refresh()})),this.$executeButton=this.$widget.find(".execute-bulk-actions"),this.$executeButton.on("click",(async()=>{await o.Z.post("bulk-action/execute",{noteIds:this.selectedOrActiveNoteIds,includeDescendants:this.$includeDescendants.is(":checked")}),O.default.showMessage("批量动作已成功执行.",3e3),e.default.closeActiveDialog()}))}async refresh(){this.renderAvailableActions();const{affectedNoteCount:t}=await o.Z.post("bulk-action/affected-notes",{noteIds:this.selectedOrActiveNoteIds,includeDescendants:this.$includeDescendants.is(":checked")});this.$affectedNoteCount.text(t);const e=await a.default.getNote("_bulkAction"),n=be(e);this.$existingActionList.empty(),n.length>0?this.$existingActionList.append(...n.map((t=>t.render()))):this.$existingActionList.append($("<p>还没好 ... 点击上方按钮添加动作.</p>"))}renderAvailableActions(){this.$availableActionList.empty();for(const t of fe){const e=$("<td>"),n=$("<tr>").append($("<td>").text(`${t.title}: `)).append(e);for(const n of t.actions)e.append($('<button class="btn btn-sm">').attr("data-action-add",n.actionName).text(n.actionTitle));this.$availableActionList.append(n)}}entitiesReloadedEvent({loadResults:t}){t.getAttributeRows().find((t=>"label"===t.type&&"action"===t.name&&"_bulkAction"===t.noteId&&t.isDeleted))&&this.selectedOrActiveNoteIds&&this.$widget.is(":visible")&&this.refresh()}async openBulkActionsDialogEvent({selectedOrActiveNoteIds:t}){this.selectedOrActiveNoteIds=t,this.$includeDescendants.prop("checked",!1),await this.refresh(),e.default.openDialog(this.$widget)}}class Rn extends v.Z{doRender(){this.$widget=$('\n<div class="about-dialog modal fade mx-auto" tabindex="-1" role="dialog">\n    <div class="modal-dialog modal-lg" role="document">\n        <div class="modal-content">\n            <div class="modal-header">\n                <h5 class="modal-title mr-auto">关于 Trilium Notes</h5>\n\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="margin-left: 0;">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n            </div>\n            <div class="modal-body">\n                <table class="table table-borderless">\n                    <tr>\n                        <th>项目主页</th>\n                        <td><a href="https://github.com/zadam/trilium" class="external">https://github.com/zadam/trilium</a></td>\n                    </tr>\n                    <tr>\n                        <th>应用版本:</th>\n                        <td class="app-version"></td>\n                    </tr>\n                    <tr>\n                        <th>数据库版本:</th>\n                        <td class="db-version"></td>\n                    </tr>\n                    <tr>\n                        <th>同步版本:</th>\n                        <td class="sync-version"></td>\n                    </tr>\n                    <tr>\n                        <th>编译日期:</th>\n                        <td class="build-date"></td>\n                    </tr>\n\n                    <tr>\n                        <th>编译版本:</th>\n                        <td><a href="" class="build-revision external" target="_blank"></a></td>\n                    </tr>\n\n                    <tr>\n                        <th>数据目录:</th>\n                        <td class="data-directory"></td>\n                    </tr>\n\n                    <tr>\n                        <th>翻译者:</th>\n                        <td><a href="https://github.com/Nriver/trilium-translation" class="external">https://github.com/Nriver/trilium-translation</a></td>\n                    </tr>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>'),this.$appVersion=this.$widget.find(".app-version"),this.$dbVersion=this.$widget.find(".db-version"),this.$syncVersion=this.$widget.find(".sync-version"),this.$buildDate=this.$widget.find(".build-date"),this.$buildRevision=this.$widget.find(".build-revision"),this.$dataDirectory=this.$widget.find(".data-directory")}async refresh(){const t=await o.Z.get("app-info");this.$appVersion.text(t.appVersion),this.$dbVersion.text(t.dbVersion),this.$syncVersion.text(t.syncVersion),this.$buildDate.text(t.buildDate),this.$buildRevision.text(t.buildRevision),this.$buildRevision.attr("href",`https://github.com/zadam/trilium/commit/${t.buildRevision}`),this.$dataDirectory.text(t.dataDirectory)}async openAboutDialogEvent(){await this.refresh(),e.default.openDialog(this.$widget)}}class Pn extends v.Z{doRender(){this.$widget=$('\n<div class="help-dialog modal" tabindex="-1" role="dialog">\n    <div class="modal-dialog" role="document" style="min-width: 100%; height: 100%; margin: 0;">\n        <div class="modal-content" style="height: auto;">\n            <div class="modal-header">\n                <h5 class="modal-title mr-auto">帮助 (完整<a class="external" href="https://github.com/zadam/trilium/wiki">在线文档</a>)</h5>\n\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n            </div>\n            <div class="modal-body" style="overflow: auto; height: calc(100vh - 70px);">\n                <div class="card-columns help-cards">\n                    <div class="card">\n                        <div class="card-body">\n                            <h5 class="card-title">笔记导航</h5>\n\n                            <p class="card-text">\n                                <ul>\n                                    <li><kbd>上</kbd>, <kbd>下</kbd>-在笔记列表中向上/向下</li>\n                                    <li><kbd>左</kbd>, <kbd>右</kbd> - 折叠/展开节点</li>\n                                    <li><kbd data-command="backInNoteHistory">not set</kbd>, <kbd data-command="forwardInNoteHistory">not set</kbd> - 历史浏览记录后退/前进</li>\n                                    <li><kbd data-command="jumpToNote">not set</kbd>- 显示<a class="external" href="https://github.com/zadam/trilium/wiki/Note-navigation#jump-to-note">"跳转到"对话框</a></li>\n                                    <li><kbd data-command="scrollToActiveNote">not set</kbd> - 滚动到当前笔记</li>\n                                    <li><kbd>退格键</kbd> - 跳转到父级笔记</li>\n                                    <li><kbd data-command="collapseTree">not set</kbd> - 折叠整个笔记树</li>\n                                    <li><kbd data-command="collapseSubtree">not set</kbd> - 折叠子树</li>\n                                </ul>\n                            </p>\n                        </div>\n                    </div>\n\n                    <div class="card">\n                        <div class="card-body">\n                            <h5 class="card-title">标签快捷方式</h5>\n\n                            <p class="card-text">\n                            <ul>\n                                <li><kbd>CTRL+鼠标左键</kbd>(或单击鼠标中键)在新标签页中打开笔记链接</li>\n                            </ul>\n\n                            仅桌面客户端有效 (electron 编译版):\n                            <ul>\n                                <li><kbd data-command="openNewTab">not set</kbd>打开空白标签</li>\n                                <li><kbd data-command="closeActiveTab">not set</kbd>关闭活动标签</li>\n                                <li><kbd data-command="activateNextTab">not set</kbd>激活下一个标签</li>\n                                <li><kbd data-command="activatePreviousTab">not set</kbd>激活上一个标签</li>\n                            </ul>\n                            </p>\n                        </div>\n                    </div>\n\n                    <div class="card">\n                        <div class="card-body">\n                            <h5 class="card-title">创建笔记</h5>\n\n                            <p class="card-text">\n                                <ul>\n                                    <li><kbd data-command="createNoteAfter">not set</kbd>- 在当前笔记后创建新笔记</li>\n                                    <li><kbd data-command="createNoteInto">not set</kbd>-在当前笔记中创建新的子笔记</li>\n                                    <li><kbd data-command="editBranchPrefix">not set</kbd> - 编辑活跃笔记的 <a class="external" href="https://github.com/zadam/trilium/wiki/Tree concepts#prefix">前缀</a></li>\n                                </ul>\n                            </p>\n                        </div>\n                    </div>\n\n                    <div class="card">\n                        <div class="card-body">\n                            <h5 class="card-title">移动/克隆笔记</h5>\n\n                            <p class="card-text">\n                                <ul>\n                                    <li><kbd data-command="moveNoteUp">not set</kbd>, <kbd data-command="moveNoteDown">not set</kbd> - 在笔记列表中向上/向下移动笔记</li>\n                                    <li><kbd data-command="moveNoteUpInHierarchy">not set</kbd>, <kbd data-command="moveNoteDownInHierarchy">not set</kbd> - 在层次结构中向上移动笔记</li>\n                                    <li><kbd data-command="addNoteAboveToSelection">not set</kbd>, <kbd data-command="addNoteBelowToSelection">not set</kbd> - 多选上方/下方笔记</li>\n                                    <li><kbd data-command="selectAllNotesInParent">not set</kbd> - 选择当前级别的所有笔记</li>\n                                    <li><kbd>Shift+鼠标左键</kbd> - 选择笔记</li>\n                                    <li><kbd data-command="copyNotesToClipboard">not set</kbd> - 将活动笔记(或当前选择)复制到剪贴板(用于 <a class="external" href="https://github.com/zadam/trilium/wiki/Cloning notes">克隆</a>)</li>\n                                    <li><kbd data-command="cutNotesToClipboard">not set</kbd> - 将当前(或当前选择)笔记剪切到剪贴板中(用于移动笔记)</li>\n                                    <li><kbd data-command="pasteNotesFromClipboard">not set</kbd> - 将笔记作为子笔记粘贴到活动笔记中(可以是移动还是克隆, 具体取决于它是被复制还是剪切到剪贴板中)</li>\n                                    <li><kbd data-command="deleteNotes">not set</kbd> - 删除笔记/子树</li>\n                                </ul>\n                            </p>\n                        </div>\n                    </div>\n\n                    <div class="card">\n                        <div class="card-body">\n                            <h5 class="card-title">编辑笔记</h5>\n\n                            <p class="card-text">\n                                <ul>\n                                    <li><kbd data-command="editNoteTitle">not set</kbd> 从笔记树切换到笔记标题, 或者从笔记标题切换到笔记内容.\n                                        <kbd data-command="scrollToActiveNote">not set</kbd>将从编辑器切换回树状窗格.</li>\n                                    <li><kbd>Ctrl+K</kbd> - 创建/编辑外部链接</li>\n                                    <li><kbd data-command="addLinkToText">not set</kbd> - 创建内部链接</li>\n                                    <li><kbd data-command="followLinkUnderCursor">not set</kbd> - 跟随链接</li>\n                                    <li><kbd data-command="insertDateTimeToText">not set</kbd> - 在光标位置插入当前日期和时间</li>\n                                    <li><kbd data-command="scrollToActiveNote">not set</kbd> - 跳到树状窗格并滚动到活动笔记</li>\n                                </ul>\n                            </p>\n                        </div>\n                    </div>\n\n                    <div class="card">\n                        <div class="card-body">\n                            <h5 class="card-title"><a class="external" href="https://github.com/zadam/trilium/wiki/Text-notes#autoformat">像Markdown一样的自动格式化</a></h5>\n\n                            <p class="card-text">\n                                <ul>\n                                    <li><kbd>##</kbd>, <kbd>###</kbd>, <kbd>####</kbd>等, 然后加上标题空间</li>\n                                    <li><kbd>*</kbd>或者<kbd>-</kbd>后面接着项目符号列表的空位</li>\n                                    <li><kbd>1.</kbd>或者<kbd>1)</kbd>后面接着编号列表的空位</li>\n                                    <li>行首<kbd>&gt;</kbd>后面接着引用块的空位</li>\n                                </ul>\n                            </p>\n                        </div>\n                    </div>\n\n                    <div class="card">\n                        <div class="card-body">\n                            <h5 class="card-title">故障排除</h5>\n\n                            <p class="card-text">\n                                <ul>\n                                    <li><kbd data-command="reloadFrontendApp">not set</kbd> - 重新加载Trilium前端</li>\n                                    <li><kbd data-command="openDevTools">not set</kbd> - 显示开发人员工具</li>\n                                    <li><kbd data-command="showSQLConsole">not set</kbd> - 显示SQL控制台</li>\n                                </ul>\n                            </p>\n                        </div>\n                    </div>\n\n                    <div class="card">\n                        <div class="card-body">\n                            <h5 class="card-title">其他</h5>\n\n                            <p class="card-text">\n                                <ul>\n                                    <li><kbd data-command="quickSearch">not set</kbd> - 定位到快速搜索</li>\n                                    <li><kbd data-command="findInText">not set</kbd> - 页内搜索</li>\n                                </ul>\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>')}showHelpEvent(){e.default.openDialog(this.$widget)}}class _n extends v.Z{doRender(){this.$widget=$('\n<div class="recent-changes-dialog modal fade mx-auto" tabindex="-1" role="dialog">\n    <div class="modal-dialog modal-lg modal-dialog-scrollable" role="document">\n        <div class="modal-content">\n            <div class="modal-header">\n                <h5 class="modal-title mr-auto">最近修改</h5>\n                \n                <button class="erase-deleted-notes-now-button btn btn-sm" style="padding: 0 10px">\n                    清理已删除的笔记</button>\n                \n                <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="margin-left: 0 !important;">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n            </div>\n            <div class="modal-body">\n                <div class="recent-changes-content"></div>\n            </div>\n        </div>\n    </div>\n</div>'),this.$content=this.$widget.find(".recent-changes-content"),this.$eraseDeletedNotesNow=this.$widget.find(".erase-deleted-notes-now-button"),this.$eraseDeletedNotesNow.on("click",(()=>{o.Z.post("notes/erase-deleted-notes-now").then((()=>{this.refresh(),O.default.showMessage("删除的笔记已被清理.")}))}))}async showRecentChangesEvent({ancestorNoteId:t}){this.ancestorNoteId=t,await this.refresh(),e.default.openDialog(this.$widget)}async refresh(){this.ancestorNoteId||(this.ancestorNoteId=M.Z.getHoistedNoteId());const e=await o.Z.get(`recent-changes/${this.ancestorNoteId}`);await a.default.getNotes(e.map((t=>t.noteId)),!0),this.$content.empty(),0===e.length&&this.$content.append("还没有修改过...");const n=this.groupByDate(e);for(const[e,i]of n){const n=$("<ul>"),s=$("<div>").append($("<b>").text(e)).append(n);for(const e of i){const i=e.date.substr(11,5);let s;if(e.current_isDeleted){if(s=$("<span>").text(e.current_title),e.canBeUndeleted){const n=$('<a href="javascript:">').text("撤销删除").on("click",(async()=>{await U.Z.confirm("确定要撤销删除这个笔记和它的子笔记吗?")&&(await o.Z.put(`notes/${e.noteId}/undelete`),this.$widget.modal("hide"),await D.Z.waitForMaxKnownEntityChangeId(),t.default.tabManager.getActiveContext().setNote(e.noteId))}));s.append(" (").append(n).append(")")}}else{const t=await a.default.getNote(e.noteId),n=t.getBestNotePathString();s=n?await z.Z.createLink(n,{title:e.title,showNotePath:!0}):$("<span>").text(t.title)}n.append($("<li>").append($("<span>").text(i).attr("title",e.date)).append(" - ").append(s))}this.$content.append(s)}}groupByDate(t){const e=new Map;for(const n of t){const t=n.date.substr(0,10);e.has(t)||e.set(t,[]),e.get(t).push(n)}return e}}let Mn;class Zn extends v.Z{doRender(){this.$widget=$('<div class="branch-prefix-dialog modal fade mx-auto" tabindex="-1" role="dialog">\n    <div class="modal-dialog modal-lg" role="document">\n        <form class="branch-prefix-form">\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h5 class="modal-title mr-auto">编辑分支前缀</h5>\n\n                    <button class="help-button" type="button" data-help-page="Tree-concepts#prefix" title="有关树前缀的帮助">?</button>\n\n                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="margin-left: 0;">\n                        <span aria-hidden="true">&times;</span>\n                    </button>\n                </div>\n                <div class="modal-body">\n                    <div class="form-group">\n                        <label for="branch-prefix-input">前缀: </label> &nbsp;\n\n                        <div class="input-group">\n                            <input class="branch-prefix-input form-control">\n\n                            <div class="input-group-append">\n                                <div class="branch-prefix-note-title input-group-text"></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class="modal-footer">\n                    <button class="btn btn-primary btn-sm">保存</button>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>'),this.$form=this.$widget.find(".branch-prefix-form"),this.$treePrefixInput=this.$widget.find(".branch-prefix-input"),this.$noteTitle=this.$widget.find(".branch-prefix-note-title"),this.$form.on("submit",(()=>(this.savePrefix(),!1))),this.$widget.on("shown.bs.modal",(()=>this.$treePrefixInput.trigger("focus")))}async refresh(t){const{noteId:e,parentNoteId:n}=Z.Z.getNoteIdAndParentIdFromUrl(t);if(!e||!n)return;Mn=await a.default.getBranchId(n,e);const i=a.default.getBranch(Mn);if(!i||"root"===i.noteId)return;if("search"===(await a.default.getNote(i.parentNoteId)).type)return;this.$treePrefixInput.val(i.prefix);const o=await Z.Z.getNoteTitle(e);this.$noteTitle.text(` - ${o}`)}async editBranchPrefixEvent(){const n=t.default.tabManager.getActiveContextNotePath();await this.refresh(n),e.default.openDialog(this.$widget)}async savePrefix(){const t=this.$treePrefixInput.val();await o.Z.put(`branches/${Mn}/set-prefix`,{prefix:t}),this.$widget.modal("hide"),O.default.showMessage("分支前缀已保存.")}}class Ln extends v.Z{doRender(){this.$widget=$('<div class="sort-child-notes-dialog modal mx-auto" tabindex="-1" role="dialog">\n    <div class="modal-dialog modal-lg" style="max-width: 500px" role="document">\n        <div class="modal-content">\n            <div class="modal-header">\n                <h5 class="modal-title mr-auto">根据...排列子笔记</h5>\n\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="margin-left: 0 !important;">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n            </div>\n            <form class="sort-child-notes-form">\n                <div class="modal-body">\n                    <h5>排序标准</h5>\n\n                    <div class="form-check">\n                        <label class="form-check-label">\n                           <input class="form-check-input" type="radio" name="sort-by" value="title" checked>\n                            标题\n                        </label>\n                    </div>\n\n                    <div class="form-check">\n                        <label class="form-check-label">\n                            <input class="form-check-input" type="radio" name="sort-by" value="dateCreated">\n                            创建日期\n                        </label>\n                    </div>\n\n                    <div class="form-check">\n                        <label class="form-check-label">\n                            <input class="form-check-input" type="radio" name="sort-by" value="dateModified">\n                            修改日期\n                        </label>\n                    </div>\n\n                    <br/>\n\n                    <h5>排列顺序</h5>\n\n                    <div class="form-check">\n                        <label class="form-check-label">\n                            <input class="form-check-input" type="radio" name="sort-direction" value="asc" checked>\n                            升序\n                        </label>\n                    </div>\n\n                    <div class="form-check">\n                        <label class="form-check-label">\n                            <input class="form-check-input" type="radio" name="sort-direction" value="desc">\n                            降序\n                        </label>\n                    </div>\n\n                    <br />\n\n                    <h5>文件夹</h5>\n\n                    <div class="form-check">\n                        <label class="form-check-label">\n                            <input class="form-check-input" type="checkbox" name="sort-folders-first" value="1">\n                            文件夹排列在前面\n                        </label>\n                    </div>\n                    \n                    <br />\n                    \n                    <h5>自然排序</h5>\n\n                    <div class="form-check">\n                        <label class="form-check-label">\n                            <input class="form-check-input" type="checkbox" name="sort-natural" value="1">\n                            根据不同语言或地区的字符排序和排序规则进行排序。\n                        </label>\n                    </div>\n                    <br />\n                    \n                    <div class="form-check">\n                        <label>\n                            自然排序语言\n                            <input class="form-control" name="sort-locale">\n                            自然排序的语言代码, 例如中文的"zh-CN"\n                        </label>\n                    </div>\n                </div>\n                <div class="modal-footer">\n                    <button type="submit" class="btn btn-primary">排序<kbd>回车</kbd></button>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>'),this.$form=this.$widget.find(".sort-child-notes-form"),this.$form.on("submit",(async()=>{const t=this.$form.find("input[name='sort-by']:checked").val(),n=this.$form.find("input[name='sort-direction']:checked").val(),i=this.$form.find("input[name='sort-folders-first']").is(":checked"),s=this.$form.find("input[name='sort-natural']").is(":checked"),a=this.$form.find("input[name='sort-locale']").val();await o.Z.put(`notes/${this.parentNoteId}/sort-children`,{sortBy:t,sortDirection:n,foldersFirst:i,sortNatural:s,sortLocale:a}),e.default.closeActiveDialog()}))}async sortChildNotesEvent({node:t}){this.parentNoteId=t.data.noteId,e.default.openDialog(this.$widget),this.$form.find("input:first").focus()}}class Dn extends v.Z{doRender(){this.$widget=$('\n<div class="password-not-set-dialog modal fade mx-auto" tabindex="-1" role="dialog">\n    <div class="modal-dialog modal-md" role="document">\n        <div class="modal-content">\n            <div class="modal-header">\n                <h5 class="modal-title mr-auto">未设置密码</h5>\n\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="margin-left: 0;">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n            </div>\n            <div class="modal-body">\n                受保护的笔记使用用户密码进行加密，但是目前没有设置密码.\n\n                要保护笔记, 请<a class="open-password-options-button" href="javascript:">点击这里打开设置界面</a>并设置密码.\n            </div>\n        </div>\n    </div>\n</div>\n'),this.$openPasswordOptionsButton=this.$widget.find(".open-password-options-button"),this.$openPasswordOptionsButton.on("click",(()=>{this.triggerCommand("showOptions",{section:"_optionsPassword"})}))}showPasswordNotSetEvent(){e.default.openDialog(this.$widget)}}class Bn extends v.Z{doRender(){this.$widget=$('\n<div class="include-note-dialog modal mx-auto" tabindex="-1" role="dialog">\n    <div class="modal-dialog modal-lg" role="document">\n        <div class="modal-content">\n            <div class="modal-header">\n                <h5 class="modal-title">包含笔记</h5>\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n            </div>\n            <form class="include-note-form">\n                <div class="modal-body">\n                    <div class="form-group">\n                        <label for="include-note-autocomplete">笔记</label>\n                        <div class="input-group">\n                            <input class="include-note-autocomplete form-control" placeholder="根据名称搜索笔记">\n                        </div>\n                    </div>\n\n                    包含的笔记框大小\n\n                    <div class="form-check">\n                        <label class="form-check-label">\n                            <input class="form-check-input" type="radio" name="include-note-box-size" value="small">\n                            小（约10行）\n                        </label>\n                    </div>\n                    <div class="form-check">\n                        <label class="form-check-label">\n                            <input class="form-check-input" type="radio" name="include-note-box-size" value="medium" checked>\n                            中等（约30行）\n                        </label>\n                    </div>\n                    <div class="form-check">\n                        <label class="form-check-label">\n                            <input class="form-check-input" type="radio" name="include-note-box-size" value="full">\n                            完整（框显示完整文本）\n                        </label>\n                    </div>\n                </div>\n                <div class="modal-footer">\n                    <button type="submit" class="btn btn-primary">包含笔记<kbd>回车</kbd></button>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>'),this.$form=this.$widget.find(".include-note-form"),this.$autoComplete=this.$widget.find(".include-note-autocomplete"),this.$form.on("submit",(()=>{const t=this.$autoComplete.getSelectedNotePath();return t?(this.$widget.modal("hide"),this.includeNote(t)):logError("缺少要包含的noteId."),!1}))}async showIncludeNoteDialogEvent({textTypeWidget:t}){this.textTypeWidget=t,await this.refresh(),e.default.openDialog(this.$widget)}async refresh(t){this.$autoComplete.val(""),h.initNoteAutocomplete(this.$autoComplete,{hideGoToSelectedNoteButton:!0,allowCreatingNotes:!0}),h.showRecentNotes(this.$autoComplete)}async includeNote(t){const e=Z.Z.getNoteIdFromUrl(t),n=await a.default.getNote(e),i=$("input[name='include-note-box-size']:checked").val();["image","canvas","mermaid"].includes(n.type)?this.textTypeWidget.addImage(e):this.textTypeWidget.addIncludeNote(e,i)}}var On=__webpack_require__(4733);class Wn extends v.Z{constructor(t){super(t),this.resolve=null,this.$originalFocused=null,this.$originalDialog=null}doRender(){this.$widget=$('\n<div class="note-type-chooser-dialog modal mx-auto" tabindex="-1" role="dialog">\n    <style>\n        .note-type-chooser-dialog {\n            /* note type chooser needs to be higher than other dialogs from which it is triggered, e.g. "add link"*/\n            z-index: 1100 !important;\n        }\n        \n        .note-type-chooser-dialog .note-type-dropdown {\n            position: relative;\n            font-size: large;\n            padding: 20px;\n            width: 100%;\n            margin-top: 15px;\n            max-height: 80vh;\n            overflow: auto;\n        }\n    </style>\n    <div class="modal-dialog" style="max-width: 500px;" role="document">\n        <div class="modal-content">\n            <div class="modal-header">\n                <h5 class="modal-title mr-auto">选择笔记类型</h5>\n\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="margin-left: 0 !important;">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n            </div>\n            <div class="modal-body">\n                请选择新笔记的类型/模板:\n\n                <div class="dropdown">\n                    <button class="note-type-dropdown-trigger" type="button" style="display: none;" data-toggle="dropdown">下拉触发</button>\n\n                    <div class="note-type-dropdown dropdown-menu"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>'),this.$noteTypeDropdown=this.$widget.find(".note-type-dropdown"),this.$noteTypeDropdownTrigger=this.$widget.find(".note-type-dropdown-trigger"),this.$noteTypeDropdownTrigger.dropdown(),this.$widget.on("hidden.bs.modal",(()=>{this.resolve&&this.resolve({success:!1}),this.$originalFocused&&(this.$originalFocused.trigger("focus"),this.$originalFocused=null),glob.activeDialog=this.$originalDialog})),this.$noteTypeDropdown.on("click",".dropdown-item",(t=>this.doResolve(t))),this.$noteTypeDropdown.on("focus",".dropdown-item",(t=>{this.$noteTypeDropdown.find(".dropdown-item").each(((e,n)=>{$(n).toggleClass("active",n===t.target)}))})),this.$noteTypeDropdown.on("keydown",".dropdown-item",(t=>{if("Enter"===t.key)return this.doResolve(t),t.preventDefault(),!1})),this.$noteTypeDropdown.parent().on("hide.bs.dropdown",(t=>{t.clickEvent&&t.preventDefault()}))}async chooseNoteTypeEvent({callback:t}){this.$originalFocused=$(":focus");const e=await On.Z.getNoteTypeItems();this.$noteTypeDropdown.empty();for(const t of e)"----"===t.title?this.$noteTypeDropdown.append($('<h6 class="dropdown-header">').append("Templates:")):this.$noteTypeDropdown.append($('<a class="dropdown-item" tabindex="0">').attr("data-note-type",t.type).attr("data-template-note-id",t.templateNoteId).append($("<span>").addClass(t.uiIcon)).append(` ${t.title}`));this.$noteTypeDropdownTrigger.dropdown("show"),this.$originalDialog=glob.activeDialog,glob.activeDialog=this.$widget,this.$widget.modal(),this.$noteTypeDropdown.find(".dropdown-item:first").focus(),this.resolve=t}doResolve(t){const e=$(t.target).closest(".dropdown-item"),n=e.attr("data-note-type"),i=e.attr("data-template-note-id");this.resolve({success:!0,noteType:n,templateNoteId:i}),this.resolve=null,this.$widget.modal("hide")}}class Fn extends v.Z{constructor(){super(),this.lastOpenedTs=0}doRender(){this.$widget=$('<div class="jump-to-note-dialog modal mx-auto" tabindex="-1" role="dialog">\n    <div class="modal-dialog modal-lg" role="document">\n        <div class="modal-content">\n            <div class="modal-header">\n                <div class="input-group">\n                    <input class="jump-to-note-autocomplete form-control" placeholder="根据名称搜索笔记">\n                </div>\n\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n            </div>\n            <div class="modal-body">\n                <div class="algolia-autocomplete-container jump-to-note-results"></div>\n            </div>\n            <div class="modal-footer">\n                <button class="show-in-full-text-button btn btn-sm">全文搜索<kbd>Ctrl+回车</kbd></button>\n            </div>\n        </div>\n    </div>\n</div>'),this.$autoComplete=this.$widget.find(".jump-to-note-autocomplete"),this.$results=this.$widget.find(".jump-to-note-results"),this.$showInFullTextButton=this.$widget.find(".show-in-full-text-button"),this.$showInFullTextButton.on("click",(t=>this.showInFullText(t))),p.Z.bindElShortcut(this.$widget,"ctrl+return",(t=>this.showInFullText(t)))}async jumpToNoteEvent(){e.default.openDialog(this.$widget),this.refresh(),this.lastOpenedTs=Date.now()}async refresh(){h.initNoteAutocomplete(this.$autoComplete,{allowCreatingNotes:!0,hideGoToSelectedNoteButton:!0,container:this.$results}).off("autocomplete:noteselected").on("autocomplete:noteselected",(function(e,n,i){if(!n.notePath)return!1;t.default.tabManager.getActiveContext().setNote(n.notePath)})),Date.now()-this.lastOpenedTs>12e4?h.showRecentNotes(this.$autoComplete):this.$autoComplete.autocomplete("val",this.$autoComplete.next().text()).trigger("focus").trigger("select")}showInFullText(t){t.preventDefault(),t.stopPropagation();const e=this.$autoComplete.val();this.triggerCommand("searchNotes",{searchString:e}),this.$widget.modal("hide")}}class zn extends v.Z{doRender(){this.$widget=$('\n<div class="add-link-dialog modal mx-auto" tabindex="-1" role="dialog">\n    <div class="modal-dialog modal-lg" style="max-width: 1000px" role="document">\n        <div class="modal-content">\n            <div class="modal-header">\n                <h5 class="modal-title mr-auto">添加链接</h5>\n\n                <button type="button" class="help-button" title="链接帮助" data-help-page="Links">?</button>\n\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="margin-left: 0 !important;">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n            </div>\n            <form class="add-link-form">\n                <div class="modal-body">\n                    <div class="form-group">\n                        <label for="add-link-note-autocomplete">笔记</label>\n\n                        <div class="input-group">\n                            <input class="add-link-note-autocomplete form-control" placeholder="根据名称搜索笔记">\n                        </div>\n                    </div>\n\n                    <div class="add-link-title-settings">\n                        <div class="add-link-title-radios form-check">\n                            <label class="form-check-label">\n                                <input class="form-check-input" type="radio" name="link-type" value="reference-link" checked>\n                                链接标题跟随笔记标题变化\n                            </label>\n                        </div>\n                        <div class="add-link-title-radios form-check">\n                            <label class="form-check-label">\n                                <input class="form-check-input" type="radio" name="link-type" value="hyper-link">\n                                链接标题可随意修改\n                            </label>\n                        </div>\n\n                        <div class="add-link-title-form-group form-group">\n                            <br/>\n                            <label>\n                                Link title\n                                \n                                <input class="link-title form-control" style="width: 100%;">\n                            </label>\n                        </div>\n                    </div>\n                </div>\n                <div class="modal-footer">\n                    <button type="submit" class="btn btn-primary">添加链接 <kbd>回车</kbd></button>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>'),this.$form=this.$widget.find(".add-link-form"),this.$autoComplete=this.$widget.find(".add-link-note-autocomplete"),this.$linkTitle=this.$widget.find(".link-title"),this.$addLinkTitleSettings=this.$widget.find(".add-link-title-settings"),this.$addLinkTitleRadios=this.$widget.find(".add-link-title-radios"),this.$addLinkTitleFormGroup=this.$widget.find(".add-link-title-form-group"),this.textTypeWidget=null,this.$form.on("submit",(()=>{if(this.$autoComplete.getSelectedNotePath()){this.$widget.modal("hide");const t="reference-link"===this.getLinkType()?null:this.$linkTitle.val();this.textTypeWidget.addLink(this.$autoComplete.getSelectedNotePath(),t)}else this.$autoComplete.getSelectedExternalLink()?(this.$widget.modal("hide"),this.textTypeWidget.addLink(this.$autoComplete.getSelectedExternalLink(),this.$linkTitle.val())):logError("No link to add.");return!1}))}async showAddLinkDialogEvent({textTypeWidget:t,text:n=""}){this.textTypeWidget=t,this.$addLinkTitleSettings.toggle(!this.textTypeWidget.hasSelection()),this.$addLinkTitleSettings.find("input[type=radio]").on("change",(t=>this.updateTitleSettingsVisibility(t))),this.textTypeWidget.hasSelection()?this.$addLinkTitleSettings.find("input[value='hyper-link']").prop("checked",!0):this.$addLinkTitleSettings.find("input[value='reference-link']").prop("checked",!0),this.updateTitleSettingsVisibility(),e.default.openDialog(this.$widget),this.$autoComplete.val(""),this.$linkTitle.val("");const i=async t=>{const e=await Z.Z.getNoteTitle(t);this.$linkTitle.val(e)};h.initNoteAutocomplete(this.$autoComplete,{allowExternalLinks:!0,allowCreatingNotes:!0}),this.$autoComplete.on("autocomplete:noteselected",((t,e,n)=>{if(!e.notePath)return!1;this.updateTitleSettingsVisibility();const o=Z.Z.getNoteIdFromUrl(e.notePath);o&&i(o)})),this.$autoComplete.on("autocomplete:externallinkselected",((t,e,n)=>{if(!e.externalLink)return!1;this.updateTitleSettingsVisibility(),this.$linkTitle.val(e.externalLink)})),this.$autoComplete.on("autocomplete:cursorchanged",((t,e,n)=>{if(e.externalLink)this.$linkTitle.val(e.externalLink);else{const t=Z.Z.getNoteIdFromUrl(e.notePath);t&&i(t)}})),n&&n.trim()?h.setText(this.$autoComplete,n):h.showRecentNotes(this.$autoComplete),this.$autoComplete.trigger("focus").trigger("select")}getLinkType(){return this.$autoComplete.getSelectedExternalLink()?"external-link":this.$addLinkTitleSettings.find("input[type=radio]:checked").val()}updateTitleSettingsVisibility(){const t=this.getLinkType();this.$addLinkTitleFormGroup.toggle("reference-link"!==t),this.$addLinkTitleRadios.toggle("external-link"!==t)}}class Hn extends v.Z{constructor(){super(),this.clonedNoteIds=null}doRender(){this.$widget=$('\n<div class="clone-to-dialog modal mx-auto" tabindex="-1" role="dialog">\n    <div class="modal-dialog modal-lg" style="max-width: 1000px" role="document">\n        <div class="modal-content">\n            <div class="modal-header">\n                <h5 class="modal-title mr-auto">克隆笔记到...</h5>\n\n                <button type="button" class="help-button" title="链接帮助" data-help-page="Cloning-notes">?</button>\n\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="margin-left: 0 !important;">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n            </div>\n            <form class="clone-to-form">\n                <div class="modal-body">\n                    <h5>要克隆的笔记</h5>\n\n                    <ul class="clone-to-note-list" style="max-height: 200px; overflow: auto;"></ul>\n\n                    <div class="form-group">\n                        <label style="width: 100%">\n                            目标父级笔记\n                            <div class="input-group">\n                                <input class="clone-to-note-autocomplete form-control" placeholder="根据名称搜索笔记">\n                            </div>\n                        </label>\n                    </div>\n\n                    <div class="form-group" title="克隆的笔记将显示在带有给定前缀的笔记树中">\n                        <label style="width: 100%">\n                            前缀(可选)\n                            <input class="clone-prefix form-control" style="width: 100%;">\n                        </label>\n                    </div>\n                </div>\n                <div class="modal-footer">\n                    <button type="submit" class="btn btn-primary">克隆到选定的笔记<kbd>回车</kbd></button>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>'),this.$form=this.$widget.find(".clone-to-form"),this.$noteAutoComplete=this.$widget.find(".clone-to-note-autocomplete"),this.$clonePrefix=this.$widget.find(".clone-prefix"),this.$noteList=this.$widget.find(".clone-to-note-list"),this.$form.on("submit",(()=>{const t=this.$noteAutoComplete.getSelectedNotePath();return t?(this.$widget.modal("hide"),this.cloneNotesTo(t)):logError("缺少要克隆到的路径."),!1}))}async cloneNoteIdsToEvent({noteIds:n}){n&&0!==n.length||(n=[t.default.tabManager.getActiveContextNoteId()]),this.clonedNoteIds=[];for(const t of n)this.clonedNoteIds.includes(t)||this.clonedNoteIds.push(t);e.default.openDialog(this.$widget),this.$noteAutoComplete.val("").trigger("focus"),this.$noteList.empty();for(const t of this.clonedNoteIds){const e=await a.default.getNote(t);this.$noteList.append($("<li>").text(e.title))}h.initNoteAutocomplete(this.$noteAutoComplete),h.showRecentNotes(this.$noteAutoComplete)}async cloneNotesTo(t){const{noteId:e,parentNoteId:n}=Z.Z.getNoteIdAndParentIdFromUrl(t),i=await a.default.getBranchId(n,e);for(const t of this.clonedNoteIds){await L.Z.cloneNoteToBranch(t,i,this.$clonePrefix.val());const e=await a.default.getNote(t),n=await a.default.getBranch(i).getNote();O.default.showMessage(`笔记 "${e.title}" 已被克隆至 ${n.title}`)}}}class Un extends v.Z{constructor(){super(),this.movedBranchIds=null}doRender(){this.$widget=$('\n<div class="move-to-dialog modal mx-auto" tabindex="-1" role="dialog">\n    <div class="modal-dialog modal-lg" style="max-width: 1000px" role="document">\n        <div class="modal-content">\n            <div class="modal-header">\n                <h5 class="modal-title mr-auto">将笔记移至...</h5>\n                \n                <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="margin-left: 0 !important;">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n            </div>\n            <form class="move-to-form">\n                <div class="modal-body">\n                    <h5>要移动的笔记</h5>\n\n                    <ul class="move-to-note-list" style="max-height: 200px; overflow: auto;"></ul>\n\n                    <div class="form-group">\n                        <label style="width: 100%">\n                            目标父级笔记\n                            <div class="input-group">\n                                <input class="move-to-note-autocomplete form-control" placeholder="根据名称搜索笔记">\n                            </div>\n                        </label>\n                    </div>\n                </div>\n                <div class="modal-footer">\n                    <button type="submit" class="btn btn-primary">移至所选笔记<kbd>回车</kbd></button>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>'),this.$form=this.$widget.find(".move-to-form"),this.$noteAutoComplete=this.$widget.find(".move-to-note-autocomplete"),this.$noteList=this.$widget.find(".move-to-note-list"),this.$form.on("submit",(()=>{const t=this.$noteAutoComplete.getSelectedNotePath();if(t){this.$widget.modal("hide");const{noteId:e,parentNoteId:n}=Z.Z.getNoteIdAndParentIdFromUrl(t);a.default.getBranchId(n,e).then((t=>this.moveNotesTo(t)))}else logError("缺少要移动到的路径.");return!1}))}async moveBranchIdsToEvent({branchIds:t}){this.movedBranchIds=t,e.default.openDialog(this.$widget),this.$noteAutoComplete.val("").trigger("focus"),this.$noteList.empty();for(const t of this.movedBranchIds){const e=a.default.getBranch(t),n=await a.default.getNote(e.noteId);this.$noteList.append($("<li>").text(n.title))}h.initNoteAutocomplete(this.$noteAutoComplete),h.showRecentNotes(this.$noteAutoComplete)}async moveNotesTo(t){await L.Z.moveToParentNote(this.movedBranchIds,t);const e=a.default.getBranch(t),n=await e.getNote();O.default.showMessage(`选中的笔记已经被移动到 ${n.title}`)}}var jn=__webpack_require__(1274);class qn extends v.Z{constructor(){super(),this.parentNoteId=null}doRender(){this.$widget=$('\n<div class="import-dialog modal fade mx-auto" tabindex="-1" role="dialog">\n    <div class="modal-dialog modal-lg" role="document">\n        <div class="modal-content">\n            <div class="modal-header">\n                <h5 class="modal-title">导入到笔记</h5>\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n            </div>\n            <form class="import-form">\n                <div class="modal-body">\n                    <div class="form-group">\n                        <label for="import-file-upload-input"><strong>选择导入文件</strong></label>\n\n                        <input type="file" class="import-file-upload-input form-control-file" multiple />\n\n                        <p>选中的文件内容将作为子笔记导入<strong class="import-note-title"></strong>.\n                    </div>\n\n                    <div class="form-group">\n                        <strong>选项:</strong>\n\n                        <div class="checkbox">\n                            <label data-toggle="tooltip" title="Trilium <code> .zip </ code>导出文件可以包含可执行脚本, 这些脚本可能包含有害行为. 安全导入会取消所有导入的脚本的执行. 只有在您完全确认脚本安全的情况下取消勾选 &quot;安全导入&quot;.">\n                                <input class="safe-import-checkbox" value="1" type="checkbox" checked>\n                                <span>安全导入</span>\n                            </label>\n                        </div>\n\n                        <div class="checkbox">\n                            <label data-toggle="tooltip" title="如果选中此选项, 则Trilium将读取<code> .zip </ code>, <code> .enex </ code>和<code> .opml </ code>文件, 并从这些存档中的文件创建笔记.">\n                                <input class="explode-archives-checkbox" value="1" type="checkbox" checked>\n                                <span>读取 <code>.zip</code>, <code>.enex</code> 和 <code>.opml</code> 文件的内容.</span>\n                            </label>\n                        </div>\n\n                        <div class="checkbox">\n                            <label data-toggle="tooltip" title="<p>如果您选中此选项, Trilium将尝试通过缩放和优化来压缩导入的图像, 这可能会影响您看到的图像质量.</p><p>这不适用于<code>.zip</code>假定这些文件已经过优化, 使用元数据导入.</p>">\n                                <input class="shrink-images-checkbox" value="1" type="checkbox" checked> <span>压缩图像</span>\n                            </label>\n                        </div>\n\n                        <div class="checkbox">\n                            <label>\n                                <input class="text-imported-as-text-checkbox" value="1" type="checkbox" checked>\n\n                                如果无法从笔记的元数据识别类型, 则将HTML, Markdown 和 TXT导入为文本笔记\n                            </label>\n                        </div>\n\n                        <div class="checkbox">\n                            <label>\n                                <input class="code-imported-as-code-checkbox" value="1" type="checkbox" checked> 如果无法从笔记的元数据识别类型, 则将导入可识别的代码文件(例如 <code>.json</code>) 为代码笔记\n                            </label>\n                        </div>\n\n                        <div class="checkbox">\n                            <label>\n                                <input class="replace-underscores-with-spaces-checkbox" value="1" type="checkbox" checked>\n\n                                将笔记名称中的下划线替换为空格\n                            </label>\n                        </div>\n                    </div>\n                </div>\n                <div class="modal-footer">\n                    <button class="import-button btn btn-primary">导入</button>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>'),this.$form=this.$widget.find(".import-form"),this.$noteTitle=this.$widget.find(".import-note-title"),this.$fileUploadInput=this.$widget.find(".import-file-upload-input"),this.$importButton=this.$widget.find(".import-button"),this.$safeImportCheckbox=this.$widget.find(".safe-import-checkbox"),this.$shrinkImagesCheckbox=this.$widget.find(".shrink-images-checkbox"),this.$textImportedAsTextCheckbox=this.$widget.find(".text-imported-as-text-checkbox"),this.$codeImportedAsCodeCheckbox=this.$widget.find(".code-imported-as-code-checkbox"),this.$explodeArchivesCheckbox=this.$widget.find(".explode-archives-checkbox"),this.$replaceUnderscoresWithSpacesCheckbox=this.$widget.find(".replace-underscores-with-spaces-checkbox"),this.$form.on("submit",(()=>(this.$importButton.attr("disabled","disabled"),this.importIntoNote(this.parentNoteId),!1))),this.$fileUploadInput.on("change",(()=>{this.$fileUploadInput.val()?this.$importButton.removeAttr("disabled"):this.$importButton.attr("disabled","disabled")})),this.$widget.find('[data-toggle="tooltip"]').tooltip({html:!0})}async showImportDialogEvent({noteId:t}){this.parentNoteId=t,this.$fileUploadInput.val("").trigger("change"),this.$safeImportCheckbox.prop("checked",!0),this.$shrinkImagesCheckbox.prop("checked",m.Z.is("compressImages")),this.$textImportedAsTextCheckbox.prop("checked",!0),this.$codeImportedAsCodeCheckbox.prop("checked",!0),this.$explodeArchivesCheckbox.prop("checked",!0),this.$replaceUnderscoresWithSpacesCheckbox.prop("checked",!0),this.$noteTitle.text(await Z.Z.getNoteTitle(this.parentNoteId)),e.default.openDialog(this.$widget)}async importIntoNote(t){const e=Array.from(this.$fileUploadInput[0].files),n=t=>t.is(":checked")?"true":"false",i={safeImport:n(this.$safeImportCheckbox),shrinkImages:n(this.$shrinkImagesCheckbox),textImportedAsText:n(this.$textImportedAsTextCheckbox),codeImportedAsCode:n(this.$codeImportedAsCodeCheckbox),explodeArchives:n(this.$explodeArchivesCheckbox),replaceUnderscoresWithSpaces:n(this.$replaceUnderscoresWithSpacesCheckbox)};this.$widget.modal("hide"),await jn.default.uploadFiles("notes",t,e,i)}}class Vn extends v.Z{constructor(){super(),this.taskId="",this.branchId=null}doRender(){this.$widget=$('\n<div class="export-dialog modal fade mx-auto" tabindex="-1" role="dialog">\n    <style>\n    .export-dialog .export-form .form-check {\n        padding-top: 10px;\n        padding-bottom: 10px;\n    }\n    \n    .export-dialog .export-form .format-choice {\n        padding-left: 40px;\n        display: none;\n    }\n    \n    .export-dialog .export-form .opml-versions {\n        padding-left: 60px;\n        display: none;\n    }\n    \n    .export-dialog .export-form .form-check-label {\n        padding: 2px;\n    }\n    </style>\n\n    <div class="modal-dialog modal-lg" role="document">\n        <div class="modal-content">\n            <div class="modal-header">\n                <h5 class="modal-title">导出笔记 "<span class="export-note-title"></span>"</h5>\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n            </div>\n            <form class="export-form">\n                <div class="modal-body">\n                    <div class="form-check">\n                        <label class="form-check-label">\n                            <input class="export-type-subtree form-check-input" type="radio" name="export-type" value="subtree">\n                            此笔记及其所有子笔记\n                        </label>\n                    </div>\n\n                    <div class="export-subtree-formats format-choice">\n                        <div class="form-check">\n                            <label class="form-check-label">\n                                <input class="form-check-input" type="radio" name="export-subtree-format" value="html">\n                                ZIP压缩的HTML - 推荐, 因为会保留所有格式.\n                            </label>\n                        </div>\n\n                        <div class="form-check">\n                            <label class="form-check-label">\n                                <input class="form-check-input" type="radio" name="export-subtree-format" value="markdown">\n                                Markdown - 会保留大部分格式.\n                            </label>\n                        </div>\n\n                        <div class="form-check">\n                            <label class="form-check-label">\n                                <input class="form-check-input" type="radio" name="export-subtree-format" value="opml">\n                                OPML - 用来导出文本大纲, 其它的格式信息, 图片数据和文件都不会包含在内.\n                            </label>\n                        </div>\n\n                        <div class="opml-versions">\n                            <div class="form-check">\n                                <label class="form-check-label">\n                                    <input class="form-check-input" type="radio" name="opml-version" value="1.0">\n                                    OPML v1.0 - 仅纯文本\n                                </label>\n                            </div>\n\n                            <div class="form-check">\n                                <label class="form-check-label">\n                                    <input class="form-check-input" type="radio" name="opml-version" value="2.0">\n                                    OMPL v2.0 - 还允许HTML\n                                </label>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class="form-check">\n                        <label class="form-check-label">\n                            <input class="form-check-input" type="radio" name="export-type" value="single">\n                            只包含这个笔记, 不包含子笔记\n                        </label>\n                    </div>\n\n                    <div class="export-single-formats format-choice">\n                        <div class="form-check">\n                            <label class="form-check-label">\n                                <input class="form-check-input" type="radio" name="export-single-format" value="html">\n                                HTML - 推荐, 可以保留所有格式.\n                            </label>\n                        </div>\n\n                        <div class="form-check">\n                            <label class="form-check-label">\n                                <input class="form-check-input" type="radio" name="export-single-format" value="markdown">                            \n                                Markdown - 会保留大部分格式.\n                            </label>\n                        </div>\n                    </div>\n                </div>\n                <div class="modal-footer">\n                    <button class="export-button btn btn-primary">导出</button>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>'),this.$form=this.$widget.find(".export-form"),this.$noteTitle=this.$widget.find(".export-note-title"),this.$subtreeFormats=this.$widget.find(".export-subtree-formats"),this.$singleFormats=this.$widget.find(".export-single-formats"),this.$subtreeType=this.$widget.find(".export-type-subtree"),this.$singleType=this.$widget.find(".export-type-single"),this.$exportButton=this.$widget.find(".export-button"),this.$opmlVersions=this.$widget.find(".opml-versions"),this.$form.on("submit",(()=>{this.$widget.modal("hide");const t=this.$widget.find("input[name='export-type']:checked").val();if(!t)return void O.default.showError("请先选择导出类型");const e="subtree"===t?this.$widget.find("input[name=export-subtree-format]:checked").val():this.$widget.find("input[name=export-single-format]:checked").val(),n="opml"===e?this.$widget.find("input[name='opml-version']:checked").val():"1.0";return this.exportBranch(this.branchId,t,e,n),!1})),this.$widget.find("input[name=export-type]").on("change",(t=>{"subtree"===t.currentTarget.value?(0===this.$widget.find("input[name=export-subtree-format]:checked").length&&this.$widget.find("input[name=export-subtree-format]:first").prop("checked",!0),this.$subtreeFormats.slideDown(),this.$singleFormats.slideUp()):(0===this.$widget.find("input[name=export-single-format]:checked").length&&this.$widget.find("input[name=export-single-format]:first").prop("checked",!0),this.$subtreeFormats.slideUp(),this.$singleFormats.slideDown())})),this.$widget.find("input[name=export-subtree-format]").on("change",(t=>{"opml"===t.currentTarget.value?this.$opmlVersions.slideDown():this.$opmlVersions.slideUp()}))}async showExportDialogEvent({notePath:t,defaultType:n}){if(this.taskId="",this.$exportButton.removeAttr("disabled"),"subtree"===n)this.$subtreeType.prop("checked",!0).trigger("change"),this.$widget.find("input[name=export-subtree-format]:checked").trigger("change");else{if("single"!==n)throw new Error(`Unrecognized type '${n}'`);this.$singleType.prop("checked",!0).trigger("change")}this.$widget.find(".opml-v2").prop("checked",!0),e.default.openDialog(this.$widget);const{noteId:i,parentNoteId:o}=Z.Z.getNoteIdAndParentIdFromUrl(t);this.branchId=await a.default.getBranchId(o,i),this.$noteTitle.text(await Z.Z.getNoteTitle(i))}exportBranch(t,n,i,o){this.taskId=e.default.randomString(10);const s=yt.Z.getUrlForDownload(`api/branches/${t}/export/${n}/${i}/${o}/${this.taskId}`);yt.Z.download(s)}}D.Z.subscribeToMessages((async t=>{const e=(t,e)=>({id:t,title:"导出状态",message:e,icon:"arrow-square-up-right"});if("export"===t.taskType)if("taskError"===t.type)O.default.closePersistent(t.taskId),O.default.showError(t.message);else if("taskProgressCount"===t.type)O.default.showPersistent(e(t.taskId,`Export in progress: ${t.progressCount}`));else if("taskSucceeded"===t.type){const n=e(t.taskId,"Export finished successfully.");n.closeAfter=5e3,O.default.showPersistent(n)}}));class Kn extends v.Z{constructor(){super(),this.lastOpenedTs=0}doRender(){this.$widget=$('\n<div class="markdown-import-dialog modal fade mx-auto" tabindex="-1" role="dialog">\n    <div class="modal-dialog modal-lg" role="document">\n        <div class="modal-content">\n            <div class="modal-header">\n                <h5 class="modal-title">导入Markdown</h5>\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n            </div>\n            <div class="modal-body">\n                <p>由于使用浏览器沙箱, 因此无法直接从JavaScript读取剪贴板.</p>\n\n                <textarea class="markdown-import-textarea" style="height: 340px; width: 100%"></textarea>\n            </div>\n            <div class="modal-footer">\n                <button class="markdown-import-button btn btn-primary">导入<kbd>Ctrl+回车</kbd></button>\n            </div>\n        </div>\n    </div>\n</div>'),this.$importTextarea=this.$widget.find(".markdown-import-textarea"),this.$importButton=this.$widget.find(".markdown-import-button"),this.$importButton.on("click",(()=>this.sendForm())),this.$widget.on("shown.bs.modal",(()=>this.$importTextarea.trigger("focus"))),p.Z.bindElShortcut(this.$widget,"ctrl+return",(()=>this.sendForm()))}async convertMarkdownToHtml(e){const{htmlContent:n}=await o.Z.post("other/render-markdown",{markdownContent:e}),i=await t.default.tabManager.getActiveContext().getTextEditor(),s=i.data.processor.toView(n),a=i.data.toModel(s);i.model.insertContent(a,i.model.document.selection),O.default.showMessage("Markdown内容已导入到文档中.")}async pasteMarkdownIntoTextEvent(){await this.importMarkdownInlineEvent()}async importMarkdownInlineEvent(){if("text"===t.default.tabManager.getActiveContextNoteType())if(e.default.isElectron()){const{clipboard:t}=e.default.dynamicRequire("electron"),n=t.readText();this.convertMarkdownToHtml(n)}else e.default.openDialog(this.$widget)}async sendForm(){const t=this.$importTextarea.val();this.$widget.modal("hide"),await this.convertMarkdownToHtml(t),this.$importTextarea.val("")}}class Jn extends v.Z{doRender(){this.$widget=$('\n<div class="protected-session-password-dialog modal mx-auto" data-backdrop="false" tabindex="-1" role="dialog">\n    <div class="modal-dialog modal-md" role="document">\n        <div class="modal-content">\n            <div class="modal-header">\n                <h5 class="modal-title mr-auto">保护会话</h5>\n\n                <button class="help-button" type="button" data-help-page="Protected-notes" title="保护会话帮助文档">?</button>\n\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="margin-left: 0;">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n            </div>\n            <form class="protected-session-password-form">\n                <div class="modal-body">\n                    <div class="form-group">\n                        <label style="width: -webkit-fill-available">\n                            输入密码进入保护会话以继续\n                            <input class="form-control protected-session-password" type="password">\n                        </label>\n                    </div>\n                </div>\n                <div class="modal-footer">\n                    <button class="btn btn-primary">开始受保护的会话<kbd>回车</kbd></button>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>'),this.$passwordForm=this.$widget.find(".protected-session-password-form"),this.$passwordInput=this.$widget.find(".protected-session-password"),this.$passwordForm.on("submit",(()=>{const t=this.$passwordInput.val();return this.$passwordInput.val(""),F.Z.setupProtectedSession(t),!1}))}showProtectedSessionPasswordDialogEvent(){e.default.openDialog(this.$widget),this.$passwordInput.trigger("focus")}closeProtectedSessionPasswordDialogEvent(){this.$widget.modal("hide")}}class Gn extends v.Z{constructor(){super(),this.revisionItems=[],this.note=null,this.revisionId=null}doRender(){this.$widget=$('\n<div class="revisions-dialog modal fade mx-auto" tabindex="-1" role="dialog">\n    <style>\n        .revisions-dialog .revision-content-wrapper {\n            flex-grow: 1;\n            margin-left: 20px;\n            display: flex;\n            flex-direction: column;\n            min-width: 0;\n        }\n\n        .revisions-dialog .revision-content {\n            overflow: auto;\n            word-break: break-word;\n        }\n\n        .revisions-dialog .revision-content img {\n            max-width: 100%;\n            object-fit: contain;\n        }\n\n        .revisions-dialog .revision-content pre {\n            max-width: 100%;\n            word-break: break-all;\n            white-space: pre-wrap;\n        }\n    </style>\n\n    <div class="modal-dialog modal-xl" role="document">\n        <div class="modal-content">\n            <div class="modal-header">\n                <h5 class="modal-title mr-auto">笔记修改历史</h5>\n\n                <button class="revisions-erase-all-revisions-button btn btn-sm"\n                        title="删除此笔记的所有历史"\n                        style="padding: 0 10px 0 10px;" type="button">删除所有历史</button>\n\n                <button class="help-button" type="button" data-help-page="Note-revisions" title="有关笔记历史的帮助">?</button>\n\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="margin-left: 0 !important;">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n            </div>\n            <div class="modal-body" style="display: flex; height: 80vh;">\n                <div class="dropdown">\n                    <button class="revision-list-dropdown" type="button" style="display: none;" data-toggle="dropdown">下拉触发</button>\n\n                    <div class="revision-list dropdown-menu" style="position: static; height: 100%; overflow: auto;"></div>\n                </div>\n\n                <div class="revision-content-wrapper">\n                    <div style="flex-grow: 0; display: flex; justify-content: space-between;">\n                        <h3 class="revision-title" style="margin: 3px; flex-grow: 100;"></h3>\n\n                        <div class="revision-title-buttons"></div>\n                    </div>\n\n                    <div class="revision-content"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>'),this.$list=this.$widget.find(".revision-list"),this.$listDropdown=this.$widget.find(".revision-list-dropdown"),this.$content=this.$widget.find(".revision-content"),this.$title=this.$widget.find(".revision-title"),this.$titleButtons=this.$widget.find(".revision-title-buttons"),this.$eraseAllRevisionsButton=this.$widget.find(".revisions-erase-all-revisions-button"),this.$listDropdown.dropdown(),this.$listDropdown.parent().on("hide.bs.dropdown",(t=>{t.clickEvent&&t.preventDefault()})),this.$widget.on("shown.bs.modal",(()=>{this.$list.find(`[data-revision-id="${this.revisionId}"]`).trigger("focus")})),this.$eraseAllRevisionsButton.on("click",(async()=>{await U.Z.confirm("确定要删除这个笔记所有的历史版本吗? 这会删除所有历史版本的标题和内容, 但元信息会保留.")&&(await o.Z.remove(`notes/${this.note.noteId}/revisions`),this.$widget.modal("hide"),O.default.showMessage("笔记历史已被删除."))})),this.$list.on("click",".dropdown-item",(t=>(t.preventDefault(),!1))),this.$list.on("focus",".dropdown-item",(t=>{this.$list.find(".dropdown-item").each(((e,n)=>{$(n).toggleClass("active",n===t.target)})),this.setContentPane()}))}async showRevisionsEvent({noteId:n=t.default.tabManager.getActiveContextNoteId()}){e.default.openDialog(this.$widget),await this.loadRevisions(n)}async loadRevisions(n){this.$list.empty(),this.$content.empty(),this.$titleButtons.empty(),this.note=t.default.tabManager.getActiveContextNote(),this.revisionItems=await o.Z.get(`notes/${n}/revisions`);for(const t of this.revisionItems)this.$list.append($('<a class="dropdown-item" tabindex="0">').text(`${t.dateLastEdited.substr(0,16)} (${e.default.formatSize(t.contentLength)})`).attr("data-revision-id",t.revisionId).attr("title",`这个历史版本最后编辑于 ${t.dateLastEdited}`));this.$listDropdown.dropdown("show"),this.revisionItems.length>0?this.revisionId||(this.revisionId=this.revisionItems[0].revisionId):(this.$title.text("这个笔记没有修改记录..."),this.revisionId=null),this.$eraseAllRevisionsButton.toggle(this.revisionItems.length>0)}async setContentPane(){const t=this.$list.find(".active").attr("data-revision-id"),e=this.revisionItems.find((e=>e.revisionId===t));this.$title.html(e.title),this.renderContentButtons(e),await this.renderContent(e)}renderContentButtons(t){this.$titleButtons.empty();const e=$('<button class="btn btn-sm" type="button">恢复此历史版本</button>');e.on("click",(async()=>{await U.Z.confirm("确定要恢复这个历史版本吗? 这会覆盖掉当前版本的标题和内容.")&&(await o.Z.post(`revisions/${t.revisionId}/restore`),this.$widget.modal("hide"),O.default.showMessage("笔记历史已被还原."))}));const n=$('<button class="btn btn-sm" type="button">删除此历史版本</button>');n.on("click",(async()=>{await U.Z.confirm("确定要删除这个历史版本吗? 这会删掉历史版本的标题和内容, 但元信息会保留.")&&(await o.Z.remove(`revisions/${t.revisionId}`),this.loadRevisions(t.noteId),O.default.showMessage("笔记历史已被删除."))})),t.isProtected&&!H.Z.isProtectedSessionAvailable()||this.$titleButtons.append(e).append(" &nbsp; "),this.$titleButtons.append(n).append(" &nbsp; ");const i=$('<button class="btn btn-sm btn-primary" type="button">下载</button>');i.on("click",(()=>yt.Z.downloadRevision(t.noteId,t.revisionId))),t.isProtected&&!H.Z.isProtectedSessionAvailable()||this.$titleButtons.append(i)}async renderContent(t){this.$content.empty();const n=await o.Z.get(`revisions/${t.revisionId}`);if("text"===t.type)this.$content.html(n.content),this.$content.find("span.math-tex").length>0&&(await at.Z.requireLibrary(at.Z.KATEX),renderMathInElement(this.$content[0],{trust:!0}));else if("code"===t.type)this.$content.html($("<pre>").text(n.content));else if("image"===t.type)this.$content.html($("<img>").attr("src",`data:${n.mime};base64,${n.content}`).css("max-width","100%").css("max-height","100%"));else if("file"===t.type){const i=$("<table cellpadding='10'>").append($("<tr>").append($("<th>").text("MIME: "),$("<td>").text(t.mime))).append($("<tr>").append($("<th>").text("文件大小:"),$("<td>").text(e.default.formatSize(t.contentLength))));n.content&&i.append($("<tr>").append($('<td colspan="2">').append($('<div style="font-weight: bold;">').text("预览:"),$('<pre class="file-preview-content"></pre>').text(n.content)))),this.$content.html(i)}else if("canvas"===t.type){const e=encodeURIComponent(t.title);this.$content.html($("<img>").attr("src",`api/revisions/${t.revisionId}/image/${e}?${Math.random()}`).css("max-width","100%"))}else if("mermaid"===t.type){const e=encodeURIComponent(t.title);this.$content.html($("<img>").attr("src",`api/revisions/${t.revisionId}/image/${e}?${Math.random()}`).css("max-width","100%")),this.$content.append($("<pre>").text(n.content))}else this.$content.text("这种类型的笔记无法预览.")}}class Yn extends v.Z{constructor(){super(),this.branchIds=null,this.resolve=null}doRender(){this.$widget=$('\n<div class="delete-notes-dialog modal mx-auto" tabindex="-1" role="dialog">\n    <div class="modal-dialog modal-dialog-scrollable modal-xl" role="document">\n        <div class="modal-content">\n            <div class="modal-header">\n                <h4 class="modal-title mr-auto">删除笔记预览</h4>\n\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n            </div>\n            <div class="modal-body">\n                <div class="checkbox">\n                    <label>\n                        <input class="delete-all-clones" value="1" type="checkbox">\n\n                        同时删除所有克隆 (可以在最近修改里恢复)\n                    </label>\n                </div>\n\n                <div class="checkbox">\n                    <label title="Normal (soft) deletion only marks the notes as deleted and they can be undeleted (in recent changes dialog) within a period of time. Checking this option will erase the notes immediately and it won\'t be possible to undelete the notes.">\n                        <input class="erase-notes" value="1" type="checkbox">\n\n                        永久删除笔记(不可恢复), 包括所有的克隆. 应用会强制重新加载.\n                    </label>\n                </div>\n\n                <div class="delete-notes-list-wrapper">\n                    <h4>以下笔记将被删除 (<span class="deleted-notes-count"></span>)</h4>\n\n                    <ul class="delete-notes-list" style="max-height: 200px; overflow: auto;"></ul>\n                </div>\n\n                <div class="no-note-to-delete-wrapper alert alert-info">\n                    没有笔记会被删除(只删除克隆).\n                </div>\n\n                <div class="broken-relations-wrapper">\n                    <div class="alert alert-danger">\n                        <h4>以下关系将被破坏并删除 (<span class="broke-relations-count"></span>)</h4>\n\n                        <ul class="broken-relations-list" style="max-height: 200px; overflow: auto;"></ul>\n                    </div>\n                </div>\n            </div>\n            <div class="modal-footer">\n                <button class="delete-notes-dialog-cancel-button btn btn-sm">取消</button>\n\n                &nbsp;\n\n                <button class="delete-notes-dialog-ok-button btn btn-primary btn-sm">好的</button>\n            </div>\n        </div>\n    </div>\n</div>'),this.$content=this.$widget.find(".recent-changes-content"),this.$okButton=this.$widget.find(".delete-notes-dialog-ok-button"),this.$cancelButton=this.$widget.find(".delete-notes-dialog-cancel-button"),this.$deleteNotesList=this.$widget.find(".delete-notes-list"),this.$brokenRelationsList=this.$widget.find(".broken-relations-list"),this.$deletedNotesCount=this.$widget.find(".deleted-notes-count"),this.$noNoteToDeleteWrapper=this.$widget.find(".no-note-to-delete-wrapper"),this.$deleteNotesListWrapper=this.$widget.find(".delete-notes-list-wrapper"),this.$brokenRelationsListWrapper=this.$widget.find(".broken-relations-wrapper"),this.$brokenRelationsCount=this.$widget.find(".broke-relations-count"),this.$deleteAllClones=this.$widget.find(".delete-all-clones"),this.$eraseNotes=this.$widget.find(".erase-notes"),this.$widget.on("shown.bs.modal",(()=>this.$okButton.trigger("focus"))),this.$cancelButton.on("click",(()=>{e.default.closeActiveDialog(),this.resolve({proceed:!1})})),this.$okButton.on("click",(()=>{e.default.closeActiveDialog(),this.resolve({proceed:!0,deleteAllClones:this.forceDeleteAllClones||this.isDeleteAllClonesChecked(),eraseNotes:this.isEraseNotesChecked()})})),this.$deleteAllClones.on("click",(()=>this.renderDeletePreview()))}async renderDeletePreview(){const t=await o.Z.post("delete-notes-preview",{branchIdsToDelete:this.branchIds,deleteAllClones:this.forceDeleteAllClones||this.isDeleteAllClonesChecked()});this.$deleteNotesList.empty(),this.$brokenRelationsList.empty(),this.$deleteNotesListWrapper.toggle(t.noteIdsToBeDeleted.length>0),this.$noNoteToDeleteWrapper.toggle(0===t.noteIdsToBeDeleted.length);for(const e of await a.default.getNotes(t.noteIdsToBeDeleted))this.$deleteNotesList.append($("<li>").append(await z.Z.createLink(e.noteId,{showNotePath:!0})));this.$deletedNotesCount.text(t.noteIdsToBeDeleted.length),this.$brokenRelationsListWrapper.toggle(t.brokenRelations.length>0),this.$brokenRelationsCount.text(t.brokenRelations.length),await a.default.getNotes(t.brokenRelations.map((t=>t.noteId)));for(const e of t.brokenRelations)this.$brokenRelationsList.append($("<li>").append("笔记 ").append(await z.Z.createLink(e.value)).append(`(将被删除的笔记) 被以下关系 <code>${e.name}</code> 引用, 来自 `).append(await z.Z.createLink(e.noteId)))}async showDeleteNotesDialogEvent({branchIdsToDelete:t,callback:n,forceDeleteAllClones:i}){this.branchIds=t,this.forceDeleteAllClones=i,await this.renderDeletePreview(),e.default.openDialog(this.$widget),this.$deleteAllClones.prop("checked",!!i).prop("disabled",!!i),this.$eraseNotes.prop("checked",!1),this.resolve=n}isDeleteAllClonesChecked(){return this.$deleteAllClones.is(":checked")}isEraseNotesChecked(){return this.$eraseNotes.is(":checked")}}class Qn extends v.Z{constructor(){super(),this.resolve=null,this.$originallyFocused=null}doRender(){this.$widget=$('\n<div class="info-dialog modal mx-auto" tabindex="-1" role="dialog" style="z-index: 2000;">\n    <div class="modal-dialog" role="document">\n        <div class="modal-content">\n            <div class="modal-header">\n                <h5 class="modal-title mr-auto">笔记信息</h5>\n\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n            </div>\n            <div class="modal-body">\n                <div class="info-dialog-content"></div>\n            </div>\n            <div class="modal-footer">\n                <button class="info-dialog-ok-button btn btn-primary btn-sm">好的</button>\n            </div>\n        </div>\n    </div>\n</div>'),this.$infoContent=this.$widget.find(".info-dialog-content"),this.$okButton=this.$widget.find(".info-dialog-ok-button"),this.$widget.on("shown.bs.modal",(()=>this.$okButton.trigger("focus"))),this.$widget.on("hidden.bs.modal",(()=>{this.resolve&&this.resolve(),this.$originallyFocused&&(this.$originallyFocused.trigger("focus"),this.$originallyFocused=null)})),this.$okButton.on("click",(()=>this.$widget.modal("hide")))}showInfoDialogEvent({message:t,callback:n}){this.$originallyFocused=$(":focus"),this.$infoContent.text(t),e.default.openDialog(this.$widget),this.resolve=n}}const Xn="confirm-dialog-delete-note";class ti extends v.Z{constructor(){super(),this.resolve=null,this.$originallyFocused=null}doRender(){this.$widget=$('\n<div class="confirm-dialog modal mx-auto" tabindex="-1" role="dialog" style="z-index: 2000;">\n    <div class="modal-dialog modal-dialog-scrollable" role="document">\n        <div class="modal-content">\n            <div class="modal-header">\n                <h5 class="modal-title mr-auto">确认</h5>\n\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n            </div>\n            <div class="modal-body">\n                <div class="confirm-dialog-content"></div>\n\n                <div class="confirm-dialog-custom"></div>\n            </div>\n            <div class="modal-footer">\n                <button class="confirm-dialog-cancel-button btn btn-sm">取消</button>\n\n                &nbsp;\n\n                <button class="confirm-dialog-ok-button btn btn-primary btn-sm">好的</button>\n            </div>\n        </div>\n    </div>\n</div>'),this.$confirmContent=this.$widget.find(".confirm-dialog-content"),this.$okButton=this.$widget.find(".confirm-dialog-ok-button"),this.$cancelButton=this.$widget.find(".confirm-dialog-cancel-button"),this.$custom=this.$widget.find(".confirm-dialog-custom"),this.$widget.on("shown.bs.modal",(()=>this.$okButton.trigger("focus"))),this.$widget.on("hidden.bs.modal",(()=>{this.resolve&&this.resolve(!1),this.$originallyFocused&&(this.$originallyFocused.trigger("focus"),this.$originallyFocused=null)})),this.$cancelButton.on("click",(()=>this.doResolve(!1))),this.$okButton.on("click",(()=>this.doResolve(!0)))}showConfirmDialogEvent({message:t,callback:e}){this.$originallyFocused=$(":focus"),this.$custom.hide(),glob.activeDialog=this.$widget,"string"==typeof t&&(t=$("<div>").text(t)),this.$confirmContent.empty().append(t),this.$widget.modal(),this.resolve=e}showConfirmDeleteNoteBoxWithNoteDialogEvent({title:t,callback:e}){glob.activeDialog=this.$widget,this.$confirmContent.text(`Are you sure you want to remove the note "${t}" from relation map?`),this.$custom.empty().append("<br/>").append($("<div>").addClass("form-check").append($("<label>").addClass("form-check-label").attr("style","text-decoration: underline dotted var(--main-text-color)").attr("title","如果不勾选这个, 笔记只会从关系地图里移除.").append($("<input>").attr("type","checkbox").addClass(`form-check-input ${Xn}`)).append("Also delete the note"))),this.$custom.show(),this.$widget.modal(),this.resolve=e}doResolve(t){this.resolve({confirmed:t,isDeleteNoteChecked:this.$widget.find(`.${Xn}:checked`).length>0}),this.resolve=null,this.$widget.modal("hide")}}class ei extends v.Z{constructor(){super(),this.resolve=null,this.shownCb=null}doRender(){this.$widget=$('\n<div class="prompt-dialog modal mx-auto" tabindex="-1" role="dialog" style="z-index: 2000;">\n    <div class="modal-dialog modal-lg" role="document">\n        <div class="modal-content">\n            <form class="prompt-dialog-form">\n                <div class="modal-header">\n                    <h5 class="prompt-title modal-title mr-auto">提示</h5>\n\n                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                        <span aria-hidden="true">&times;</span>\n                    </button>\n                </div>\n                <div class="modal-body">\n                </div>\n                <div class="modal-footer">\n                    <button class="prompt-dialog-ok-button btn btn-primary btn-sm">好的<kbd>回车</kbd></button>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>'),this.$dialogBody=this.$widget.find(".modal-body"),this.$form=this.$widget.find(".prompt-dialog-form"),this.$question=null,this.$answer=null,this.$widget.on("shown.bs.modal",(()=>{this.shownCb&&this.shownCb({$dialog:this.$widget,$question:this.$question,$answer:this.$answer,$form:this.$form}),this.$answer.trigger("focus").select()})),this.$widget.on("hidden.bs.modal",(()=>{this.resolve&&this.resolve(null)})),this.$form.on("submit",(t=>{t.preventDefault(),this.resolve(this.$answer.val()),this.$widget.modal("hide")}))}showPromptDialogEvent({title:t,message:n,defaultValue:i,shown:o,callback:s}){this.shownCb=o,this.resolve=s,this.$widget.find(".prompt-title").text(t||"Prompt"),this.$question=$("<label>").prop("for","prompt-dialog-answer").text(n),this.$answer=$("<input>").prop("type","text").prop("id","prompt-dialog-answer").addClass("form-control").val(i||""),this.$dialogBody.empty().append($("<div>").addClass("form-group").append(this.$question).append(this.$answer)),e.default.openDialog(this.$widget,!1)}}class ni extends B.Z{doRender(){this.$widget=$('\n<div class="floating-buttons no-print">\n    <style>\n        .floating-buttons {\n            position: relative;\n        }\n        \n        .floating-buttons-children {\n            position: absolute; \n            top: 10px; \n            right: 10px;\n            display: flex;\n            flex-direction: row;\n            z-index: 100;\n        }\n        \n        .type-canvas .floating-buttons-children {\n            top: 70px; \n        }\n        \n        .floating-buttons-children > *:not(.hidden-int):not(.no-content-hidden) {\n            margin-left: 10px;\n        }\n        \n        .floating-buttons-children > button, .floating-buttons-children .floating-button {\n            font-size: 150%;\n            padding: 5px 10px 4px 10px;\n            width: 40px;\n            cursor: pointer;\n            color: var(--button-text-color);\n            background: var(--button-background-color);\n            border-radius: var(--button-border-radius);\n            border: 1px solid transparent;\n            display: flex;\n            justify-content: space-around;\n        }\n        \n        .floating-buttons-children > button:hover, .floating-buttons-children .floating-button:hover {\n            text-decoration: none;\n            border-color: var(--button-border-color);\n        }\n        \n        .floating-buttons.temporarily-hidden {\n            display: none;\n        }\n    </style>\n    \n    <div class="floating-buttons-children"></div>\n</div>'),this.$children=this.$widget.find(".floating-buttons-children");for(const t of this.children)this.$children.append(t.render())}async refreshWithNote(t){this.toggle(!0)}toggle(t){this.$widget.toggleClass("temporarily-hidden",!t)}hideFloatingButtonsCommand(){this.toggle(!1)}}class ii extends B.Z{isEnabled(){return super.isEnabled()&&"relationMap"===this.note?.type}doRender(){super.doRender(),this.$widget=$('\n<div class="relation-map-buttons">\n    <style>\n        .relation-map-buttons {\n            display: flex;\n            gap: 10px;\n        }\n    </style>\n\n    <button type="button"\n            class="relation-map-create-child-note floating-button btn bx bx-folder-plus"\n            title="创建新的子笔记并将其添加到此关系图中"></button>\n    \n    <button type="button"\n            class="relation-map-reset-pan-zoom floating-button btn bx bx-crop"\n            title="重置放大系数和座标"></button>\n    \n    <div class="btn-group">\n        <button type="button"\n                class="relation-map-zoom-in floating-button btn bx bx-zoom-in"\n                title="放大"></button>\n    \n        <button type="button"\n                class="relation-map-zoom-out floating-button btn bx bx-zoom-out"\n                title="缩小"></button>\n    </div>\n</div>'),this.$createChildNote=this.$widget.find(".relation-map-create-child-note"),this.$zoomInButton=this.$widget.find(".relation-map-zoom-in"),this.$zoomOutButton=this.$widget.find(".relation-map-zoom-out"),this.$resetPanZoomButton=this.$widget.find(".relation-map-reset-pan-zoom"),this.$createChildNote.on("click",(()=>this.triggerEvent("relationMapCreateChildNote",{ntxId:this.ntxId}))),this.$resetPanZoomButton.on("click",(()=>this.triggerEvent("relationMapResetPanZoom",{ntxId:this.ntxId}))),this.$zoomInButton.on("click",(()=>this.triggerEvent("relationMapResetZoomIn",{ntxId:this.ntxId}))),this.$zoomOutButton.on("click",(()=>this.triggerEvent("relationMapResetZoomOut",{ntxId:this.ntxId}))),this.contentSized()}}class oi extends B.Z{isEnabled(){return super.isEnabled()&&"mermaid"===this.note?.type&&this.note.isContentAvailable()&&"default"===this.noteContext?.viewScope.viewMode}doRender(){super.doRender(),this.$widget=$('\n<button type="button"\n        class="export-mermaid-button"\n        title="将美人鱼图导出为SVG">\n        <span class="bx bx-export"></span>\n</button>\n'),this.$widget.on("click",(()=>this.triggerEvent("exportMermaid",{ntxId:this.ntxId}))),this.contentSized()}}var si=__webpack_require__(383);class ai extends v.Z{constructor(t,e,n){super(),this.iconClass=e,this.title=t,this.dropdownTpl=n}doRender(){this.$widget=$('\n<div class="dropdown right-dropdown-widget dropright">\n    <style>\n    .right-dropdown-widget {\n        height: 53px;\n    }\n    </style>\n\n    <button type="button" data-toggle="dropdown" data-placement="right"\n            aria-haspopup="true" aria-expanded="false" \n            class="bx right-dropdown-button launcher-button"></button>\n    \n    <div class="dropdown-menu dropdown-menu-right"></div>\n</div>\n'),this.$dropdownMenu=this.$widget.find(".dropdown-menu");const t=this.$widget.find(".right-dropdown-button").addClass(this.iconClass).attr("title",this.title).tooltip({trigger:"hover"}).on("click",(()=>t.tooltip("hide")));this.$widget.on("show.bs.dropdown",(async()=>{await this.dropdownShown();const t=this.$dropdownMenu[0].getBoundingClientRect(),e=$(window).height()-t.bottom;e<0&&this.$dropdownMenu.css("top",e)})),this.$dropdownContent=$(this.dropdownTpl),this.$widget.find(".dropdown-menu").append(this.$dropdownContent)}async dropdownShow(){}hideDropdown(){this.$widget.dropdown("hide"),this.$dropdownMenu.removeClass("show")}}class ri extends ai{constructor(t,e){super(t,e,'\n<div class="calendar-dropdown-widget">\n  <style>\n  .calendar-dropdown-widget {\n      width: 350px;\n  }\n  </style>\n\n  <div class="calendar-header">\n    <button class="calendar-btn bx bx-left-arrow-alt" data-calendar-toggle="previous"></button>\n\n    <div class="calendar-header-label" data-calendar-label="month"></div>\n\n    <button class="calendar-btn bx bx-right-arrow-alt" data-calendar-toggle="next"></button>\n  </div>\n\n  <div class="calendar-week">\n    <span>一</span> <span>二</span><span>三</span> <span>四</span> <span>五</span> <span>六</span> <span>日</span>\n  </div>\n  <div class="calendar-body" data-calendar-area="month"></div>\n</div>')}doRender(){super.doRender(),this.$month=this.$dropdownContent.find('[data-calendar-area="month"]'),this.$next=this.$dropdownContent.find('[data-calendar-toggle="next"]'),this.$previous=this.$dropdownContent.find('[data-calendar-toggle="previous"]'),this.$label=this.$dropdownContent.find('[data-calendar-label="month"]'),this.$next.on("click",(()=>{this.date.setMonth(this.date.getMonth()+1),this.createMonth()})),this.$previous.on("click",(t=>{this.date.setMonth(this.date.getMonth()-1),this.createMonth()})),this.$dropdownContent.find(".calendar-header").on("click",(t=>t.stopPropagation())),this.$dropdownContent.on("click",".calendar-date",(async e=>{const n=$(e.target).closest(".calendar-date").attr("data-calendar-date"),i=await si.Z.getDayNote(n);i?(t.default.tabManager.getActiveContext().setNote(i.noteId),this.hideDropdown()):O.default.showError("Cannot find day note")}))}async dropdownShown(){await at.Z.requireLibrary(at.Z.CALENDAR_WIDGET);const e=t.default.tabManager.getActiveContextNote();this.init(e?.getOwnedLabelValue("dateNote"))}init(t){this.activeDate=t?new Date(`${t}T12:00:00`):null,this.todaysDate=new Date,this.date=new Date((this.activeDate||this.todaysDate).getTime()),this.date.setDate(1),this.createMonth()}createDay(t,n,i){const o=$("<a>").addClass("calendar-date").attr("data-calendar-date",e.default.formatDateISO(this.date)),s=$("<span>").html(n);1===n&&(0===i?o.css("marginLeft",6*14.28+"%"):o.css("marginLeft",14.28*(i-1)+"%"));const a=t[e.default.formatDateISO(this.date)];return a&&(o.addClass("calendar-date-exists"),o.attr("href",`#root/${a}`)),this.isEqual(this.date,this.activeDate)&&o.addClass("calendar-date-active"),this.isEqual(this.date,this.todaysDate)&&o.addClass("calendar-date-today"),o.append(s),o}isEqual(t,e){return!(!t&&e||t&&!e)&&t.getFullYear()===e.getFullYear()&&t.getMonth()===e.getMonth()&&t.getDate()===e.getDate()}async createMonth(){const t=e.default.formatDateISO(this.date).substr(0,7),n=await o.Z.get(`special-notes/notes-for-month/${t}`);this.$month.empty();const i=this.date.getMonth();for(;this.date.getMonth()===i;){const t=this.createDay(n,this.date.getDate(),this.date.getDay(),this.date.getFullYear());this.$month.append(t),this.date.setDate(this.date.getDate()+1)}this.date.setDate(1),this.date.setMonth(this.date.getMonth()-1),this.$label.html(`${this.monthsAsString(this.date.getMonth())} ${this.date.getFullYear()}`)}monthsAsString(t){return["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"][t]}}class di extends qe{constructor(t){super(),this.noteToOpen=t,this.title((()=>this.noteToOpen.title)).icon((()=>this.noteToOpen.getIcon())).onClick(((t,e)=>this.launch(e))).onAuxClick(((t,e)=>this.launch(e))).onContextMenu((t=>Pt.Z.openContextMenu(this.noteToOpen.noteId,t)))}async launch(n){if(3===n.which)return;const i=e.default.isCtrlKey(n);1===n.which&&i||2===n.which?await t.default.tabManager.openInNewTab(this.noteToOpen.noteId):await t.default.tabManager.openInSameTab(this.noteToOpen.noteId)}initialRenderCompleteEvent(){}}class li extends ai{constructor(t){super(t.title,t.getIcon(),'\n<div class="bookmark-folder-widget">\n    <style>\n        .bookmark-folder-widget {\n            min-width: 400px;\n            max-height: 500px;\n            padding: 7px 15px 0 15px;\n            font-size: 1.2rem;\n            overflow: auto;\n        }\n        \n        .bookmark-folder-widget ul {\n            padding: 0;\n            list-style-type: none;\n        }\n        \n        .bookmark-folder-widget .note-link {\n            display: block;\n            padding: 5px 10px 5px 5px;\n        }\n        \n        .bookmark-folder-widget .note-link:hover {\n            background-color: var(--accented-background-color);\n            text-decoration: none;\n        }\n        \n        .dropdown-menu .bookmark-folder-widget a:hover {\n            text-decoration: none;\n            background: transparent !important;\n        }\n        \n        .bookmark-folder-widget li .note-link {\n            padding-left: 35px;\n        }\n    </style>\n    \n    <div class="parent-note"></div>\n    \n    <ul class="children-notes"></ul>\n</div>'),this.note=t}doRender(){super.doRender(),this.$parentNote=this.$dropdownContent.find(".parent-note"),this.$childrenNotes=this.$dropdownContent.find(".children-notes")}async dropdownShown(){this.$parentNote.empty(),this.$childrenNotes.empty();const t={showTooltip:!1,showNoteIcon:!0};this.$parentNote.append((await z.Z.createLink(this.note.noteId,t)).addClass("note-link"));for(const e of await this.note.getChildNotes())this.$childrenNotes.append($("<li>").append((await z.Z.createLink(e.noteId,t)).addClass("note-link")))}refreshIcon(){}}class ci extends y{constructor(){super("column"),this.contentSized()}async refresh(){this.$widget.empty(),this.children=[],this.noteIds=[];const t=await a.default.getNote("_lbBookmarks");for(const e of await t.getChildNotes()){this.noteIds.push(e.noteId);const t=e.isLabelTruthy("bookmarkFolder")?new li(e):new di(e).class("launcher-button");this.child(t),this.$widget.append(t.render()),t.refreshIcon()}}initialRenderCompleteEvent(){this.refresh()}entitiesReloadedEvent({loadResults:t}){t.getBranchRows().find((t=>"_lbBookmarks"===t.parentNoteId))&&this.refresh(),t.getAttributeRows().find((t=>"label"===t.type&&["iconClass","workspaceIconClass","bookmarkFolder"].includes(t.name)&&this.noteIds.includes(t.noteId)))&&this.refresh()}}class hi extends Ue{constructor(){super(),this.class("launcher-button"),this.settings.icon=()=>H.Z.isProtectedSessionAvailable()?"bx-check-shield":"bx-shield-quarter",this.settings.title=()=>H.Z.isProtectedSessionAvailable()?"受保护的会话已启动. 点击退出受保护的会话.":"点击进入受保护的会话",this.settings.command=()=>H.Z.isProtectedSessionAvailable()?"leaveProtectedSession":"enterProtectedSession"}protectedSessionStartedEvent(){this.refreshIcon()}}class pi extends v.Z{constructor(){super(),this.syncState="unknown",this.allChangesPushed=!1}doRender(){this.$widget=$('\n<div class="sync-status-widget launcher-button">\n    <style>\n    .sync-status-widget {\n    }\n    \n    .sync-status {\n        box-sizing: border-box;\n    }\n    \n    .sync-status .sync-status-icon {\n        display: inline-block;\n        position: relative;\n        top: -5px;\n        font-size: 110%;\n    }\n    \n    .sync-status .sync-status-sub-icon {\n        font-size: 40%; \n        position: absolute; \n        left: 0;\n        top: 16px;\n    }\n    \n    .sync-status .sync-status-icon span {\n        border: none !important;\n    }\n    \n    .sync-status-icon:not(.sync-status-in-progress):hover {\n        background-color: var(--hover-item-background-color);\n        cursor: pointer;\n    }\n    </style>\n\n    <div class="sync-status">\n        <span class="sync-status-icon sync-status-unknown bx bx-time" \n              data-toggle="tooltip" \n              data-placement="right"\n              title="<p>下次同步时可获取同步状态.</p><p>点击开始同步.</p>">\n        </span>\n        <span class="sync-status-icon sync-status-connected-with-changes bx bx-wifi"\n              data-toggle="tooltip" \n              data-placement="right"\n              title="<p>已连接到同步服务器. <br>还有一些修改的数据需要同步.</p><p>点击开始同步.</p>">\n            <span class="bx bxs-star sync-status-sub-icon"></span>\n        </span>\n        <span class="sync-status-icon sync-status-connected-no-changes bx bx-wifi" \n              data-toggle="tooltip" \n              data-placement="right"\n              title="<p>已连接到同步服务器.<br>所有的修改已经同步.</p><p>点击开始同步.</p>">\n        </span>\n        <span class="sync-status-icon sync-status-disconnected-with-changes bx bx-wifi-off"\n              data-toggle="tooltip" \n              data-placement="right"\n              title="<p>连接到同步服务器失败.<br>还有一些修改的数据需要同步.</p><p>点击开始同步.</p>">\n            <span class="bx bxs-star sync-status-sub-icon"></span>\n        </span>\n        <span class="sync-status-icon sync-status-disconnected-no-changes bx bx-wifi-off" \n              data-toggle="tooltip"\n              data-placement="right"\n              title="<p>连接到同步服务器失败.<br>所有的修改已经同步.</p><p>点击开始同步.</p>">\n        </span>\n        <span class="sync-status-icon sync-status-in-progress bx bx-analyse bx-spin" \n              data-toggle="tooltip"\n              data-placement="right"\n              title="同步中.">\n        </span>\n    </div>\n</div>\n'),this.$widget.hide(),this.$widget.find('[data-toggle="tooltip"]').tooltip({html:!0}),this.$widget.find(".sync-status-icon:not(.sync-status-in-progress)").on("click",(()=>nn())),D.Z.subscribeToMessages((t=>this.processMessage(t)))}showIcon(t){m.Z.get("syncServerHost")?(this.$widget.show(),this.$widget.find(".sync-status-icon").hide(),this.$widget.find(`.sync-status-${t}`).show()):this.toggleInt(!1)}processMessage(t){"sync-pull-in-progress"===t.type||"sync-push-in-progress"===t.type?(this.syncState="in-progress",this.lastSyncedPush=t.lastSyncedPush):"sync-finished"===t.type?(this.syncState="connected",this.lastSyncedPush=t.lastSyncedPush):"sync-failed"===t.type?(this.syncState="disconnected",this.lastSyncedPush=t.lastSyncedPush):"frontend-update"===t.type&&(this.lastSyncedPush=t.data.lastSyncedPush),this.allChangesPushed=this.lastSyncedPush===D.Z.getMaxKnownEntityChangeSyncId(),["unknown","in-progress"].includes(this.syncState)?this.showIcon(this.syncState):this.showIcon(`${this.syncState}-${this.allChangesPushed?"no-changes":"with-changes"}`)}}class ui extends qe{constructor(t){super(),this.class("launcher-button"),this.launcherNote=t;for(const e of t.getOwnedLabels("keyboardShortcut"))this.bindNoteShortcutHandler(e)}launch(){throw new Error("Abstract implementation")}bindNoteShortcutHandler(t){const e=t.attributeId;t.isDeleted?p.Z.removeGlobalShortcut(e):p.Z.bindGlobalShortcut(t.value,(()=>this.launch()),e)}entitiesReloadedEvent({loadResults:t}){for(const e of t.getAttributeRows())e.noteId===this.launcherNote.noteId&&"label"===e.type&&"keyboardShortcut"===e.name?this.bindNoteShortcutHandler(e):"label"===e.type&&"iconClass"===e.name&&T.isAffecting(e,this.launcherNote)&&this.refreshIcon()}}class gi extends ui{constructor(t){super(t),this.title((()=>this.launcherNote.title)).icon((()=>this.launcherNote.getIcon())).onClick(((t,e)=>this.launch(e))).onAuxClick(((t,e)=>this.launch(e))).onContextMenu((t=>{const e=this.getTargetNoteId();if(!e)return;const n=this.getHoistedNoteId();Pt.Z.openContextMenu(e,t,{},n)}))}async launch(n){const i=await this.getTargetNoteId();if(!i||3===n.which)return;const o=await this.getHoistedNoteId();if(n){const s=e.default.isCtrlKey(n);1===n.which&&s||2===n.which?await t.default.tabManager.openInNewTab(i,o):await t.default.tabManager.openInSameTab(i,o)}else await t.default.tabManager.openInSameTab(i,o)}getTargetNoteId(){const t=this.launcherNote.getRelationValue("target");if(t)return t;U.Z.info("This launcher doesn't define target note.")}getHoistedNoteId(){return this.launcherNote.getRelationValue("hoistedNote")||t.default.tabManager.getActiveContext().hoistedNoteId}getTitle(){const t=this.launcherNote.getLabels("keyboardShortcut").map((t=>t.value)).filter((t=>!!t)).join(", ");let e=super.getTitle();return t&&(e+=` (${t})`),e}}class mi extends ui{constructor(t){super(t),this.title((()=>this.launcherNote.title)).icon((()=>this.launcherNote.getIcon())).onClick((()=>this.launch()))}async launch(){if(this.launcherNote.isLabelTruthy("scriptInLauncherContent"))await this.launcherNote.executeScript();else{const t=await this.launcherNote.getRelationTarget("script");await t.executeScript()}}}class bi extends gi{async getTargetNoteId(){return(await si.Z.getTodayNote()).noteId}getHoistedNoteId(){return t.default.tabManager.getActiveContext().hoistedNoteId}}class fi extends Ue{constructor(){super(),this.settings.buttonNoteIdProvider=null}buttonNoteIdProvider(t){return this.settings.buttonNoteIdProvider=t,this}doRender(){super.doRender(),this.updateIcon()}updateIcon(){const t=this.settings.buttonNoteIdProvider();t?a.default.getNote(t).then((t=>{this.settings.icon=t.getIcon(),this.refreshIcon()})):console.error(`buttonNoteId for '${this.componentId}' is not defined.`)}entitiesReloadedEvent({loadResults:t}){const e=a.default.getNoteFromCache(this.buttonNoteIdProvider());e&&t.getAttributeRows(this.componentId).find((t=>"label"===t.type&&"iconClass"===t.name&&T.isAffecting(t,e)))&&this.updateIcon()}}class wi extends fi{constructor(t,e){super(),this.title((()=>t.title)).icon((()=>t.getIcon())).command((()=>e)).titlePlacement("right").buttonNoteIdProvider((()=>t.noteId)).onContextMenu((t=>this.showContextMenu(t))).class("launcher-button")}isEnabled(){return super.isEnabled()&&e.default.isElectron()}doRender(){super.doRender(),e.default.isElectron()&&(this.webContents=e.default.dynamicRequire("@electron/remote").getCurrentWebContents(),this.webContents.clearHistory(),this.refresh())}async showContextMenu(t){t.preventDefault()}refresh(){e.default.isElectron()}activeNoteChangedEvent(){this.refresh()}}class vi extends v.Z{constructor(){super(),this.innerWidget=null}isEnabled(){return this.innerWidget.isEnabled()}doRender(){this.$widget=this.innerWidget.render()}async initLauncher(t){if("launcher"!==t.type)throw new Error(`Note '${t.noteId}' '${t.title}' is not a launcher even though it's in the launcher subtree`);if(!e.default.isDesktop()&&t.isLabelTruthy("desktopOnly"))return!1;const n=t.getLabelValue("launcherType");if(glob.TRILIUM_SAFE_MODE&&"customWidget"===n)return!1;if("command"===n)this.innerWidget=this.initCommandLauncherWidget(t).class("launcher-button");else if("note"===n)this.innerWidget=new gi(t).class("launcher-button");else if("script"===n)this.innerWidget=new mi(t).class("launcher-button");else if("customWidget"===n)this.innerWidget=await this.initCustomWidget(t);else{if("builtinWidget"!==n)throw new Error(`Unrecognized launcher type '${n}' for launcher '${t.noteId}' title '${t.title}'`);this.innerWidget=this.initBuiltinWidget(t)}if(!this.innerWidget)throw new Error(`Unknown initialization error for note '${t.noteId}', title '${t.title}'`);return this.child(this.innerWidget),!0}initCommandLauncherWidget(t){return(new Ue).title((()=>t.title)).icon((()=>t.getIcon())).command((()=>t.getLabelValue("command")))}async initCustomWidget(t){const e=await t.getRelationTarget("widget");if(e)return await e.executeScript();throw new Error(`Custom widget of launcher '${t.noteId}' '${t.title}' is not defined.`)}initBuiltinWidget(t){const e=t.getLabelValue("builtinWidget");if("calendar"===e)return new ri(t.title,t.getIcon());if("spacer"===e){const e=parseInt(t.getLabelValue("baseSize")||"40"),n=parseInt(t.getLabelValue("growthFactor")||"100");return new Ze(e,n)}if("bookmarks"===e)return new ci;if("protectedSession"===e)return new hi;if("syncStatus"===e)return new pi;if("backInHistoryButton"===e)return new wi(t,"backInNoteHistory");if("forwardInHistoryButton"===e)return new wi(t,"forwardInNoteHistory");if("todayInJournal"===e)return new bi(t);throw new Error(`Unrecognized builtin widget ${e} for launcher ${t.noteId} "${t.title}"`)}}class xi extends y{constructor(){super("column"),this.id("launcher-container"),this.css("height","100%"),this.filling(),this.load()}async load(){await a.default.initializedPromise;const e=await a.default.getNote("_lbVisibleLaunchers",!0);if(!e)return void console.log("Visible launchers root note doesn't exist.");const n=[];for(const t of await e.getChildNotes())try{const e=new vi;await e.initLauncher(t)&&n.push(e)}catch(t){console.error(t)}this.children=[],this.child(...n),this.$widget.empty(),this.renderChildren(),await this.handleEventInChildren("initialRenderComplete");const i=t.default.tabManager.getActiveContext();i&&(await this.handleEvent("setNoteContext",{noteContext:i}),i.notePath&&await this.handleEvent("noteSwitched",{noteContext:i,notePath:i.notePath}))}entitiesReloadedEvent({loadResults:t}){t.getBranchRows().find((t=>a.default.getNoteFromCache(t.parentNoteId)?.isLaunchBarConfig()))&&this.load()}}class yi extends Ue{constructor(){super(),this.icon("bx-history").title("笔记修改历史").command("showRevisions").titlePlacement("bottom").class("icon-action")}isEnabled(){return super.isEnabled()&&!["launcher","doc"].includes(this.note?.type)}}class $i extends B.Z{isEnabled(){return super.isEnabled()&&this.note&&(this.note.mime.startsWith("application/javascript")||"text/x-sqlite;schema=trilium"===this.note.mime)}doRender(){this.$widget=$('\n<div class="code-buttons-widget">\n    <style>\n        .code-buttons-widget {\n            display: flex;\n            gap: 10px;\n        }\n    </style>\n\n    <button data-trigger-command="runActiveNote" class="execute-button floating-button btn" title="执行脚本">\n        <span class="bx bx-run"></span>\n    </button>\n    \n    <button class="trilium-api-docs-button floating-button btn" title="打开 Trilium API 文档">\n        <span class="bx bx-help-circle"></span>\n    </button>\n    \n    <button class="save-to-note-button floating-button btn">\n        <span class="bx bx-save"></span>\n    </button>\n</div>'),this.$openTriliumApiDocsButton=this.$widget.find(".trilium-api-docs-button"),this.$openTriliumApiDocsButton.on("click",(()=>{O.default.showMessage("打开API文档..."),this.note.mime.endsWith("frontend")?window.open("https://zadam.github.io/trilium/frontend_api/FrontendScriptApi.html","_blank"):window.open("https://zadam.github.io/trilium/backend_api/BackendScriptApi.html","_blank")})),this.$executeButton=this.$widget.find(".execute-button"),this.$saveToNoteButton=this.$widget.find(".save-to-note-button"),this.$saveToNoteButton.on("click",(async()=>{const{notePath:e}=await o.Z.post("special-notes/save-sql-console",{sqlConsoleNoteId:this.noteId});await D.Z.waitForMaxKnownEntityChangeId(),await t.default.tabManager.getActiveContext().setNote(e),O.default.showMessage(`SQL Console note has been saved into ${await Z.Z.getNotePathTitle(e)}`)})),k.default.updateDisplayedShortcuts(this.$widget),this.contentSized(),super.doRender()}async refreshWithNote(t){this.$executeButton.toggle(t.mime.startsWith("application/javascript")||"text/x-sqlite;schema=trilium"===t.mime),this.$saveToNoteButton.toggle("text/x-sqlite;schema=trilium"===t.mime&&t.isHiddenCompletely()),this.$openTriliumApiDocsButton.toggle(t.mime.startsWith("application/javascript;env="))}async noteTypeMimeChangedEvent({noteId:t}){this.isNote(t)&&await this.refresh()}}class Ii extends B.Z{isEnabled(){return this.note&&this.note.mime.startsWith("application/javascript;env=")&&super.isEnabled()}doRender(){this.$widget=$('\n<div class="api-log-widget">\n    <style>\n    .api-log-widget {\n        padding: 15px;\n        flex-grow: 1;\n        max-height: 40%;\n        position: relative;\n    }\n    \n    .hidden-api-log {\n        display: none;\n    }\n    \n    .api-log-container {\n        overflow: auto;\n        height: 100%;\n    }\n    \n    .close-api-log-button {\n        padding: 5px;\n        border: 1px solid var(--button-border-color);\n        background-color: var(--button-background-color);\n        border-radius: var(--button-border-radius);\n        color: var(--button-text-color);\n        position: absolute;\n        top: 10px;\n        right: 40px;\n        cursor: pointer;\n    }\n    </style>\n    \n    <div class="bx bx-x close-api-log-button" title="Close"></div>\n   \n    <div class="api-log-container"></div>\n</div>'),this.toggle(!1),this.$logContainer=this.$widget.find(".api-log-container"),this.$closeButton=this.$widget.find(".close-api-log-button"),this.$closeButton.on("click",(()=>this.toggle(!1)))}async refreshWithNote(t){this.$logContainer.empty()}apiLogMessagesEvent({messages:t,noteId:e}){if(this.isNote(e)){this.toggle(!0);for(const e of t)this.$logContainer.append(e).append($("<br>"))}}toggle(t){this.$widget.toggleClass("hidden-api-log",!t)}}class Ci extends B.Z{doRender(){super.doRender(),this.$widget=$('\n<div class="close-floating-buttons">\n    <style>\n        .close-floating-buttons {\n            display: none;\n            margin-left: 5px !important;\n        }\n    \n        /* conditionally display close button if there\'s some other button visible */\n        .floating-buttons *:not(.hidden-int):not(.hidden-no-content) ~ .close-floating-buttons {\n            display: block;\n        }\n        \n        .close-floating-buttons-button {\n            border: 1px solid transparent;\n            color: var(--button-text-color);\n            padding: 6px;\n            border-radius: 100px;\n        }\n        \n        .close-floating-buttons-button:hover {\n            border: 1px solid var(--button-border-color);\n        }\n    </style>\n\n    <button type="button"\n            class="close-floating-buttons-button btn bx bx-x"\n            title="隐藏按钮"></button>\n</div>\n'),this.$widget.on("click",(()=>this.triggerCommand("hideFloatingButtons"))),this.contentSized()}}class Ni extends B.Z{isEnabled(){return super.isEnabled()&&this.note&&(this.note.mime.startsWith("application/javascript")||this.isTriliumSqlite())&&(this.note.hasLabel("executeDescription")||this.note.hasLabel("executeButton"))}isTriliumSqlite(){return"text/x-sqlite;schema=trilium"===this.note.mime}getTitle(){return{show:this.isEnabled(),activate:!0,title:this.isTriliumSqlite()?"Query":"Script",icon:"bx bx-run"}}doRender(){this.$widget=$('\n<div class="script-runner-widget">\n    <style>\n        .script-runner-widget {\n            padding: 12px;\n            color: var(--muted-text-color);\n        }\n\n        .execute-description {\n            margin-bottom: 10px;\n        }\n    </style>\n\n    <div class="execute-description"></div>\n    \n    <div style="display: flex; justify-content: space-around">\n        <button data-trigger-command="runActiveNote" class="execute-button btn btn-sm"></button>\n    </div>\n</div>'),this.contentSized(),this.$executeButton=this.$widget.find(".execute-button"),this.$executeDescription=this.$widget.find(".execute-description")}async refreshWithNote(t){const e=t.getLabelValue("executeButton")||(this.isTriliumSqlite()?"Execute Query":"Execute Script");this.$executeButton.text(e),this.$executeButton.attr("title",e),k.default.updateDisplayedShortcuts(this.$widget);const n=t.getLabelValue("executeDescription");n?this.$executeDescription.show().html(n):this.$executeDescription.empty().hide()}}class ki extends qe{constructor(t){super(),this.isMovingLeft=t,this.icon(t?"bx-chevron-left":"bx-chevron-right").title(t?"向左移动":"向右移动").titlePlacement("bottom").onClick((async(t,e)=>{e.stopPropagation(),t.triggerCommand("moveThisNoteSplit",{ntxId:t.getClosestNtxId(),isMovingLeft:this.isMovingLeft})})).class("icon-action")}isEnabled(){if(!super.isEnabled())return!1;if(this.isMovingLeft)return!!this.noteContext?.mainNtxId;{const e=t.default.tabManager.noteContexts.findIndex((t=>t.ntxId===this.ntxId)),n=t.default.tabManager.noteContexts[e+1];return!!n?.mainNtxId}}async noteContextRemovedEvent(){this.refresh()}async newNoteContextCreatedEvent(){this.refresh()}async noteContextReorderEvent(){this.refresh()}async contextsReopenedEvent(){this.refresh()}}class Ti extends v.Z{constructor(){super(),this.parentNoteId=null}doRender(){this.$widget=$('\n<div class="upload-attachments-dialog modal fade mx-auto" tabindex="-1" role="dialog">\n    <div class="modal-dialog modal-lg" role="document">\n        <div class="modal-content">\n            <div class="modal-header">\n                <h5 class="modal-title">上传附件到笔记</h5>\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n            </div>\n            <form class="upload-attachment-form">\n                <div class="modal-body">\n                    <div class="form-group">\n                        <label for="upload-attachment-file-upload-input"><strong>选择文件</strong></label>\n\n                        <input type="file" class="upload-attachment-file-upload-input form-control-file" multiple />\n\n                        <p>文件将作为附件上传到<strong class="upload-attachment-note-title"></strong>.\n                    </div>\n\n                    <div class="form-group">\n                        <strong>选项:</strong>\n\n                        <div class="checkbox">\n                            <label data-toggle="tooltip" title="<p>如果您选择此选项, Trilium将尝试通过缩放和优化来缩小上传的图像, 这可能会影响感知的图像质量. 如果未选中, 则图像将以原样上传.</p>">\n                                <input class="shrink-images-checkbox" value="1" type="checkbox" checked> <span>压缩图像</span>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n                <div class="modal-footer">\n                    <button class="upload-attachment-button btn btn-primary">上传</button>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>'),this.$form=this.$widget.find(".upload-attachment-form"),this.$noteTitle=this.$widget.find(".upload-attachment-note-title"),this.$fileUploadInput=this.$widget.find(".upload-attachment-file-upload-input"),this.$uploadButton=this.$widget.find(".upload-attachment-button"),this.$shrinkImagesCheckbox=this.$widget.find(".shrink-images-checkbox"),this.$form.on("submit",(()=>(this.$uploadButton.attr("disabled","disabled"),this.uploadAttachments(this.parentNoteId),!1))),this.$fileUploadInput.on("change",(()=>{this.$fileUploadInput.val()?this.$uploadButton.removeAttr("disabled"):this.$uploadButton.attr("disabled","disabled")})),this.$widget.find('[data-toggle="tooltip"]').tooltip({html:!0})}async showUploadAttachmentsDialogEvent({noteId:t}){this.parentNoteId=t,this.$fileUploadInput.val("").trigger("change"),this.$shrinkImagesCheckbox.prop("checked",m.Z.is("compressImages")),this.$noteTitle.text(await Z.Z.getNoteTitle(this.parentNoteId)),e.default.openDialog(this.$widget)}async uploadAttachments(t){const e=Array.from(this.$fileUploadInput[0].files),n={shrinkImages:(i=this.$shrinkImagesCheckbox,i.is(":checked")?"true":"false")};var i;this.$widget.modal("hide"),await jn.default.uploadFiles("attachments",t,e,n)}}class Si extends B.Z{isEnabled(){return super.isEnabled()&&["mermaid","canvas"].includes(this.note?.type)&&this.note.isContentAvailable()&&"default"===this.noteContext?.viewScope.viewMode}doRender(){super.doRender(),this.$widget=$('\n<button type="button"\n        class="copy-image-reference-button"\n        title="复制图像引用到剪贴板, 可以粘贴到文本笔记中.">\n        <span class="bx bx-copy"></span>\n        \n        <div class="hidden-image-copy"></div>\n</button>'),this.$hiddenImageCopy=this.$widget.find(".hidden-image-copy"),this.$widget.on("click",(()=>{this.$hiddenImageCopy.empty().append($("<img>").attr("src",e.default.createImageSrcUrl(this.note))),$t(this.$hiddenImageCopy),this.$hiddenImageCopy.empty()})),this.contentSized()}}class Ei extends B.Z{isEnabled(){return super.isEnabled()&&["text","code"].includes(this.note?.type)}doRender(){this.$widget=$('<div class="scroll-padding-widget"></div>'),this.contentSized(),this.$widget.on("click",(()=>this.triggerCommand("scrollToEnd",{ntxId:this.ntxId})))}initialRenderCompleteEvent(){this.$scrollingContainer=this.$widget.closest(".scrolling-container"),new ResizeObserver((()=>this.refreshHeight())).observe(this.$scrollingContainer[0]),this.refreshHeight()}refreshHeight(){const t=this.$scrollingContainer.height();this.$widget.css("height",Math.round(t/2))}}class Ai{constructor(t){this.customWidgets=t}getRootWidget(t){return t.noteTreeWidget=new V,(new Se).setParent(t).child(new y("column").id("launcher-pane").css("width","53px").child(new N).child(new xi).child(new je)).child((new _).child(new Le).child(t.noteTreeWidget).child(...this.customWidgets.get("left-pane"))).child(new y("column").id("rest-pane").css("flex-grow","1").child(new y("row").child(new R).child(new P).css("height","40px")).child(new y("row").filling().collapsible().child(new y("column").filling().collapsible().id("center-pane").child(new De((()=>(new bn).child(new y("row").class("title-row").css("height","50px").css("min-height","50px").css("align-items","center").cssBlock(".title-row > * { margin: 5px; }").child(new Ne).child(new J).child(new Ze(0,1)).child(new ki(!0)).child(new ki(!1)).child(new Ke).child(new Ve)).child((new Vt).ribbon(new Kt).ribbon(new Ni).ribbon(new ve).ribbon(new un).ribbon(new rn).ribbon(new Ce).ribbon(new $e).ribbon(new Ie).ribbon(new sn).ribbon(new ct).ribbon(new Jt).ribbon(new ln).ribbon(new dn).ribbon(new cn).ribbon(new an).button(new yi).button(new ht)).child(new wn).child(new Me).child((new ni).child(new pn).child(new $i).child(new ii).child(new Si).child(new oi).child(new fn).child(new Ci)).child(new mn).child((new Te).filling().child(new ye).child(new qt).child(new Yt).child(new ke).child(new xe).child(new Ei)).child(new Ii).child(new kn).child(...this.customWidgets.get("node-detail-pane"),...this.customWidgets.get("note-detail-pane"))))).child(...this.customWidgets.get("center-pane"))).child((new hn).child(new Sn).child(new En).child(...this.customWidgets.get("right-pane"))))).child(new An).child(new Rn).child(new Pn).child(new _n).child(new Zn).child(new Ln).child(new Dn).child(new Bn).child(new Wn).child(new Fn).child(new zn).child(new Hn).child(new Un).child(new qn).child(new Vn).child(new Ti).child(new Kn).child(new Jn).child(new Gn).child(new Yn).child(new Qn).child(new ti).child(new ei)}}const Ri=function(){window.glob.isDesktop=e.default.isDesktop,window.glob.isMobile=e.default.isMobile,window.glob.getComponentByEl=e=>t.default.getComponentByEl(e),window.glob.getHeaders=o.Z.getHeaders,window.glob.getReferenceLinkTitle=t=>z.Z.getReferenceLinkTitle(t),window.glob.getReferenceLinkTitleSync=t=>z.Z.getReferenceLinkTitleSync(t),window.glob.getActiveContextNote=()=>t.default.tabManager.getActiveContextNote(),window.glob.requireLibrary=at.Z.requireLibrary,window.glob.ESLINT=at.Z.ESLINT,window.glob.appContext=t.default,window.glob.froca=a.default,window.glob.treeCache=a.default,window.glob.importMarkdownInline=async()=>t.default.triggerCommand("importMarkdownInline"),window.glob.SEARCH_HELP_TEXT='\n    <strong>搜索建议</strong> - 参见 <button class="btn btn-sm" type="button" data-help-page="Search">搜索语法完整帮助文档</button>\n    <p>\n    <ul>\n        <li>输入任意文字进行全文搜索</li>\n                <li><code>#abc</code> - 会返回含有abc标签的笔记</li>\n                <li><code>#year = 2019</code> - <code>year</code>并且值是<code>2019</code>的笔记</li>\n                <li><code>#rock #pop</code> - 会匹配同时含有 <code>rock</code> 和  <code>pop</code> 标签的笔记</li>\n                <li><code>#rock or #pop</code> - 含有其中任意一个标签的笔记</li>\n                <li><code>#year &lt;= 2000</code> - 可以用比较符号(比如 &gt;, &gt;=, &lt;).</li>\n                <li><code>note.dateCreated >= MONTH-1</code> - 上个月创建的笔记</li>\n        <li><code>=handler</code> - 会执行<code>=handler</code>关联的代码来获取结果</li>\n    </ul>\n    </p>',window.onerror=function(t,e,n,i,o){let s="未捕获的错误: ";return t.toLowerCase().includes("script error")?s+="没有详细信息":s+=[`信息: ${t}`,`URL: ${e}`,`行数: ${n}`,`列数: ${i}`,`错误对象: ${JSON.stringify(o)}`,`堆栈: ${o&&o.stack}`].join(", "),D.Z.logError(s),!1};for(const t of glob.appCssNoteIds||[])at.Z.requireCss(`api/notes/download/${t}`,!1);e.default.initHelpButtons($(window)),$("body").on("click","a.external",(function(){return window.open($(this).attr("href"),"_blank"),!1}))};i.default.getWidgetBundlesByParent().then((e=>{t.default.setLayout(new Ai(e)),t.default.start()})),Ri(),e.default.isElectron()&&e.default.dynamicRequire("electron").ipcRenderer.on("globalShortcut",(async(e,n)=>t.default.triggerCommand(n))),g(),n.Z.setupGlobalTooltip(),h.init(),e.default.isElectron()&&w()})()})();
//# sourceMappingURL=desktop.js.map