{"version":3,"file":"475.js","mappings":"yLAMe,MAAMA,EAKjBC,YAAYC,EAAYC,GACpBC,KAAKF,WAAaA,EAClBE,KAAKD,KAAOA,CAChB,CAEAE,WAAWC,GACP,SAAiB,CACbC,EAAGD,EAAEE,MACLC,EAAGH,EAAEI,MACLC,YAAaP,KAAKQ,eAClBC,sBAAuB,CAACC,EAAMR,IAAMF,KAAKS,sBAAsBC,IAEvE,CAEAT,qBACI,MAAMU,QAAa,kBAAcX,KAAKD,KAAKa,KAAKC,QAC1CC,EAAed,KAAKD,KAAKgB,YAAYH,KAAKC,OAE1CG,EAAgC,wBAAhBL,EAAKE,OACrBI,EAAkC,0BAAhBN,EAAKE,OACvBK,EAAiC,wBAAjBJ,EAChBK,EAAmC,0BAAjBL,EAClBM,EAASF,GAAiBC,EAC1BE,GAAgBV,EAAKE,OAAOS,WAAW,KAG7C,MAAO,CACFN,GAAiBC,EAAmB,CAAEM,MAAO,UAAWC,QAAS,kBAAmBC,OAAQ,cAAiB,KAC7GT,GAAiBC,EAAmB,CAAEM,MAAO,UAAWC,QAAS,oBAAqBC,OAAQ,cAAiB,KAC/GT,GAAiBC,EAAmB,CAAEM,MAAO,UAAWC,QAAS,oBAAqBC,OAAQ,cAAiB,KAC/GT,GAAiBC,EAAmB,CAAEM,MAAO,OAAQC,QAAS,oBAAqBC,OAAQ,cAAiB,KAC5GT,GAAiBC,EAAmB,CAAEM,MAAO,QAAW,KACzD,CAAEA,MAAO,2CAA4CC,QAAS,cAAeC,OAAQ,cAAeC,QAASL,GAC7G,CAAEE,MAAO,KAAMC,QAAS,gBAAiBC,OAAQ,cAAeC,SAThDL,GAAgBV,EAAKgB,qBAUrC,CAAEJ,MAAO,QACTJ,EAAkB,CAAEI,MAAO,WAAYC,QAAS,wBAAyBC,OAAQ,aAAcC,SAAS,GAAS,KACjHR,EAAgB,CAAEK,MAAO,WAAYC,QAAS,0BAA2BC,OAAQ,aAAcC,SAAS,GAAS,KACjH,CAAEH,MAAO,8CAA+CC,QAAS,mBAAoBC,OAAQ,cACzFC,QAASN,IACfQ,QAAOC,GAAe,OAARA,GACpB,CAEA5B,6BAA4B,QAACuB,IACT,kBAAZA,EAUJxB,KAAKF,WAAWgC,eAAeN,EAAS,CACpCzB,KAAMC,KAAKD,KACXgC,SAAU,gBAAwB/B,KAAKD,MACvCiC,0BAA2BhC,KAAKF,WAAWmC,6BAA6BjC,KAAKD,MAC7EmC,wBAAyBlC,KAAKF,WAAWqC,2BAA2BnC,KAAKD,cAbjD,YAAsB,UAAUC,KAAKD,KAAKwB,yDAGxD,SAAY,2BAA2BvB,KAAKD,KAAKa,KAAKC,eAYxE,E","sources":["webpack://trilium/./src/public/app/menus/launcher_context_menu.js"],"sourcesContent":["import treeService from '../services/tree.js';\nimport froca from \"../services/froca.js\";\nimport contextMenu from \"./context_menu.js\";\nimport dialogService from \"../services/dialog.js\";\nimport server from \"../services/server.js\";\n\nexport default class LauncherContextMenu {\n    /**\n     * @param {NoteTreeWidget} treeWidget\n     * @param {FancytreeNode} node\n     */\n    constructor(treeWidget, node) {\n        this.treeWidget = treeWidget;\n        this.node = node;\n    }\n\n    async show(e) {\n        contextMenu.show({\n            x: e.pageX,\n            y: e.pageY,\n            items: await this.getMenuItems(),\n            selectMenuItemHandler: (item, e) => this.selectMenuItemHandler(item)\n        })\n    }\n\n    async getMenuItems() {\n        const note = await froca.getNote(this.node.data.noteId);\n        const parentNoteId = this.node.getParent().data.noteId;\n\n        const isVisibleRoot = note.noteId === '_lbVisibleLaunchers';\n        const isAvailableRoot = note.noteId === '_lbAvailableLaunchers';\n        const isVisibleItem = parentNoteId === '_lbVisibleLaunchers';\n        const isAvailableItem = parentNoteId === '_lbAvailableLaunchers';\n        const isItem = isVisibleItem || isAvailableItem;\n        const canBeDeleted = !note.noteId.startsWith(\"_\"); // fixed notes can't be deleted\n        const canBeReset = !canBeDeleted && note.isLaunchBarConfig();;\n\n        return [\n            (isVisibleRoot || isAvailableRoot) ? { title: '添加笔记启动器', command: 'addNoteLauncher', uiIcon: \"bx bx-plus\" } : null,\n            (isVisibleRoot || isAvailableRoot) ? { title: '添加脚本启动器', command: 'addScriptLauncher', uiIcon: \"bx bx-plus\" } : null,\n            (isVisibleRoot || isAvailableRoot) ? { title: '添加自定义部件', command: 'addWidgetLauncher', uiIcon: \"bx bx-plus\" } : null,\n            (isVisibleRoot || isAvailableRoot) ? { title: '添加间隔', command: 'addSpacerLauncher', uiIcon: \"bx bx-plus\" } : null,\n            (isVisibleRoot || isAvailableRoot) ? { title: \"----\" } : null,\n            { title: '删除<kbd data-command=\"deleteNotes\"></kbd>', command: \"deleteNotes\", uiIcon: \"bx bx-trash\", enabled: canBeDeleted },\n            { title: '重置', command: \"resetLauncher\", uiIcon: \"bx bx-empty\", enabled: canBeReset},\n            { title: \"----\" },\n            isAvailableItem ? { title: '移动到可见启动器', command: \"moveLauncherToVisible\", uiIcon: \"bx bx-show\", enabled: true } : null,\n            isVisibleItem ? { title: '移动到可用启动器', command: \"moveLauncherToAvailable\", uiIcon: \"bx bx-hide\", enabled: true } : null,\n            { title: `复制启动器 <kbd data-command=\"duplicateSubtree\">`, command: \"duplicateSubtree\", uiIcon: \"bx bx-empty\",\n                enabled: isItem }\n        ].filter(row => row !== null);\n    }\n\n    async selectMenuItemHandler({command}) {\n        if (command === 'resetLauncher') {\n            const confirmed = await dialogService.confirm(`您确定要重置\"${this.node.title}\"吗? 这个笔记和它的子笔记的所有数据都会丢失, 并且启动器会恢复到它原来的位置.`);\n\n            if (confirmed) {\n                await server.post(`special-notes/launchers/${this.node.data.noteId}/reset`);\n            }\n\n            return;\n        }\n\n        this.treeWidget.triggerCommand(command, {\n            node: this.node,\n            notePath: treeService.getNotePath(this.node),\n            selectedOrActiveBranchIds: this.treeWidget.getSelectedOrActiveBranchIds(this.node),\n            selectedOrActiveNoteIds: this.treeWidget.getSelectedOrActiveNoteIds(this.node)\n        });\n    }\n}\n"],"names":["LauncherContextMenu","constructor","treeWidget","node","this","async","e","x","pageX","y","pageY","items","getMenuItems","selectMenuItemHandler","item","note","data","noteId","parentNoteId","getParent","isVisibleRoot","isAvailableRoot","isVisibleItem","isAvailableItem","isItem","canBeDeleted","startsWith","title","command","uiIcon","enabled","isLaunchBarConfig","filter","row","triggerCommand","notePath","selectedOrActiveBranchIds","getSelectedOrActiveBranchIds","selectedOrActiveNoteIds","getSelectedOrActiveNoteIds"],"sourceRoot":""}