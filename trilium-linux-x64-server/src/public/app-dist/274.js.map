{"version":3,"file":"274.js","mappings":"2MAMOA,eAAeC,EAAYC,EAAYC,EAAcC,EAAOC,GAC/D,IAAK,CAAC,QAAS,eAAeC,SAASJ,GACnC,MAAM,IAAIK,MAAM,oCAAoCL,OAGxD,GAAqB,IAAjBE,EAAMI,OACN,OAGJ,MAAMC,EAAS,uBAAmB,IAClC,IAAIC,EAAU,EAEd,IAAK,MAAMC,KAAQP,EAAO,CACtBM,IAEA,MAAME,EAAW,IAAIC,SACrBD,EAASE,OAAO,SAAUH,GAC1BC,EAASE,OAAO,SAAUL,GAC1BG,EAASE,OAAO,OAAQJ,IAAYN,EAAMI,OAAS,OAAS,SAE5D,IAAK,MAAMO,KAAOV,EACdO,EAASE,OAAOC,EAAKV,EAAQU,UAG3BC,EAAEC,KAAK,CACTC,IAAK,GAAGC,OAAOC,KAAKC,mBAAmBlB,KAAgBD,WACvDoB,cAAe,iBACfC,KAAMX,EACNY,SAAU,OACVC,KAAM,OACNC,QAAS,KACTC,MAAO,SAAUC,GACb,oBAAuB,kBAAkBA,EAAIC,eACjD,EACAC,aAAa,EACbC,aAAa,GAErB,CACJ,CAEA,SAASC,EAAUC,EAAIC,GACnB,MAAO,CACHD,GAAIA,EACJE,MAAO,OACPD,QAASA,EACTE,KAAM,OAEd,CAEA,yBAAuBpC,UACnB,GAAyB,gBAArBkC,EAAQG,SAIZ,GAAqB,cAAjBH,EAAQT,KACR,0BAA6BS,EAAQzB,QACrC,oBAAuByB,EAAQA,cAC5B,GAAqB,sBAAjBA,EAAQT,KACf,yBAA4BO,EAAUE,EAAQzB,OAAQ,uBAAuByB,EAAQI,uBAClF,GAAqB,kBAAjBJ,EAAQT,KAA0B,CACzC,MAAMc,EAAQP,EAAUE,EAAQzB,OAAQ,SACxC8B,EAAMC,WAAa,IAEnB,yBAA4BD,GAExBL,EAAQO,OAAOC,sBACT,wCAAyCC,QAAQT,EAAQO,OAAOC,eAE9E,KAGJ,yBAAuB1C,UACnB,GAAyB,sBAArBkC,EAAQG,SAIZ,GAAqB,cAAjBH,EAAQT,KACR,0BAA6BS,EAAQzB,QACrC,oBAAuByB,EAAQA,cAC5B,GAAqB,sBAAjBA,EAAQT,KACf,yBAA4BO,EAAUE,EAAQzB,OAAQ,uBAAuByB,EAAQI,uBAClF,GAAqB,kBAAjBJ,EAAQT,KAA0B,CACzC,MAAMc,EAAQP,EAAUE,EAAQzB,OAAQ,SACxC8B,EAAMC,WAAa,IAEnB,yBAA4BD,GAExBL,EAAQO,OAAOtC,oBACT,wCAAyCwC,QAAQT,EAAQO,OAAOC,eAAgB,CAClFE,UAAW,CACPC,SAAU,gBAI1B,KAGJ,SACI5C,c","sources":["webpack://trilium/./src/public/app/services/import.js"],"sourcesContent":["import toastService from \"./toast.js\";\nimport server from \"./server.js\";\nimport ws from \"./ws.js\";\nimport utils from \"./utils.js\";\nimport appContext from \"../components/app_context.js\";\n\nexport async function uploadFiles(entityType, parentNoteId, files, options) {\n    if (!['notes', 'attachments'].includes(entityType)) {\n        throw new Error(`Unrecognized import entity type '${entityType}'.`);\n    }\n\n    if (files.length === 0) {\n        return;\n    }\n\n    const taskId = utils.randomString(10);\n    let counter = 0;\n\n    for (const file of files) {\n        counter++;\n\n        const formData = new FormData();\n        formData.append('upload', file);\n        formData.append('taskId', taskId);\n        formData.append('last', counter === files.length ? \"true\" : \"false\");\n\n        for (const key in options) {\n            formData.append(key, options[key]);\n        }\n\n        await $.ajax({\n            url: `${window.glob.baseApiUrl}notes/${parentNoteId}/${entityType}-import`,\n            headers: await server.getHeaders(),\n            data: formData,\n            dataType: 'json',\n            type: 'POST',\n            timeout: 60 * 60 * 1000,\n            error: function (xhr) {\n                toastService.showError(`Import failed: ${xhr.responseText}`);\n            },\n            contentType: false, // NEEDED, DON'T REMOVE THIS\n            processData: false, // NEEDED, DON'T REMOVE THIS\n        });\n    }\n}\n\nfunction makeToast(id, message) {\n    return {\n        id: id,\n        title: \"导入状态\",\n        message: message,\n        icon: \"plus\"\n    };\n}\n\nws.subscribeToMessages(async message => {\n    if (message.taskType !== 'importNotes') {\n        return;\n    }\n\n    if (message.type === 'taskError') {\n        toastService.closePersistent(message.taskId);\n        toastService.showError(message.message);\n    } else if (message.type === 'taskProgressCount') {\n        toastService.showPersistent(makeToast(message.taskId, `Import in progress: ${message.progressCount}`));\n    } else if (message.type === 'taskSucceeded') {\n        const toast = makeToast(message.taskId, \"导入成功.\");\n        toast.closeAfter = 5000;\n\n        toastService.showPersistent(toast);\n\n        if (message.result.importedNoteId) {\n            await appContext.tabManager.getActiveContext().setNote(message.result.importedNoteId);\n        }\n    }\n});\n\nws.subscribeToMessages(async message => {\n    if (message.taskType !== 'importAttachments') {\n        return;\n    }\n\n    if (message.type === 'taskError') {\n        toastService.closePersistent(message.taskId);\n        toastService.showError(message.message);\n    } else if (message.type === 'taskProgressCount') {\n        toastService.showPersistent(makeToast(message.taskId, `Import in progress: ${message.progressCount}`));\n    } else if (message.type === 'taskSucceeded') {\n        const toast = makeToast(message.taskId, \"导入成功.\");\n        toast.closeAfter = 5000;\n\n        toastService.showPersistent(toast);\n\n        if (message.result.parentNoteId) {\n            await appContext.tabManager.getActiveContext().setNote(message.result.importedNoteId, {\n                viewScope: {\n                    viewMode: 'attachments'\n                }\n            });\n        }\n    }\n});\n\nexport default {\n    uploadFiles\n};\n"],"names":["async","uploadFiles","entityType","parentNoteId","files","options","includes","Error","length","taskId","counter","file","formData","FormData","append","key","$","ajax","url","window","glob","baseApiUrl","headers","data","dataType","type","timeout","error","xhr","responseText","contentType","processData","makeToast","id","message","title","icon","taskType","progressCount","toast","closeAfter","result","importedNoteId","setNote","viewScope","viewMode"],"sourceRoot":""}